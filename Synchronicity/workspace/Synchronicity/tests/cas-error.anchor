

class Ref {
}

class Node {

    noABA volatile Ref pair  moves_as isLocal(this) ? isRead() ? B : (isLocal(newValue) ? B : E)
                                                     : isRead() ? N :  (isLocal(newValue) ? N : E)
                     yields_as newValue == this.pair
                           || (!isLocal(newValue) && !isShared(newValue) && (newValue != null));

    invariant this.pair != null;

    public boolean compareAndSet(Node      expectedReference,
                     Node       newReference,
                     boolean expectedMark,
                     boolean newMark) {

        Ref current = this.pair;
        return cas(this, pair, current, new Ref());
    }

}
