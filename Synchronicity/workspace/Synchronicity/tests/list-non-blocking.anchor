///: ignore

class AtomicMarkableReferenceResult {
  Node ref     isLocal(this) ? thread_local : readonly;
  boolean mark    isLocal(this) ? thread_local : readonly;

  AtomicMarkableReferenceResult(Node ref, boolean mark) {
    this.ref = ref;
    this.mark = mark;
  }
}



class AtomicMarkableReference {
  Node ref    isLocal(this) ? thread_local: (this.nextWriter == tid ? (isRead()?R:N) : (isRead()?N:E));
  boolean mark   isLocal(this) ? thread_local: (this.nextWriter == tid ? (isRead()?R:N) : (isRead()?N:E));

  Tid nextWriter isLocal(this) ?
                 (isRead() ? B : (newValue == tid || newValue == Tid.null ? B : E))
               : (this.nextWriter == tid ?
                     (isRead ? B : (newValue == tid ? B : (newValue == Tid.null ? L : E)))
                   : (isRead ? E : (this.nextWriter == Tid.null && newValue == tid ? R : E))) !
              yields_as (this.nextWriter != tid) == (newValue != tid);


  AtomicMarkableReference(Node ref, boolean mark) {
    this.ref = ref;
    this.mark = mark;
  }

  boolean cas2(Node expectedRef, Node newRef, boolean expectedMark, boolean newMark) {
      boolean tmp = *;
      if (tmp) {
       assume this.nextWriter == tid;
       Node ref;
       boolean mark;
       nocheck ref = this.ref;
       nocheck mark = this.mark;
       if (ref == expectedRef && mark == expectedMark) {
        this.ref = newRef;
        nocheck this.mark = newMark;
        return true;
       } else {
        return false;
       }
      } else {
       return false;
      }
     }

  boolean attemptMark(Node expectedRef, boolean newMark) {
      boolean tmp = *;
      if (tmp) {
       assume this.nextWriter == tid;
       Node ref;
       boolean mark;
       nocheck ref = this.ref;
       nocheck mark = this.mark;
       if (ref == expectedRef) {
        this.mark = newMark;
        return true;
       } else {
        return false;
       }
      } else {
       return false;
      }
     }


  AtomicMarkableReferenceResult get() {
    AtomicMarkableReferenceResult result = new AtomicMarkableReferenceResult();
    boolean tmp = *;
    if (tmp) {
      assume this.nextWriter == Tid.null;
      this.nextWriter = tid;
    }
    result.ref = this.ref;
    nocheck result.mark = this.mark;
    return result;

  }
}


class Node {
    int item isLocal(this) ? thread_local : readonly;
    AtomicMarkableReference next isLocal(this) ? thread_local : readonly;

    invariant this.next != null;

    // INT_MIN .. INT_MAX
    invariant -10000 <= this.item && this.item <= 10000;

    // the next is bigger.  if no next, then we have INT_MAX
    invariant this.next.ref != null ==> this.item < this.next.ref.item;
    invariant (this.next.ref == null) == (this.item == 10000);

    invariant this.next.mark ==> (-10000 < this.item && this.item < 10000);


    Node(int item) {
      this.item = item;
    }
}

class Window {
  Node pred thread_local;
  Node curr thread_local;
  Window(Node pred, Node curr) {
    this.pred = pred;
    this.curr = curr;
  }
}

class LockFreeList {

    Node head isLocal(this) ? thread_local : readonly;

    // dummy head with INT_MIN.
    invariant this.head != null && this.head.item == -10000;

    // must have at least two nodes...
    invariant this.head.next.ref != null;

    LockFreeList() {
      Node tail = new Node(10000);
      this.head = new Node(-10000);
      while(!this.head.next.cas2(null, tail, false, false)) { }
    }

    Window findHelper(int item) {
      Node pred = this.head;
      AtomicMarkableReferenceResult currResult = pred.next.get();
      Node curr = currResult.ref;
      while (true)
        invariant isShared(curr);
        invariant isShared(pred);
        invariant pred.item < item;
        invariant curr.item <= 10000;
      {
        yield;
        AtomicMarkableReferenceResult succResult = curr.next.get();
        Node succ = succResult.ref;
        boolean marked = succResult.mark;

        yield;

        while (marked)
          invariant isShared(curr);
          invariant isShared(pred);
          invariant pred.item < item;
          invariant curr.item < 10000;
        {
          yield;
          boolean snip = pred.next.cas2(curr, succ, false, false);
          if (!snip) {
            return null;
          }
          yield;
          curr = succ;
          succResult = curr.next.get();
          succ = succResult.ref;
          marked = succResult.mark;
          yield;
        }

        if (curr.item >= item) {
          Window w = new Window(pred, curr);
          return w;
        }

        pred = curr;
        curr = succ;
      }
    }


    requires -10000 < item && item < 10000;
    public Window find(int item) {
      yield;
      while (true) {
        Window w = this.findHelper(item);
        if (w != null) {
          assert w.pred.item < item && item <= w.curr.item;
          return w;
        }
        yield;
      }
    }
/*
    requires -10000 < item && item < 10000;
    public boolean add(int item) {
      while (true) {
        Window window = this.find(item);
        Node pred = window.pred;
        Node curr = window.curr;
        if (curr.item == item) {
          assume (forall AtomicMarkableReference _i :: _i.nextWriter != tid);
          return false;
        } else {
          Node node = new Node(item);
          AtomicMarkableReference next = new AtomicMarkableReference();
          next.ref = curr;
          next.mark = false;
          node.next = next;
          if (pred.next.cas2(curr, node, false, false)) {
            assume (forall AtomicMarkableReference _i :: _i.nextWriter != tid);
            return true;
          }
        }
      }
    }



    requires -10000 < item && item < 10000;
    public boolean remove(int item) {
      while (true) {
        Window window = this.find(item);
        Node pred = window.pred;
        Node curr = window.curr;
        if (curr.item != item) {
          assume (forall AtomicMarkableReference _i :: _i.nextWriter != tid);
          return false;
        } else {
          AtomicMarkableReferenceResult succResult = curr.next.get();
          Node succ = succResult.ref;
          assume succ != null;
          assume succ.item < 10000;
          //    assume (forall AtomicMarkableReference _i :: _i.nextWriter != tid);
          //    return true;

          yield;
          boolean snip = curr.next.cas2(succ, succ, false, true);
          if (snip) {
            yield;
            if (pred.next.cas2(curr, succ, false, false)) {
              assume (forall AtomicMarkableReference _i :: _i.nextWriter != tid);
              return true;
            }
          }
        }
      }
    }

     requires -10000 < item && item < 10000;
     public boolean contains(int item) {
       while (true) {
         Node curr = this.head;
         yield;
         while (curr.item < item)
           invariant isShared(curr);
         {
           curr = curr.next;
           yield;
         }
         return curr.item == item && !curr.marked;
       }
     } */
}
