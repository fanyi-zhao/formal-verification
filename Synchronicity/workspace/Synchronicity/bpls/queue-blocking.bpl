                                                                                                    
 /*                                                                                                 
                                                                                                    
 /home/artifact/Synchronicity/workspace/Synchronicity/tests/queue-blocking.sink:                    
                                                                                                    
 AST:                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
    class Buffer {                                                                                  
      array T = int[holds(this, tid) ? B : E]                                                       
                                                                                                    
       [Buffer.T{this}] elementData isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       int elementCount isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       int start isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       int end isLocal(this, tid)                                                                   
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      void insert(int t) {                                                                          
        synchronized (this) {                                                                       
          [Buffer.T{this}] elementData;                                                             
          elementData := this.elementData;                                                          
          int count;                                                                                
          count := this.elementCount;                                                               
          while (count == elementData.length)   {                                                   
            release(this);                                                                          
            yield;                                                                                  
            acquire(this);                                                                          
            count := this.elementCount;                                                             
          }                                                                                         
          int e;                                                                                    
          e := this.end;                                                                            
          e = (e + 1) % elementData.length;                                                         
          this.end := e;                                                                            
          elementData[e] := t;                                                                      
          count = count + 1;                                                                        
          this.elementCount := count;                                                               
        }                                                                                           
        // return;                                                                                  
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      int delete() {                                                                                
        synchronized (this) {                                                                       
          [Buffer.T{this}] elementData;                                                             
          elementData := this.elementData;                                                          
          int count;                                                                                
          count := this.elementCount;                                                               
          while (count == 0)   {                                                                    
            release(this);                                                                          
            yield;                                                                                  
            acquire(this);                                                                          
            count := this.elementCount;                                                             
          }                                                                                         
          int start;                                                                                
          start := this.start;                                                                      
          int t;                                                                                    
          t := elementData[start];                                                                  
          start = (start + 1) % elementData.length;                                                 
          this.start := start;                                                                      
          count = count - 1;                                                                        
          this.elementCount := count;                                                               
           return t;                                                                                
        }                                                                                           
        // return -1;                                                                               
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Explicit:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Buffer {                                                                                  
      array T = int[holds(this, tid) ? B : E]                                                       
                                                                                                    
       [Buffer.T{this}] elementData isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       int elementCount isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       int start isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       int end isLocal(this, tid)                                                                   
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      void insert(int t) {                                                                          
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            [Buffer.T{this}] elementData;                                                           
            elementData := this.elementData;                                                        
            int count;                                                                              
            count := this.elementCount;                                                             
            while (count == elementData.length)                                                     
              invariant holds(this, tid);                                                           
              {                                                                                     
              release(this);                                                                        
              yield;                                                                                
              acquire(this);                                                                        
              count := this.elementCount;                                                           
            }                                                                                       
            int e;                                                                                  
            e := this.end;                                                                          
            e = (e + 1) % elementData.length;                                                       
            this.end := e;                                                                          
            elementData[e] := t;                                                                    
            count = count + 1;                                                                      
            this.elementCount := count;                                                             
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      int delete() {                                                                                
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            [Buffer.T{this}] elementData;                                                           
            elementData := this.elementData;                                                        
            int count;                                                                              
            count := this.elementCount;                                                             
            while (count == 0)                                                                      
              invariant holds(this, tid);                                                           
              {                                                                                     
              release(this);                                                                        
              yield;                                                                                
              acquire(this);                                                                        
              count := this.elementCount;                                                           
            }                                                                                       
            int start;                                                                              
            start := this.start;                                                                    
            int t;                                                                                  
            t := elementData[start];                                                                
            start = (start + 1) % elementData.length;                                               
            this.start := start;                                                                    
            count = count - 1;                                                                      
            this.elementCount := count;                                                             
            {                                                                                       
              release(this);                                                                        
               return t;                                                                            
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return -1;                                                                             
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Inlined:                                                                                           
                                                                                                    
                                                                                                    
                                                                                                    
    class Buffer {                                                                                  
      array T = int[holds(this, tid) ? B : E]                                                       
                                                                                                    
       [Buffer.T{this}] elementData isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       int elementCount isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       int start isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       int end isLocal(this, tid)                                                                   
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      void insert(int t) {                                                                          
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            [Buffer.T{this}] elementData;                                                           
            elementData := this.elementData;                                                        
            int count;                                                                              
            count := this.elementCount;                                                             
            while (count == elementData.length)                                                     
              invariant holds(this, tid);                                                           
              {                                                                                     
              release(this);                                                                        
              yield;                                                                                
              acquire(this);                                                                        
              count := this.elementCount;                                                           
            }                                                                                       
            int e;                                                                                  
            e := this.end;                                                                          
            e = (e + 1) % elementData.length;                                                       
            this.end := e;                                                                          
            elementData[e] := t;                                                                    
            count = count + 1;                                                                      
            this.elementCount := count;                                                             
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      int delete() {                                                                                
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            [Buffer.T{this}] elementData;                                                           
            elementData := this.elementData;                                                        
            int count;                                                                              
            count := this.elementCount;                                                             
            while (count == 0)                                                                      
              invariant holds(this, tid);                                                           
              {                                                                                     
              release(this);                                                                        
              yield;                                                                                
              acquire(this);                                                                        
              count := this.elementCount;                                                           
            }                                                                                       
            int start;                                                                              
            start := this.start;                                                                    
            int t;                                                                                  
            t := elementData[start];                                                                
            start = (start + 1) % elementData.length;                                               
            this.start := start;                                                                    
            count = count - 1;                                                                      
            this.elementCount := count;                                                             
            {                                                                                       
              release(this);                                                                        
               return t;                                                                            
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return -1;                                                                             
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Prepared:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Buffer {                                                                                  
      array T = int[holds(this, tid) ? B : E]                                                       
                                                                                                    
       [Buffer.T{this}] elementData isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       int elementCount isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       int start isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       int end isLocal(this, tid)                                                                   
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      void insert(int t) {                                                                          
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            [Buffer.T{this}] elementData;                                                           
            elementData := this.elementData;                                                        
            int count;                                                                              
            count := this.elementCount;                                                             
            while (count == elementData.length)                                                     
              invariant holds(this, tid);                                                           
              {                                                                                     
              release(this);                                                                        
              yield;                                                                                
              acquire(this);                                                                        
              count := this.elementCount;                                                           
            }                                                                                       
            int e;                                                                                  
            e := this.end;                                                                          
            e = (e + 1) % elementData.length;                                                       
            this.end := e;                                                                          
            elementData[e] := t;                                                                    
            count = count + 1;                                                                      
            this.elementCount := count;                                                             
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      int delete() {                                                                                
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            [Buffer.T{this}] elementData;                                                           
            elementData := this.elementData;                                                        
            int count;                                                                              
            count := this.elementCount;                                                             
            while (count == 0)                                                                      
              invariant holds(this, tid);                                                           
              {                                                                                     
              release(this);                                                                        
              yield;                                                                                
              acquire(this);                                                                        
              count := this.elementCount;                                                           
            }                                                                                       
            int start;                                                                              
            start := this.start;                                                                    
            int t;                                                                                  
            t := elementData[start];                                                                
            start = (start + 1) % elementData.length;                                               
            this.start := start;                                                                    
            count = count - 1;                                                                      
            this.elementCount := count;                                                             
            {                                                                                       
              release(this);                                                                        
               return t;                                                                            
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return -1;                                                                             
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
 */                                                                                                 
                                                                                                    
//// Background                                                                                     
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * Tid                                                                                              
 */                                                                                                 
 type Tid = int;  // make int so you can iterate over Tids                                          
 const unique Tid.null: Tid;                                                                        
 axiom Tid.null == -1;                                                                              
                                                                                                    
 function {:inline} ValidTid(tid : Tid): bool {                                                     
  tid != Tid.null && tid >= 0                                                                       
 }                                                                                                  
                                                                                                    
 type{:datatype} State;                                                                             
 function{:constructor} NULL(): State;                                                              
 function{:constructor} FRESH(): State;                                                             
 function{:constructor} LOCAL(t: Tid): State;                                                       
 function{:constructor} SHARED(): State;                                                            
                                                                                                    
 function {:inline} isNull(state: State) : bool {                                                   
  state == NULL()                                                                                   
 }                                                                                                  
                                                                                                    
 function {:inline} isFresh(state: State) : bool {                                                  
  state == FRESH()                                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} isShared(state: State) : bool {                                                 
  state == SHARED()                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocal(state: State, t: Tid) : bool {                                          
  state == LOCAL(t)                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocalAssignable(state: State, t: Tid) : bool {                                
  state == LOCAL(t) || state == SHARED() || state == NULL()                                         
 }                                                                                                  
                                                                                                    
 function {:inline} isSharedAssignable(state: State) : bool {                                       
  state == SHARED() || state == NULL()                                                              
 }                                                                                                  
                                                                                                    
 function {:inline} isAccessible(state: State, t: Tid) : bool {                                     
  state == LOCAL(t) || state == SHARED()                                                            
 }                                                                                                  
                                                                                                    
 function {:inline} isAllocated(state: State) : bool {                                              
  !isFresh(state) && !isNull(state)                                                                 
 }                                                                                                  
                                                                                                    
                                                                                                    
 function MOD(x:int, y:int): int;                                                                   
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * For triggers                                                                                     
 */                                                                                                 
 function {:inline false} _trigger(i: int): bool {  true  }                                         
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 type Phase;                                                                                        
 const unique PreCommit : Phase;                                                                    
 const unique PostCommit : Phase;                                                                   
 const unique PhaseError : Phase;                                                                   
                                                                                                    
 function {:inline} transition(p: Phase, m: Mover): Phase {                                         
  if (m == _B) then                                                                                 
   p                                                                                                
  else if (m == _R) then                                                                            
   if (p == PreCommit) then                                                                         
    PreCommit                                                                                       
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _L) then                                                                            
   if (p == PostCommit) then                                                                        
    PostCommit                                                                                      
   else if (p == PreCommit) then                                                                    
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _N) then                                                                            
   if (p == PreCommit) then                                                                         
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else                                                                                              
   PhaseError // m == E or m == I                                                                   
 }                                                                                                  
                                                                                                    
                                                                                                    
 type Mover;                                                                                        
 const unique _B : Mover;                                                                           
 const unique _R : Mover;                                                                           
 const unique _L : Mover;                                                                           
 const unique _N : Mover;                                                                           
 const unique _E : Mover;                                                                           
                                                                                                    
 axiom (forall m : Mover :: m == _B || m == _R || m == _L || m == _N || m == _E);                   
                                                                                                    
 function {:inline} leq(m1: Mover, m2: Mover) : bool {                                              
  if (m1 == _B) then                                                                                
   true                                                                                             
  else if (m1 == _R) then                                                                           
   m2 == _R || m2 == _N || m2 == _E                                                                 
  else if (m1 == _L) then                                                                           
   m2 == _L || m2 == _N || m2 == _E                                                                 
  else if (m1 == _N) then                                                                           
   m2 == _N || m2 == _E                                                                             
  else if (m1 == _E) then                                                                           
   m2 == _E                                                                                         
  else                                                                                              
   false // should never happen...                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} lt(m1: Mover, m2: Mover) : bool { m1 != m2 && leq(m1, m2) }                     
                                                                                                    
 function {:inline} isError(m : Mover) : bool {                                                     
  m == _E                                                                                           
 }                                                                                                  
                                                                                                    
 function {:inline} eqOrError(m : Mover, n : Mover) : bool {                                        
  m == n || m == _E                                                                                 
 }                                                                                                  
                                                                                                    
 type{:datatype} MoverPath;                                                                         
 function{:constructor} moverPath(m:Mover, p:int):MoverPath;                                        
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// axioms                                                                                         
                                                                                                    
                                                                                                    
//// classes                                                                                        
                                                                                                    
                                                                                                    
/*** Class Decl Buffer ***/                                                                         
                                                                                                    
type Buffer;                                                                                        
const unique Buffer.null: Buffer;                                                                   
var Buffer._state: [Buffer]State;                                                                   
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var Buffer.elementData: [Buffer]Array.Buffer.T;                                                     
                                                                                                    
function {:inline} ReadEval.Buffer.elementData(tid: Tid,this : Buffer,Buffer._state: [Buffer]State,Buffer.elementData: [Buffer]Array.Buffer.T,Buffer.elementCount: [Buffer]int,Buffer.start: [Buffer]int,Buffer.end: [Buffer]int,Buffer._lock: [Buffer]Tid,Array.Buffer.T._state: [Array.Buffer.T]State,Array.Buffer.T._elems: [Array.Buffer.T]([int]int),Array.Buffer.T._length: [Array.Buffer.T]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Array.Buffer.T.null;                                                              
 if (isLocal(Buffer._state[this], tid)) then                                                        
  if (isLocal(Buffer._state[this], tid)) then                                                       
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Buffer._state[this], tid) && Buffer._lock[this] == tid)) then                   
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Buffer.elementData(tid: Tid,this : Buffer,newValue: Array.Buffer.T,Buffer._state: [Buffer]State,Buffer.elementData: [Buffer]Array.Buffer.T,Buffer.elementCount: [Buffer]int,Buffer.start: [Buffer]int,Buffer.end: [Buffer]int,Buffer._lock: [Buffer]Tid,Array.Buffer.T._state: [Array.Buffer.T]State,Array.Buffer.T._elems: [Array.Buffer.T]([int]int),Array.Buffer.T._length: [Array.Buffer.T]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Buffer._state[this], tid)) then                                                        
  if (isLocal(Buffer._state[this], tid)) then                                                       
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Buffer._state[this], tid) && Buffer._lock[this] == tid)) then                   
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Buffer.elementCount: [Buffer]int;                                                               
                                                                                                    
function {:inline} ReadEval.Buffer.elementCount(tid: Tid,this : Buffer,Buffer._state: [Buffer]State,Buffer.elementData: [Buffer]Array.Buffer.T,Buffer.elementCount: [Buffer]int,Buffer.start: [Buffer]int,Buffer.end: [Buffer]int,Buffer._lock: [Buffer]Tid,Array.Buffer.T._state: [Array.Buffer.T]State,Array.Buffer.T._elems: [Array.Buffer.T]([int]int),Array.Buffer.T._length: [Array.Buffer.T]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if (isLocal(Buffer._state[this], tid)) then                                                        
  if (isLocal(Buffer._state[this], tid)) then                                                       
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Buffer._state[this], tid) && Buffer._lock[this] == tid)) then                   
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Buffer.elementCount(tid: Tid,this : Buffer,newValue: int,Buffer._state: [Buffer]State,Buffer.elementData: [Buffer]Array.Buffer.T,Buffer.elementCount: [Buffer]int,Buffer.start: [Buffer]int,Buffer.end: [Buffer]int,Buffer._lock: [Buffer]Tid,Array.Buffer.T._state: [Array.Buffer.T]State,Array.Buffer.T._elems: [Array.Buffer.T]([int]int),Array.Buffer.T._length: [Array.Buffer.T]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Buffer._state[this], tid)) then                                                        
  if (isLocal(Buffer._state[this], tid)) then                                                       
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Buffer._state[this], tid) && Buffer._lock[this] == tid)) then                   
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Buffer.start: [Buffer]int;                                                                      
                                                                                                    
function {:inline} ReadEval.Buffer.start(tid: Tid,this : Buffer,Buffer._state: [Buffer]State,Buffer.elementData: [Buffer]Array.Buffer.T,Buffer.elementCount: [Buffer]int,Buffer.start: [Buffer]int,Buffer.end: [Buffer]int,Buffer._lock: [Buffer]Tid,Array.Buffer.T._state: [Array.Buffer.T]State,Array.Buffer.T._elems: [Array.Buffer.T]([int]int),Array.Buffer.T._length: [Array.Buffer.T]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if (isLocal(Buffer._state[this], tid)) then                                                        
  if (isLocal(Buffer._state[this], tid)) then                                                       
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Buffer._state[this], tid) && Buffer._lock[this] == tid)) then                   
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Buffer.start(tid: Tid,this : Buffer,newValue: int,Buffer._state: [Buffer]State,Buffer.elementData: [Buffer]Array.Buffer.T,Buffer.elementCount: [Buffer]int,Buffer.start: [Buffer]int,Buffer.end: [Buffer]int,Buffer._lock: [Buffer]Tid,Array.Buffer.T._state: [Array.Buffer.T]State,Array.Buffer.T._elems: [Array.Buffer.T]([int]int),Array.Buffer.T._length: [Array.Buffer.T]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Buffer._state[this], tid)) then                                                        
  if (isLocal(Buffer._state[this], tid)) then                                                       
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Buffer._state[this], tid) && Buffer._lock[this] == tid)) then                   
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Buffer.end: [Buffer]int;                                                                        
                                                                                                    
function {:inline} ReadEval.Buffer.end(tid: Tid,this : Buffer,Buffer._state: [Buffer]State,Buffer.elementData: [Buffer]Array.Buffer.T,Buffer.elementCount: [Buffer]int,Buffer.start: [Buffer]int,Buffer.end: [Buffer]int,Buffer._lock: [Buffer]Tid,Array.Buffer.T._state: [Array.Buffer.T]State,Array.Buffer.T._elems: [Array.Buffer.T]([int]int),Array.Buffer.T._length: [Array.Buffer.T]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if (isLocal(Buffer._state[this], tid)) then                                                        
  if (isLocal(Buffer._state[this], tid)) then                                                       
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Buffer._state[this], tid) && Buffer._lock[this] == tid)) then                   
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Buffer.end(tid: Tid,this : Buffer,newValue: int,Buffer._state: [Buffer]State,Buffer.elementData: [Buffer]Array.Buffer.T,Buffer.elementCount: [Buffer]int,Buffer.start: [Buffer]int,Buffer.end: [Buffer]int,Buffer._lock: [Buffer]Tid,Array.Buffer.T._state: [Array.Buffer.T]State,Array.Buffer.T._elems: [Array.Buffer.T]([int]int),Array.Buffer.T._length: [Array.Buffer.T]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Buffer._state[this], tid)) then                                                        
  if (isLocal(Buffer._state[this], tid)) then                                                       
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Buffer._state[this], tid) && Buffer._lock[this] == tid)) then                   
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Buffer._lock: [Buffer]Tid;                                                                      
                                                                                                    
function {:inline} ReadEval.Buffer._lock(tid: Tid,this : Buffer,Buffer._state: [Buffer]State,Buffer.elementData: [Buffer]Array.Buffer.T,Buffer.elementCount: [Buffer]int,Buffer.start: [Buffer]int,Buffer.end: [Buffer]int,Buffer._lock: [Buffer]Tid,Array.Buffer.T._state: [Array.Buffer.T]State,Array.Buffer.T._elems: [Array.Buffer.T]([int]int),Array.Buffer.T._length: [Array.Buffer.T]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(Buffer._state[this], tid)) then                                                        
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Buffer._lock[this]==tid)) then                                                              
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Buffer._lock[this]==Tid.null)&&(newValue==tid))) then                                      
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Buffer._lock[this]==tid)&&(newValue==Tid.null))) then                                     
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Buffer._lock(tid: Tid,this : Buffer,newValue: Tid,Buffer._state: [Buffer]State,Buffer.elementData: [Buffer]Array.Buffer.T,Buffer.elementCount: [Buffer]int,Buffer.start: [Buffer]int,Buffer.end: [Buffer]int,Buffer._lock: [Buffer]Tid,Array.Buffer.T._state: [Array.Buffer.T]State,Array.Buffer.T._elems: [Array.Buffer.T]([int]int),Array.Buffer.T._length: [Array.Buffer.T]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Buffer._state[this], tid)) then                                                        
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Buffer._lock[this]==tid)) then                                                              
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Buffer._lock[this]==Tid.null)&&(newValue==tid))) then                                      
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Buffer._lock[this]==tid)&&(newValue==Tid.null))) then                                     
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/*** Array Array.Buffer.T ***/                                                                      
                                                                                                    
type Array.Buffer.T;                                                                                
const unique Array.Buffer.T.null: Array.Buffer.T;                                                   
var Array.Buffer.T._state: [Array.Buffer.T]State;                                                   
                                                                                                    
const Array.Buffer.T._this : [Array.Buffer.T]Buffer;                                                
const Array.Buffer.T._length : [Array.Buffer.T]int;                                                 
var Array.Buffer.T._elems  : [Array.Buffer.T]([int]int);                                            
                                                                                                    
axiom (forall $this : Array.Buffer.T :: Array.Buffer.T._length[$this] >= 0);                        
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
// Array.Buffer.T: Spec(Cond(Holds(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),false,List())
                                                                                                    
function {:inline} ReadEval.Array.Buffer.T(tid: Tid,this : Buffer,athis : Array.Buffer.T,index : int,Buffer._state: [Buffer]State,Buffer.elementData: [Buffer]Array.Buffer.T,Buffer.elementCount: [Buffer]int,Buffer.start: [Buffer]int,Buffer.end: [Buffer]int,Buffer._lock: [Buffer]Tid,Array.Buffer.T._state: [Array.Buffer.T]State,Array.Buffer.T._elems: [Array.Buffer.T]([int]int),Array.Buffer.T._length: [Array.Buffer.T]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 if ((isAccessible(Buffer._state[this], tid) && Buffer._lock[this] == tid)) then                    
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
// Array.Buffer.T: Spec(Cond(Holds(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),false,List())
                                                                                                    
function {:inline} WriteEval.Array.Buffer.T(tid: Tid,this : Buffer,athis : Array.Buffer.T,index : int,newValue: int,Buffer._state: [Buffer]State,Buffer.elementData: [Buffer]Array.Buffer.T,Buffer.elementCount: [Buffer]int,Buffer.start: [Buffer]int,Buffer.end: [Buffer]int,Buffer._lock: [Buffer]Tid,Array.Buffer.T._state: [Array.Buffer.T]State,Array.Buffer.T._elems: [Array.Buffer.T]([int]int),Array.Buffer.T._length: [Array.Buffer.T]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if ((isAccessible(Buffer._state[this], tid) && Buffer._lock[this] == tid)) then                    
  moverPath(_B, 1)                                                                                  
 else                                                                                               
  moverPath(_E, 0)                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// Globals                                                                                        
                                                                                                    
                                                                                                    
//// State Invariant                                                                                
                                                                                                    
 function {:inline} StateInvariant(Buffer._state: [Buffer]State,Buffer.elementData: [Buffer]Array.Buffer.T,Buffer.elementCount: [Buffer]int,Buffer.start: [Buffer]int,Buffer.end: [Buffer]int,Buffer._lock: [Buffer]Tid,Array.Buffer.T._state: [Array.Buffer.T]State,Array.Buffer.T._elems: [Array.Buffer.T]([int]int),Array.Buffer.T._length: [Array.Buffer.T]int) returns (bool) {
  true &&                                                                                           
  (forall _i: Buffer  :: _i == Buffer.null <==> isNull(Buffer._state[_i])) &&                       
  (forall _i: Array.Buffer.T  :: _i == Array.Buffer.T.null <==> isNull(Array.Buffer.T._state[_i])) &&
  (forall _t: Tid, _i: Array.Buffer.T  :: ValidTid(_t) && isAccessible(Array.Buffer.T._state[_i], _t) ==> isAccessible(Buffer._state[Array.Buffer.T._this[_i]], _t)) &&
  (forall _i: Buffer ::  (isShared(Buffer._state[_i]) ==> isSharedAssignable(Array.Buffer.T._state[Buffer.elementData[_i]]))) &&
  (forall _i: Buffer ::  (forall _t: Tid :: (ValidTid(_t) && isLocal(Buffer._state[_i],_t) ==> isLocalAssignable(Array.Buffer.T._state[Buffer.elementData[_i]], _t)))) &&
  (forall _i: Buffer :: { Buffer.elementData[_i] } Array.Buffer.T._this[Buffer.elementData[_i]] == _i) &&
  _trigger(0) &&                                                                                    
  _trigger(1) &&                                                                                    
  _trigger(2) &&                                                                                    
  _trigger(3)                                                                                       
 }                                                                                                  
//// Spec Checks                                                                                    
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Buffer.elementData(t: Tid, u: Tid, v: Array.Buffer.T, w: Array.Buffer.T, x: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Buffer.elementData(u: Tid,x: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (6.2): Buffer.elementData failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Buffer.elementData(t: Tid, u: Tid, v: Array.Buffer.T, w: Array.Buffer.T, x: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Buffer.elementData(u: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (6.2): Buffer.elementData failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Buffer.elementData(t: Tid, u: Tid, v: Array.Buffer.T, w: Array.Buffer.T, x: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Buffer.T;                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Buffer.elementData[x];                                                                 
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Buffer.elementData[x] := havocValue;                                                               
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Buffer.elementData(u: Tid,x: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (6.2): Buffer.elementData failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Buffer.elementData(t: Tid, u: Tid, v: Array.Buffer.T, w: Array.Buffer.T, x: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Array.Buffer.T;                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Buffer.elementData[x];                                                                 
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Buffer.elementData(u: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (6.2): Buffer.elementData failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Buffer.elementData(t: Tid, u: Tid, v: Array.Buffer.T, w: Array.Buffer.T, x: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Buffer.elementData(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Buffer.elementData(u: Tid,x: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (6.2): Buffer.elementData failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Buffer.elementData(t: Tid, u: Tid, v: Array.Buffer.T, w: Array.Buffer.T, x: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Buffer.T;                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == Buffer.elementData[x];                                                                 
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Buffer.elementData(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Buffer.elementData[x] := havocValue;                                                               
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Buffer.elementData(u: Tid,x: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (6.2): Buffer.elementData failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, x: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,x: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (7.2): Buffer.elementCount failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, x: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Buffer.elementCount(u: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (7.2): Buffer.elementCount failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, x: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Buffer.elementCount[x];                                                                
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Buffer.elementCount[x] := havocValue;                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,x: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (7.2): Buffer.elementCount failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, x: Buffer) 
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Buffer.elementCount[x];                                                                
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Buffer.elementCount(u: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (7.2): Buffer.elementCount failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, x: Buffer)     
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Buffer.elementCount(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,x: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (7.2): Buffer.elementCount failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, x: Buffer)      
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == Buffer.elementCount[x];                                                                
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Buffer.elementCount(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Buffer.elementCount[x] := havocValue;                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,x: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (7.2): Buffer.elementCount failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Buffer.start(t: Tid, u: Tid, v: int, w: int, x: Buffer)      
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Buffer.start(u: Tid,x: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (8.2): Buffer.start failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Buffer.start(t: Tid, u: Tid, v: int, w: int, x: Buffer)       
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Buffer.start(u: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (8.2): Buffer.start failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Buffer.start(t: Tid, u: Tid, v: int, w: int, x: Buffer)       
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Buffer.start[x];                                                                       
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Buffer.start[x] := havocValue;                                                                     
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Buffer.start(u: Tid,x: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (8.2): Buffer.start failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Buffer.start(t: Tid, u: Tid, v: int, w: int, x: Buffer)        
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Buffer.start[x];                                                                       
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Buffer.start(u: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (8.2): Buffer.start failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Buffer.start(t: Tid, u: Tid, v: int, w: int, x: Buffer)            
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Buffer.start(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Buffer.start(u: Tid,x: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (8.2): Buffer.start failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Buffer.start(t: Tid, u: Tid, v: int, w: int, x: Buffer)             
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == Buffer.start[x];                                                                       
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Buffer.start(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Buffer.start[x] := havocValue;                                                                     
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Buffer.start(u: Tid,x: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (8.2): Buffer.start failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Buffer.end(t: Tid, u: Tid, v: int, w: int, x: Buffer)        
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Buffer.end(u: Tid,x: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (9.2): Buffer.end failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Buffer.end(t: Tid, u: Tid, v: int, w: int, x: Buffer)         
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Buffer.end(u: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (9.2): Buffer.end failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Buffer.end(t: Tid, u: Tid, v: int, w: int, x: Buffer)         
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Buffer.end[x];                                                                         
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Buffer.end[x] := havocValue;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Buffer.end(u: Tid,x: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (9.2): Buffer.end failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Buffer.end(t: Tid, u: Tid, v: int, w: int, x: Buffer)          
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Buffer.end[x];                                                                         
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Buffer.end(u: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (9.2): Buffer.end failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Buffer.end(t: Tid, u: Tid, v: int, w: int, x: Buffer)              
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Buffer.end(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Buffer.end(u: Tid,x: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (9.2): Buffer.end failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Buffer.end(t: Tid, u: Tid, v: int, w: int, x: Buffer)               
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[x], u);                                                        
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == Buffer.end[x];                                                                         
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Buffer.end(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Buffer.end[x] := havocValue;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Buffer.end(u: Tid,x: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (9.2): Buffer.end failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Buffer, x: Array.Buffer.T, i: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Array.Buffer.T._state[x], u);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (4.2): Array Array.Buffer.T failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Buffer, x: Array.Buffer.T, i: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Array.Buffer.T._state[x], u);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Array.Buffer.T(u: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (4.2): Array Array.Buffer.T failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Buffer, x: Array.Buffer.T, i: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Array.Buffer.T._state[x], u);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Array.Buffer.T._elems[x][i];                                                           
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Array.Buffer.T._elems[x][i] := havocValue;                                                         
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (4.2): Array Array.Buffer.T failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Buffer, x: Array.Buffer.T, i: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Array.Buffer.T._state[x], u);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Array.Buffer.T._elems[x][i];                                                           
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Array.Buffer.T(u: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (4.2): Array Array.Buffer.T failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Buffer, x: Array.Buffer.T, i: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Array.Buffer.T._state[x], u);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (4.2): Array Array.Buffer.T failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Buffer, x: Array.Buffer.T, i: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Array.Buffer.T._state[x], u);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == Array.Buffer.T._elems[x][i];                                                           
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Array.Buffer.T._elems[x][i] := havocValue;                                                         
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && x_owner_post == x_owner && x_post == x && i_post == i;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (4.2): Array Array.Buffer.T failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.elementData.Buffer.elementData(t: Tid, u: Tid, v: Array.Buffer.T, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementData (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementData (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementData (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.elementData.Buffer.elementData(t: Tid, u: Tid, v: Array.Buffer.T, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Buffer.T;                                                                         
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var v_mid: Array.Buffer.T;                                                                         
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var w_mid: Array.Buffer.T;                                                                         
 var w0_mid: Array.Buffer.T;                                                                        
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.elementData[x];                                                                     
 Buffer.elementData[x] := v;                                                                        
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.elementData[x] := tmpV;                                                                     
 Buffer.elementData[y] := w;                                                                        
 _writeByTPost := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementData (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.elementData.Buffer.elementData(t: Tid, u: Tid, v: Array.Buffer.T, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Buffer.T;                                                                         
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var v_mid: Array.Buffer.T;                                                                         
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var w_mid: Array.Buffer.T;                                                                         
 var w0_mid: Array.Buffer.T;                                                                        
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.elementData[x];                                                                     
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.elementData[x] := tmpV;                                                                     
 Buffer.elementData[y] := w;                                                                        
 _writeByTPost := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementData (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementData (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.elementData.Buffer.elementData(t: Tid, u: Tid, v: Array.Buffer.T, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.elementData(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementData[y] := w;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.elementData(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.elementData (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.elementData (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.elementData (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.elementData.Buffer.elementData(t: Tid, u: Tid, v: Array.Buffer.T, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.elementData(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.elementData(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.elementData (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.elementData (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.elementData (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.elementData.Buffer.elementCount(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementData (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementData (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementData (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.elementData.Buffer.elementCount(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Buffer.T;                                                                         
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var v_mid: Array.Buffer.T;                                                                         
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.elementData[x];                                                                     
 Buffer.elementData[x] := v;                                                                        
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.elementData[x] := tmpV;                                                                     
 Buffer.elementCount[y] := w;                                                                       
 _writeByTPost := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementCount (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.elementData.Buffer.elementCount(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Buffer.T;                                                                         
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var v_mid: Array.Buffer.T;                                                                         
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.elementData[x];                                                                     
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.elementData[x] := tmpV;                                                                     
 Buffer.elementCount[y] := w;                                                                       
 _writeByTPost := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementCount (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementCount (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.elementData.Buffer.elementCount(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.elementData(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementCount[y] := w;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.elementData(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.elementCount (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.elementCount (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.elementCount (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.elementData.Buffer.elementCount(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.elementCount(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.elementCount(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.elementData (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.elementData (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.elementData (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.elementData.Buffer.start(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementData (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementData (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementData (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.elementData.Buffer.start(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Buffer.T;                                                                         
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var v_mid: Array.Buffer.T;                                                                         
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.elementData[x];                                                                     
 Buffer.elementData[x] := v;                                                                        
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.elementData[x] := tmpV;                                                                     
 Buffer.start[y] := w;                                                                              
 _writeByTPost := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.start (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.elementData.Buffer.start(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Buffer.T;                                                                         
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var v_mid: Array.Buffer.T;                                                                         
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.elementData[x];                                                                     
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.elementData[x] := tmpV;                                                                     
 Buffer.start[y] := w;                                                                              
 _writeByTPost := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.start (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.start (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.elementData.Buffer.start(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.elementData(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.start[y] := w;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.elementData(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.start (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.start (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.start (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.elementData.Buffer.start(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.start(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.start(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.elementData (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.elementData (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.elementData (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.elementData.Buffer.end(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementData (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementData (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementData (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.elementData.Buffer.end(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Buffer.T;                                                                         
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var v_mid: Array.Buffer.T;                                                                         
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.elementData[x];                                                                     
 Buffer.elementData[x] := v;                                                                        
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.elementData[x] := tmpV;                                                                     
 Buffer.end[y] := w;                                                                                
 _writeByTPost := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.end (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.elementData.Buffer.end(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Buffer.T;                                                                         
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var v_mid: Array.Buffer.T;                                                                         
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.elementData[x];                                                                     
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.elementData[x] := tmpV;                                                                     
 Buffer.end[y] := w;                                                                                
 _writeByTPost := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.end (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.end (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.elementData.Buffer.end(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.elementData(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.end[y] := w;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.elementData(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.end (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.end (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.end (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.elementData.Buffer.end(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementData;                                                                       
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.end(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.end(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.elementData (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.elementData (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.elementData (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.elementData.Array.Buffer.T._elems(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.elementData;                                                                       
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementData (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementData (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementData (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.elementData.Array.Buffer.T._elems(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.elementData;                                                                       
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Buffer.T;                                                                         
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_owner_mid: Buffer;                                                                           
 var t_mid: Tid;                                                                                    
 var y_mid: Array.Buffer.T;                                                                         
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var v_mid: Array.Buffer.T;                                                                         
 var Buffer.end_mid: [Buffer]int;                                                                   
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.elementData[x];                                                                     
 Buffer.elementData[x] := v;                                                                        
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.elementData[x] := tmpV;                                                                     
 Array.Buffer.T._elems[y][j] := w;                                                                  
 _writeByTPost := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Array Array.Buffer.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.elementData.Array.Buffer.T._elems(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.elementData;                                                                       
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Buffer.T;                                                                         
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_owner_mid: Buffer;                                                                           
 var t_mid: Tid;                                                                                    
 var y_mid: Array.Buffer.T;                                                                         
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var v_mid: Array.Buffer.T;                                                                         
 var Buffer.end_mid: [Buffer]int;                                                                   
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.elementData[x];                                                                     
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.elementData[x] := tmpV;                                                                     
 Array.Buffer.T._elems[y][j] := w;                                                                  
 _writeByTPost := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Array Array.Buffer.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Array Array.Buffer.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.elementData.Array.Buffer.T._elems(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.elementData;                                                                       
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.elementData(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Buffer.T._elems[y][j] := w;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.elementData(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Read-Write Stable with respect to Array Array.Buffer.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Read-Write Stable with respect to Array Array.Buffer.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.2): Buffer.elementData is not Read-Write Stable with respect to Array Array.Buffer.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.elementData.Array.Buffer.T._elems(t: Tid, u: Tid, v: Array.Buffer.T, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.elementData;                                                                       
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var v_pre: Array.Buffer.T;                                                                         
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var v_post: Array.Buffer.T;                                                                        
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.elementData(t: Tid,x: Buffer,v: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementData[x] := v;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.elementData (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.elementData (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.elementData (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.elementCount.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementCount (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementCount (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementCount (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.elementCount.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var w_mid: Array.Buffer.T;                                                                         
 var w0_mid: Array.Buffer.T;                                                                        
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.elementCount[x];                                                                    
 Buffer.elementCount[x] := v;                                                                       
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.elementCount[x] := tmpV;                                                                    
 Buffer.elementData[y] := w;                                                                        
 _writeByTPost := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementData (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.elementCount.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var w_mid: Array.Buffer.T;                                                                         
 var w0_mid: Array.Buffer.T;                                                                        
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.elementCount[x];                                                                    
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.elementCount[x] := tmpV;                                                                    
 Buffer.elementData[y] := w;                                                                        
 _writeByTPost := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementData (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementData (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.elementCount.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.elementCount(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementData[y] := w;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.elementCount(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.elementData (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.elementData (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.elementData (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.elementCount.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.elementData(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.elementData(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.elementCount (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.elementCount (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.elementCount (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.elementCount.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementCount (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementCount (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementCount (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.elementCount.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.elementCount[x];                                                                    
 Buffer.elementCount[x] := v;                                                                       
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.elementCount[x] := tmpV;                                                                    
 Buffer.elementCount[y] := w;                                                                       
 _writeByTPost := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementCount (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.elementCount.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.elementCount[x];                                                                    
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.elementCount[x] := tmpV;                                                                    
 Buffer.elementCount[y] := w;                                                                       
 _writeByTPost := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementCount (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementCount (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.elementCount.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.elementCount(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementCount[y] := w;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.elementCount(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.elementCount (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.elementCount (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.elementCount (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.elementCount.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.elementCount(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.elementCount(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.elementCount (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.elementCount (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.elementCount (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.elementCount.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementCount (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementCount (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementCount (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.elementCount.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.elementCount[x];                                                                    
 Buffer.elementCount[x] := v;                                                                       
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.elementCount[x] := tmpV;                                                                    
 Buffer.start[y] := w;                                                                              
 _writeByTPost := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.start (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.elementCount.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.elementCount[x];                                                                    
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.elementCount[x] := tmpV;                                                                    
 Buffer.start[y] := w;                                                                              
 _writeByTPost := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.start (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.start (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.elementCount.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.elementCount(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.start[y] := w;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.elementCount(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.start (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.start (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.start (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.elementCount.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.start(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.start(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.elementCount (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.elementCount (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.elementCount (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.elementCount.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementCount (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementCount (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementCount (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.elementCount.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.elementCount[x];                                                                    
 Buffer.elementCount[x] := v;                                                                       
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.elementCount[x] := tmpV;                                                                    
 Buffer.end[y] := w;                                                                                
 _writeByTPost := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.end (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.elementCount.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.elementCount[x];                                                                    
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.elementCount[x] := tmpV;                                                                    
 Buffer.end[y] := w;                                                                                
 _writeByTPost := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.end (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.end (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.elementCount.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.elementCount(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.end[y] := w;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.elementCount(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.end (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.end (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.end (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.elementCount.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.elementCount;                                                                      
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.end(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.end(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.elementCount (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.elementCount (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.elementCount (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.elementCount.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.elementCount;                                                                      
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementCount (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementCount (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementCount (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.elementCount.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.elementCount;                                                                      
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_owner_mid: Buffer;                                                                           
 var t_mid: Tid;                                                                                    
 var y_mid: Array.Buffer.T;                                                                         
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.elementCount[x];                                                                    
 Buffer.elementCount[x] := v;                                                                       
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.elementCount[x] := tmpV;                                                                    
 Array.Buffer.T._elems[y][j] := w;                                                                  
 _writeByTPost := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Array Array.Buffer.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.elementCount.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.elementCount;                                                                      
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_owner_mid: Buffer;                                                                           
 var t_mid: Tid;                                                                                    
 var y_mid: Array.Buffer.T;                                                                         
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.elementCount[x];                                                                    
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.elementCount[x] := tmpV;                                                                    
 Array.Buffer.T._elems[y][j] := w;                                                                  
 _writeByTPost := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Array Array.Buffer.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Array Array.Buffer.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.elementCount.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.elementCount;                                                                      
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.elementCount(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Buffer.T._elems[y][j] := w;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.elementCount(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Read-Write Stable with respect to Array Array.Buffer.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Read-Write Stable with respect to Array Array.Buffer.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.2): Buffer.elementCount is not Read-Write Stable with respect to Array Array.Buffer.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.elementCount.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.elementCount;                                                                      
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.elementCount(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementCount[x] := v;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.elementCount (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.elementCount (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.elementCount (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.start.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.start (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.start (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.start (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.start.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var w_mid: Array.Buffer.T;                                                                         
 var w0_mid: Array.Buffer.T;                                                                        
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.start[x];                                                                           
 Buffer.start[x] := v;                                                                              
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.start[x] := tmpV;                                                                           
 Buffer.elementData[y] := w;                                                                        
 _writeByTPost := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementData (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.start.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var w_mid: Array.Buffer.T;                                                                         
 var w0_mid: Array.Buffer.T;                                                                        
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.start[x];                                                                           
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.start[x] := tmpV;                                                                           
 Buffer.elementData[y] := w;                                                                        
 _writeByTPost := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementData (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementData (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.start.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.start(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementData[y] := w;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.start(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.elementData (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.elementData (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.elementData (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.start.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.elementData(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.elementData(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.start (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.start (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.start (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.start.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.start (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.start (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.start (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.start.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.start[x];                                                                           
 Buffer.start[x] := v;                                                                              
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.start[x] := tmpV;                                                                           
 Buffer.elementCount[y] := w;                                                                       
 _writeByTPost := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementCount (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.start.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.start[x];                                                                           
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.start[x] := tmpV;                                                                           
 Buffer.elementCount[y] := w;                                                                       
 _writeByTPost := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementCount (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementCount (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.start.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.start(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementCount[y] := w;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.start(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.elementCount (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.elementCount (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.elementCount (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.start.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.elementCount(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.elementCount(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.start (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.start (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.start (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.start.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.start (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.start (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.start (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.start.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.start[x];                                                                           
 Buffer.start[x] := v;                                                                              
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.start[x] := tmpV;                                                                           
 Buffer.start[y] := w;                                                                              
 _writeByTPost := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.start (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.start.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.start[x];                                                                           
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.start[x] := tmpV;                                                                           
 Buffer.start[y] := w;                                                                              
 _writeByTPost := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.start (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.start (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.start.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.start(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.start[y] := w;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.start(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.start (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.start (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.start (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.start.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.start(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.start(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.start (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.start (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.start (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.start.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.start (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.start (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.start (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.start.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.start[x];                                                                           
 Buffer.start[x] := v;                                                                              
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.start[x] := tmpV;                                                                           
 Buffer.end[y] := w;                                                                                
 _writeByTPost := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.end (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.start.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.start[x];                                                                           
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.start[x] := tmpV;                                                                           
 Buffer.end[y] := w;                                                                                
 _writeByTPost := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.end (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.end (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.start.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.start(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.end[y] := w;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.start(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.end (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.end (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.end (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.start.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.start;                                                                             
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.end(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.end(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.start (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.start (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.start (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.start.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.start;                                                                             
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.start (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.start (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.start (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.start.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.start;                                                                             
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_owner_mid: Buffer;                                                                           
 var t_mid: Tid;                                                                                    
 var y_mid: Array.Buffer.T;                                                                         
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.start[x];                                                                           
 Buffer.start[x] := v;                                                                              
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.start[x] := tmpV;                                                                           
 Array.Buffer.T._elems[y][j] := w;                                                                  
 _writeByTPost := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Array Array.Buffer.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.start.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.start;                                                                             
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_owner_mid: Buffer;                                                                           
 var t_mid: Tid;                                                                                    
 var y_mid: Array.Buffer.T;                                                                         
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.start[x];                                                                           
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.start[x] := tmpV;                                                                           
 Array.Buffer.T._elems[y][j] := w;                                                                  
 _writeByTPost := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Array Array.Buffer.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Array Array.Buffer.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.start.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.start;                                                                             
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.start(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Buffer.T._elems[y][j] := w;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.start(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.2): Buffer.start is not Read-Write Stable with respect to Array Array.Buffer.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.2): Buffer.start is not Read-Write Stable with respect to Array Array.Buffer.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.2): Buffer.start is not Read-Write Stable with respect to Array Array.Buffer.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.start.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.start;                                                                             
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.start(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.start[x] := v;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.start (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.start (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.start (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.end.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.end (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.end (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.end (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.end.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var w_mid: Array.Buffer.T;                                                                         
 var w0_mid: Array.Buffer.T;                                                                        
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.end[x];                                                                             
 Buffer.end[x] := v;                                                                                
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.end[x] := tmpV;                                                                             
 Buffer.elementData[y] := w;                                                                        
 _writeByTPost := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementData (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.end.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var w_mid: Array.Buffer.T;                                                                         
 var w0_mid: Array.Buffer.T;                                                                        
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.end[x];                                                                             
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.end[x] := tmpV;                                                                             
 Buffer.elementData[y] := w;                                                                        
 _writeByTPost := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementData (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementData (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.end.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.end(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementData[y] := w;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.end(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.elementData (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.elementData (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.elementData (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.end.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.elementData(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.elementData(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.end (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.end (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.end (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.end.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.end (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.end (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.end (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.end.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.end[x];                                                                             
 Buffer.end[x] := v;                                                                                
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.end[x] := tmpV;                                                                             
 Buffer.elementCount[y] := w;                                                                       
 _writeByTPost := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementCount (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.end.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.end[x];                                                                             
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.end[x] := tmpV;                                                                             
 Buffer.elementCount[y] := w;                                                                       
 _writeByTPost := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementCount (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementCount (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.end.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.end(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementCount[y] := w;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.end(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.elementCount (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.elementCount (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.elementCount (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.end.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.elementCount(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.elementCount(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.end (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.end (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.end (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.end.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.end (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.end (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.end (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.end.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.end[x];                                                                             
 Buffer.end[x] := v;                                                                                
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.end[x] := tmpV;                                                                             
 Buffer.start[y] := w;                                                                              
 _writeByTPost := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.start (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.end.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.end[x];                                                                             
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.end[x] := tmpV;                                                                             
 Buffer.start[y] := w;                                                                              
 _writeByTPost := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.start (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.start (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.end.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.end(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.start[y] := w;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.end(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.start (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.start (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.start (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.end.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.start(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.start(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.end (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.end (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.end (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.end.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.end (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.end (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.end (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.end.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.end[x];                                                                             
 Buffer.end[x] := v;                                                                                
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.end[x] := tmpV;                                                                             
 Buffer.end[y] := w;                                                                                
 _writeByTPost := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.end (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.end.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.end[x];                                                                             
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.end[x] := tmpV;                                                                             
 Buffer.end[y] := w;                                                                                
 _writeByTPost := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.end (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.end (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.end.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.end(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.end[y] := w;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.end(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.end (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.end (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.end (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.end.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Buffer.end;                                                                               
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.end(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.end(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.end (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.end (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.end (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Buffer.end.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.end;                                                                               
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.end (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.end (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.end (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Buffer.end.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.end;                                                                               
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_owner_mid: Buffer;                                                                           
 var t_mid: Tid;                                                                                    
 var y_mid: Array.Buffer.T;                                                                         
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Buffer.end[x];                                                                             
 Buffer.end[x] := v;                                                                                
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Buffer.end[x] := tmpV;                                                                             
 Array.Buffer.T._elems[y][j] := w;                                                                  
 _writeByTPost := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Array Array.Buffer.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Buffer.end.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.end;                                                                               
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_owner_mid: Buffer;                                                                           
 var t_mid: Tid;                                                                                    
 var y_mid: Array.Buffer.T;                                                                         
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var x_mid: Buffer;                                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Buffer.end[x];                                                                             
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Buffer.end[x] := tmpV;                                                                             
 Array.Buffer.T._elems[y][j] := w;                                                                  
 _writeByTPost := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Array Array.Buffer.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Array Array.Buffer.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Buffer.end.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.end;                                                                               
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Buffer.end(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Buffer.T._elems[y][j] := w;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Buffer.end(t: Tid,x: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (9.2): Buffer.end is not Read-Write Stable with respect to Array Array.Buffer.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (9.2): Buffer.end is not Read-Write Stable with respect to Array Array.Buffer.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (9.2): Buffer.end is not Read-Write Stable with respect to Array Array.Buffer.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Buffer.end.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Buffer, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Buffer._state[x], t);                                                        
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Buffer.end;                                                                               
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var w_pre: int;                                                                                    
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var x_pre: Buffer;                                                                                 
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var x_post: Buffer;                                                                                
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Buffer.end(t: Tid,x: Buffer,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.end[x] := v;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.end (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.end (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.end (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Buffer.T._elems.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Array Array.Buffer.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Array Array.Buffer.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.2): Buffer.elementData is not Write-Write Stable with respect to Array Array.Buffer.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Buffer.T._elems.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var x_owner_mid: Buffer;                                                                           
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var x_mid: Array.Buffer.T;                                                                         
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var w_mid: Array.Buffer.T;                                                                         
 var w0_mid: Array.Buffer.T;                                                                        
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Buffer.T._elems[x][i];                                                               
 Array.Buffer.T._elems[x][i] := v;                                                                  
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Buffer.T._elems[x][i] := tmpV;                                                               
 Buffer.elementData[y] := w;                                                                        
 _writeByTPost := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementData (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Buffer.T._elems.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var x_owner_mid: Buffer;                                                                           
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var x_mid: Array.Buffer.T;                                                                         
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var w_mid: Array.Buffer.T;                                                                         
 var w0_mid: Array.Buffer.T;                                                                        
 var $pc_mid: Phase;                                                                                
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Buffer.T._elems[x][i];                                                               
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Buffer.T._elems[x][i] := tmpV;                                                               
 Buffer.elementData[y] := w;                                                                        
 _writeByTPost := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementData (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementData (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Buffer.T._elems.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.elementData(u: Tid,y: Buffer,w: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementData[y] := w;                                                                        
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.elementData (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.elementData (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.elementData (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Buffer.T._elems.Buffer.elementData(t: Tid, u: Tid, v: int, w: Array.Buffer.T, w0: Array.Buffer.T, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.elementData;                                                                       
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var w0_pre: Array.Buffer.T;                                                                        
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var w_pre: Array.Buffer.T;                                                                         
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var w0_post: Array.Buffer.T;                                                                       
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var w_post: Array.Buffer.T;                                                                        
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.elementData(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.elementData(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.2): Buffer.elementData is not Write-Read Stable with respect to Array Array.Buffer.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.2): Buffer.elementData is not Write-Read Stable with respect to Array Array.Buffer.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.2): Buffer.elementData is not Write-Read Stable with respect to Array Array.Buffer.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Buffer.T._elems.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Array Array.Buffer.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Array Array.Buffer.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Write Stable with respect to Array Array.Buffer.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Buffer.T._elems.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var x_owner_mid: Buffer;                                                                           
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var x_mid: Array.Buffer.T;                                                                         
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Buffer.T._elems[x][i];                                                               
 Array.Buffer.T._elems[x][i] := v;                                                                  
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Buffer.T._elems[x][i] := tmpV;                                                               
 Buffer.elementCount[y] := w;                                                                       
 _writeByTPost := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementCount (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Buffer.T._elems.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var x_owner_mid: Buffer;                                                                           
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var x_mid: Array.Buffer.T;                                                                         
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Buffer.T._elems[x][i];                                                               
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Buffer.T._elems[x][i] := tmpV;                                                               
 Buffer.elementCount[y] := w;                                                                       
 _writeByTPost := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementCount (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementCount (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Buffer.T._elems.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.elementCount(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.elementCount[y] := w;                                                                       
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.elementCount (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.elementCount (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.elementCount (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Buffer.T._elems.Buffer.elementCount(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.elementCount;                                                                      
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.elementCount(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.elementCount(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Read Stable with respect to Array Array.Buffer.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.2): Buffer.elementCount is not Write-Read Stable with respect to Array Array.Buffer.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (7.2): Buffer.elementCount is not Write-Read Stable with respect to Array Array.Buffer.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Buffer.T._elems.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Array Array.Buffer.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.2): Buffer.start is not Write-Write Stable with respect to Array Array.Buffer.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.2): Buffer.start is not Write-Write Stable with respect to Array Array.Buffer.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Buffer.T._elems.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var x_owner_mid: Buffer;                                                                           
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var x_mid: Array.Buffer.T;                                                                         
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Buffer.T._elems[x][i];                                                               
 Array.Buffer.T._elems[x][i] := v;                                                                  
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Buffer.T._elems[x][i] := tmpV;                                                               
 Buffer.start[y] := w;                                                                              
 _writeByTPost := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.start (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Buffer.T._elems.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var x_owner_mid: Buffer;                                                                           
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var x_mid: Array.Buffer.T;                                                                         
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Buffer.T._elems[x][i];                                                               
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Buffer.T._elems[x][i] := tmpV;                                                               
 Buffer.start[y] := w;                                                                              
 _writeByTPost := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.start (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.start (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Buffer.T._elems.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.start(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.start[y] := w;                                                                              
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.start (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.start (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.start (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Buffer.T._elems.Buffer.start(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.start;                                                                             
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.start(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.start(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.2): Buffer.start is not Write-Read Stable with respect to Array Array.Buffer.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.2): Buffer.start is not Write-Read Stable with respect to Array Array.Buffer.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.2): Buffer.start is not Write-Read Stable with respect to Array Array.Buffer.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Buffer.T._elems.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Array Array.Buffer.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (9.2): Buffer.end is not Write-Write Stable with respect to Array Array.Buffer.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (9.2): Buffer.end is not Write-Write Stable with respect to Array Array.Buffer.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Buffer.T._elems.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var x_owner_mid: Buffer;                                                                           
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var x_mid: Array.Buffer.T;                                                                         
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Buffer.T._elems[x][i];                                                               
 Array.Buffer.T._elems[x][i] := v;                                                                  
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Buffer.T._elems[x][i] := tmpV;                                                               
 Buffer.end[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.end (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Buffer.T._elems.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var t_mid: Tid;                                                                                    
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var x_owner_mid: Buffer;                                                                           
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var x_mid: Array.Buffer.T;                                                                         
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var y_mid: Buffer;                                                                                 
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Buffer.T._elems[x][i];                                                               
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Buffer.T._elems[x][i] := tmpV;                                                               
 Buffer.end[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.end (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.end (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Buffer.T._elems.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Buffer.end(u: Tid,y: Buffer,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Buffer.end[y] := w;                                                                                
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.end (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.end (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.end (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Buffer.T._elems.Buffer.end(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y: Buffer)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Buffer._state[y], u);                                                        
 modifies Array.Buffer.T._elems;                                                                    
 modifies Buffer.end;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var y_pre: Buffer;                                                                                 
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var y_post: Buffer;                                                                                
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Buffer.end(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Buffer.end(u: Tid,y: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (9.2): Buffer.end is not Write-Read Stable with respect to Array Array.Buffer.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (9.2): Buffer.end is not Write-Read Stable with respect to Array Array.Buffer.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (9.2): Buffer.end is not Write-Read Stable with respect to Array Array.Buffer.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Buffer.T._elems.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Array.Buffer.T._elems;                                                                    
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Array Array.Buffer.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Array Array.Buffer.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Array Array.Buffer.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Buffer.T._elems.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Array.Buffer.T._elems;                                                                    
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_owner_mid: Buffer;                                                                           
 var t_mid: Tid;                                                                                    
 var y_mid: Array.Buffer.T;                                                                         
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var x_owner_mid: Buffer;                                                                           
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var x_mid: Array.Buffer.T;                                                                         
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Buffer.T._elems[x][i];                                                               
 Array.Buffer.T._elems[x][i] := v;                                                                  
                                                                                                    
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Buffer.T._elems[x][i] := tmpV;                                                               
 Array.Buffer.T._elems[y][j] := w;                                                                  
 _writeByTPost := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Array Array.Buffer.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Buffer.T._elems.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Array.Buffer.T._elems;                                                                    
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_owner_mid: Buffer;                                                                           
 var t_mid: Tid;                                                                                    
 var y_mid: Array.Buffer.T;                                                                         
 var Array.Buffer.T._elems_mid: [Array.Buffer.T]([int]int);                                         
 var Array.Buffer.T._length_mid: [Array.Buffer.T]int;                                               
 var x_owner_mid: Buffer;                                                                           
 var Buffer.start_mid: [Buffer]int;                                                                 
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var w_mid: int;                                                                                    
 var Array.Buffer.T._state_mid: [Array.Buffer.T]State;                                              
 var x_mid: Array.Buffer.T;                                                                         
 var Buffer.elementCount_mid: [Buffer]int;                                                          
 var Buffer._lock_mid: [Buffer]Tid;                                                                 
 var Buffer.elementData_mid: [Buffer]Array.Buffer.T;                                                
 var Buffer._state_mid: [Buffer]State;                                                              
 var Buffer.end_mid: [Buffer]int;                                                                   
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Buffer.T._elems[x][i];                                                               
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_mid == Buffer._state && Buffer.elementData_mid == Buffer.elementData && Buffer.elementCount_mid == Buffer.elementCount && Buffer.start_mid == Buffer.start && Buffer.end_mid == Buffer.end && Buffer._lock_mid == Buffer._lock && Array.Buffer.T._state_mid == Array.Buffer.T._state && Array.Buffer.T._elems_mid == Array.Buffer.T._elems && Array.Buffer.T._length_mid == Array.Buffer.T._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Buffer.T._elems[x][i] := tmpV;                                                               
 Array.Buffer.T._elems[y][j] := w;                                                                  
 _writeByTPost := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Array Array.Buffer.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Array Array.Buffer.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Buffer.T._elems.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Array.Buffer.T._elems;                                                                    
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,w: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Buffer.T._elems[y][j] := w;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Array Array.Buffer.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Array Array.Buffer.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Array Array.Buffer.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Buffer.T._elems.Array.Buffer.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Buffer, x: Array.Buffer.T, i: int, y_owner: Buffer, y: Array.Buffer.T, j: int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Buffer.T._state[x], t);                                                
 requires Array.Buffer.T._this[x] == x_owner;                                                       
 requires isAccessible(Array.Buffer.T._state[y], u);                                                
 requires Array.Buffer.T._this[y] == y_owner;                                                       
 modifies Array.Buffer.T._elems;                                                                    
 modifies Array.Buffer.T._elems;                                                                    
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var v_pre: int;                                                                                    
 var y_owner_pre: Buffer;                                                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Buffer._state_pre: [Buffer]State;                                                              
 var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                         
 var Buffer.elementCount_pre: [Buffer]int;                                                          
 var Buffer.start_pre: [Buffer]int;                                                                 
 var x_owner_pre: Buffer;                                                                           
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var x_pre: Array.Buffer.T;                                                                         
 var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                               
 var y_pre: Array.Buffer.T;                                                                         
 var Buffer._lock_pre: [Buffer]Tid;                                                                 
 var $pc_pre: Phase;                                                                                
 var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                              
 var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                
 var Buffer.end_pre: [Buffer]int;                                                                   
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Buffer._lock_post: [Buffer]Tid;                                                                
 var $recorded.state_post: int;                                                                     
 var Buffer._state_post: [Buffer]State;                                                             
 var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                             
 var w0_post: int;                                                                                  
 var y_post: Array.Buffer.T;                                                                        
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var $pc_post: Phase;                                                                               
 var Buffer.end_post: [Buffer]int;                                                                  
 var j_post: int;                                                                                   
 var Buffer.elementCount_post: [Buffer]int;                                                         
 var Buffer.start_post: [Buffer]int;                                                                
 var x_owner_post: Buffer;                                                                          
 var w_post: int;                                                                                   
 var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                        
 var v_post: int;                                                                                   
 var y_owner_post: Buffer;                                                                          
 var x_post: Array.Buffer.T;                                                                        
 var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                               
 var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                              
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Buffer.T(t: Tid,x_owner: Buffer,x: Array.Buffer.T,i: int,v: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Buffer.T._elems[x][i] := v;                                                                  
 assume Buffer._state_post == Buffer._state && Buffer.elementData_post == Buffer.elementData && Buffer.elementCount_post == Buffer.elementCount && Buffer.start_post == Buffer.start && Buffer.end_post == Buffer.end && Buffer._lock_post == Buffer._lock && Array.Buffer.T._state_post == Array.Buffer.T._state && Array.Buffer.T._elems_post == Array.Buffer.T._elems && Array.Buffer.T._length_post == Array.Buffer.T._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Buffer.T(u: Tid,y_owner: Buffer,y: Array.Buffer.T,j: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Array Array.Buffer.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Array Array.Buffer.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Array Array.Buffer.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
procedure Yield(tid: Tid);                                                                          
requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
requires ValidTid(tid);                                                                             
modifies Buffer._state;                                                                             
modifies Buffer.elementData;                                                                        
modifies Buffer.elementCount;                                                                       
modifies Buffer.start;                                                                              
modifies Buffer.end;                                                                                
modifies Buffer._lock;                                                                              
modifies Array.Buffer.T._state;                                                                     
modifies Array.Buffer.T._elems;                                                                     
ensures StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
ensures Y(tid , old(Buffer._state), old(Buffer.elementData), old(Buffer.elementCount), old(Buffer.start), old(Buffer.end), old(Buffer._lock), old(Array.Buffer.T._state), old(Array.Buffer.T._elems), old(Array.Buffer.T._length) , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
                                                                                                    
// Buffer.elementData:                                                                              
                                                                                                    
function {:inline} Y_Buffer.elementData(tid : Tid, this: Buffer, newValue: Array.Buffer.T , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int): bool
{                                                                                                   
 ((isAccessible(Buffer._state[this], tid) && leq(m#moverPath(ReadEval.Buffer.elementData(tid: Tid,this: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length)), _R)) ==> (Buffer.elementData[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Buffer.elementData(tid : Tid, this: Buffer, newValue: Array.Buffer.T , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Buffer.elementData.Subsumes.W(tid : Tid, u : Tid, this: Buffer, newValue: Array.Buffer.T , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.Buffer.T._state_yield: [Array.Buffer.T]State;                                             
var Buffer.start_yield: [Buffer]int;                                                                
var Buffer.end_yield: [Buffer]int;                                                                  
var Array.Buffer.T._elems_yield: [Array.Buffer.T]([int]int);                                        
var tid_yield: Tid;                                                                                 
var Buffer._lock_yield: [Buffer]Tid;                                                                
var $pc_yield: Phase;                                                                               
var Buffer.elementData_yield: [Buffer]Array.Buffer.T;                                               
var Buffer.elementCount_yield: [Buffer]int;                                                         
var Array.Buffer.T._length_yield: [Array.Buffer.T]int;                                              
var u_yield: Tid;                                                                                   
var newValue_yield: Array.Buffer.T;                                                                 
var Buffer._state_yield: [Buffer]State;                                                             
var this_yield: Buffer;                                                                             
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Buffer._state[this], tid);                                                     
 assume isAccessible(Buffer._state[this], u);                                                       
 assume !isError(m#moverPath(WriteEval.Buffer.elementData(u: Tid,this: Buffer,newValue: Array.Buffer.T,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length)));
                                                                                                    
assume Buffer._state_yield == Buffer._state && Buffer.elementData_yield == Buffer.elementData && Buffer.elementCount_yield == Buffer.elementCount && Buffer.start_yield == Buffer.start && Buffer.end_yield == Buffer.end && Buffer._lock_yield == Buffer._lock && Array.Buffer.T._state_yield == Array.Buffer.T._state && Array.Buffer.T._elems_yield == Array.Buffer.T._elems && Array.Buffer.T._length_yield == Array.Buffer.T._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Buffer.elementData(tid, this, newValue , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Buffer.elementData.Reflexive(tid : Tid, this: Buffer , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.Buffer.T._state_yield: [Array.Buffer.T]State;                                             
var Buffer.start_yield: [Buffer]int;                                                                
var Buffer.end_yield: [Buffer]int;                                                                  
var Array.Buffer.T._elems_yield: [Array.Buffer.T]([int]int);                                        
var tid_yield: Tid;                                                                                 
var Buffer._lock_yield: [Buffer]Tid;                                                                
var $pc_yield: Phase;                                                                               
var Buffer.elementData_yield: [Buffer]Array.Buffer.T;                                               
var Buffer.elementCount_yield: [Buffer]int;                                                         
var Array.Buffer.T._length_yield: [Array.Buffer.T]int;                                              
var Buffer._state_yield: [Buffer]State;                                                             
var this_yield: Buffer;                                                                             
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Buffer._state[this], tid);                                                     
assume Buffer._state_yield == Buffer._state && Buffer.elementData_yield == Buffer.elementData && Buffer.elementCount_yield == Buffer.elementCount && Buffer.start_yield == Buffer.start && Buffer.end_yield == Buffer.end && Buffer._lock_yield == Buffer._lock && Array.Buffer.T._state_yield == Array.Buffer.T._state && Array.Buffer.T._elems_yield == Array.Buffer.T._elems && Array.Buffer.T._length_yield == Array.Buffer.T._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Buffer.elementData(tid, this, Buffer.elementData[this] , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Buffer.elementData.Transitive(tid : Tid, this: Buffer, newValue : Array.Buffer.T , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int , Buffer._state_p: [Buffer]State, Buffer.elementData_p: [Buffer]Array.Buffer.T, Buffer.elementCount_p: [Buffer]int, Buffer.start_p: [Buffer]int, Buffer.end_p: [Buffer]int, Buffer._lock_p: [Buffer]Tid, Array.Buffer.T._state_p: [Array.Buffer.T]State, Array.Buffer.T._elems_p: [Array.Buffer.T]([int]int), Array.Buffer.T._length_p: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires StateInvariant(Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var $recorded.state_pre: int;                                                                       
var Buffer._state_pre: [Buffer]State;                                                               
var newValue_pre: Array.Buffer.T;                                                                   
var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                          
var Buffer.elementCount_pre: [Buffer]int;                                                           
var Buffer.start_pre: [Buffer]int;                                                                  
var tid_pre: Tid;                                                                                   
var this_pre: Buffer;                                                                               
var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                                
var Buffer._lock_pre: [Buffer]Tid;                                                                  
var $pc_pre: Phase;                                                                                 
var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                               
var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                 
var Buffer.end_pre: [Buffer]int;                                                                    
                                                                                                    
var Buffer._lock_post: [Buffer]Tid;                                                                 
var $recorded.state_post: int;                                                                      
var Buffer._state_post: [Buffer]State;                                                              
var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                              
var this_post: Buffer;                                                                              
var newValue_post: Array.Buffer.T;                                                                  
var $pc_post: Phase;                                                                                
var Buffer.end_post: [Buffer]int;                                                                   
var Buffer.elementCount_post: [Buffer]int;                                                          
var tid_post: Tid;                                                                                  
var Buffer.start_post: [Buffer]int;                                                                 
var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                         
var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                                
var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                               
                                                                                                    
assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Buffer._state[this], tid);                                                     
 assume Y(tid , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length , Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
 assume Y_Buffer.elementData(tid, this, newValue , Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
assume Buffer._state_post == Buffer._state_p && Buffer.elementData_post == Buffer.elementData_p && Buffer.elementCount_post == Buffer.elementCount_p && Buffer.start_post == Buffer.start_p && Buffer.end_post == Buffer.end_p && Buffer._lock_post == Buffer._lock_p && Array.Buffer.T._state_post == Array.Buffer.T._state_p && Array.Buffer.T._elems_post == Array.Buffer.T._elems_p && Array.Buffer.T._length_post == Array.Buffer.T._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Buffer.elementData(tid, this, newValue , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
// Buffer.elementCount:                                                                             
                                                                                                    
function {:inline} Y_Buffer.elementCount(tid : Tid, this: Buffer, newValue: int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int): bool
{                                                                                                   
 ((isAccessible(Buffer._state[this], tid) && leq(m#moverPath(ReadEval.Buffer.elementCount(tid: Tid,this: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length)), _R)) ==> (Buffer.elementCount[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Buffer.elementCount(tid : Tid, this: Buffer, newValue: int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Buffer.elementCount.Subsumes.W(tid : Tid, u : Tid, this: Buffer, newValue: int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.Buffer.T._state_yield: [Array.Buffer.T]State;                                             
var Buffer.start_yield: [Buffer]int;                                                                
var Buffer.end_yield: [Buffer]int;                                                                  
var Array.Buffer.T._elems_yield: [Array.Buffer.T]([int]int);                                        
var tid_yield: Tid;                                                                                 
var Buffer._lock_yield: [Buffer]Tid;                                                                
var $pc_yield: Phase;                                                                               
var Buffer.elementData_yield: [Buffer]Array.Buffer.T;                                               
var newValue_yield: int;                                                                            
var Buffer.elementCount_yield: [Buffer]int;                                                         
var Array.Buffer.T._length_yield: [Array.Buffer.T]int;                                              
var u_yield: Tid;                                                                                   
var Buffer._state_yield: [Buffer]State;                                                             
var this_yield: Buffer;                                                                             
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Buffer._state[this], tid);                                                     
 assume isAccessible(Buffer._state[this], u);                                                       
 assume !isError(m#moverPath(WriteEval.Buffer.elementCount(u: Tid,this: Buffer,newValue: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length)));
                                                                                                    
assume Buffer._state_yield == Buffer._state && Buffer.elementData_yield == Buffer.elementData && Buffer.elementCount_yield == Buffer.elementCount && Buffer.start_yield == Buffer.start && Buffer.end_yield == Buffer.end && Buffer._lock_yield == Buffer._lock && Array.Buffer.T._state_yield == Array.Buffer.T._state && Array.Buffer.T._elems_yield == Array.Buffer.T._elems && Array.Buffer.T._length_yield == Array.Buffer.T._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Buffer.elementCount(tid, this, newValue , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Buffer.elementCount.Reflexive(tid : Tid, this: Buffer , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.Buffer.T._state_yield: [Array.Buffer.T]State;                                             
var Buffer.start_yield: [Buffer]int;                                                                
var Buffer.end_yield: [Buffer]int;                                                                  
var Array.Buffer.T._elems_yield: [Array.Buffer.T]([int]int);                                        
var tid_yield: Tid;                                                                                 
var Buffer._lock_yield: [Buffer]Tid;                                                                
var $pc_yield: Phase;                                                                               
var Buffer.elementData_yield: [Buffer]Array.Buffer.T;                                               
var Buffer.elementCount_yield: [Buffer]int;                                                         
var Array.Buffer.T._length_yield: [Array.Buffer.T]int;                                              
var Buffer._state_yield: [Buffer]State;                                                             
var this_yield: Buffer;                                                                             
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Buffer._state[this], tid);                                                     
assume Buffer._state_yield == Buffer._state && Buffer.elementData_yield == Buffer.elementData && Buffer.elementCount_yield == Buffer.elementCount && Buffer.start_yield == Buffer.start && Buffer.end_yield == Buffer.end && Buffer._lock_yield == Buffer._lock && Array.Buffer.T._state_yield == Array.Buffer.T._state && Array.Buffer.T._elems_yield == Array.Buffer.T._elems && Array.Buffer.T._length_yield == Array.Buffer.T._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Buffer.elementCount(tid, this, Buffer.elementCount[this] , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Buffer.elementCount.Transitive(tid : Tid, this: Buffer, newValue : int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int , Buffer._state_p: [Buffer]State, Buffer.elementData_p: [Buffer]Array.Buffer.T, Buffer.elementCount_p: [Buffer]int, Buffer.start_p: [Buffer]int, Buffer.end_p: [Buffer]int, Buffer._lock_p: [Buffer]Tid, Array.Buffer.T._state_p: [Array.Buffer.T]State, Array.Buffer.T._elems_p: [Array.Buffer.T]([int]int), Array.Buffer.T._length_p: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires StateInvariant(Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var $recorded.state_pre: int;                                                                       
var Buffer._state_pre: [Buffer]State;                                                               
var newValue_pre: int;                                                                              
var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                          
var Buffer.elementCount_pre: [Buffer]int;                                                           
var Buffer.start_pre: [Buffer]int;                                                                  
var tid_pre: Tid;                                                                                   
var this_pre: Buffer;                                                                               
var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                                
var Buffer._lock_pre: [Buffer]Tid;                                                                  
var $pc_pre: Phase;                                                                                 
var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                               
var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                 
var Buffer.end_pre: [Buffer]int;                                                                    
                                                                                                    
var Buffer._lock_post: [Buffer]Tid;                                                                 
var $recorded.state_post: int;                                                                      
var Buffer._state_post: [Buffer]State;                                                              
var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                              
var this_post: Buffer;                                                                              
var newValue_post: int;                                                                             
var $pc_post: Phase;                                                                                
var Buffer.end_post: [Buffer]int;                                                                   
var Buffer.elementCount_post: [Buffer]int;                                                          
var tid_post: Tid;                                                                                  
var Buffer.start_post: [Buffer]int;                                                                 
var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                         
var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                                
var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                               
                                                                                                    
assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Buffer._state[this], tid);                                                     
 assume Y(tid , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length , Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
 assume Y_Buffer.elementCount(tid, this, newValue , Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
assume Buffer._state_post == Buffer._state_p && Buffer.elementData_post == Buffer.elementData_p && Buffer.elementCount_post == Buffer.elementCount_p && Buffer.start_post == Buffer.start_p && Buffer.end_post == Buffer.end_p && Buffer._lock_post == Buffer._lock_p && Array.Buffer.T._state_post == Array.Buffer.T._state_p && Array.Buffer.T._elems_post == Array.Buffer.T._elems_p && Array.Buffer.T._length_post == Array.Buffer.T._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Buffer.elementCount(tid, this, newValue , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
// Buffer.start:                                                                                    
                                                                                                    
function {:inline} Y_Buffer.start(tid : Tid, this: Buffer, newValue: int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int): bool
{                                                                                                   
 ((isAccessible(Buffer._state[this], tid) && leq(m#moverPath(ReadEval.Buffer.start(tid: Tid,this: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length)), _R)) ==> (Buffer.start[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Buffer.start(tid : Tid, this: Buffer, newValue: int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Buffer.start.Subsumes.W(tid : Tid, u : Tid, this: Buffer, newValue: int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.Buffer.T._state_yield: [Array.Buffer.T]State;                                             
var Buffer.start_yield: [Buffer]int;                                                                
var Buffer.end_yield: [Buffer]int;                                                                  
var Array.Buffer.T._elems_yield: [Array.Buffer.T]([int]int);                                        
var tid_yield: Tid;                                                                                 
var Buffer._lock_yield: [Buffer]Tid;                                                                
var $pc_yield: Phase;                                                                               
var Buffer.elementData_yield: [Buffer]Array.Buffer.T;                                               
var newValue_yield: int;                                                                            
var Buffer.elementCount_yield: [Buffer]int;                                                         
var Array.Buffer.T._length_yield: [Array.Buffer.T]int;                                              
var u_yield: Tid;                                                                                   
var Buffer._state_yield: [Buffer]State;                                                             
var this_yield: Buffer;                                                                             
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Buffer._state[this], tid);                                                     
 assume isAccessible(Buffer._state[this], u);                                                       
 assume !isError(m#moverPath(WriteEval.Buffer.start(u: Tid,this: Buffer,newValue: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length)));
                                                                                                    
assume Buffer._state_yield == Buffer._state && Buffer.elementData_yield == Buffer.elementData && Buffer.elementCount_yield == Buffer.elementCount && Buffer.start_yield == Buffer.start && Buffer.end_yield == Buffer.end && Buffer._lock_yield == Buffer._lock && Array.Buffer.T._state_yield == Array.Buffer.T._state && Array.Buffer.T._elems_yield == Array.Buffer.T._elems && Array.Buffer.T._length_yield == Array.Buffer.T._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Buffer.start(tid, this, newValue , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Buffer.start.Reflexive(tid : Tid, this: Buffer , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.Buffer.T._state_yield: [Array.Buffer.T]State;                                             
var Buffer.start_yield: [Buffer]int;                                                                
var Buffer.end_yield: [Buffer]int;                                                                  
var Array.Buffer.T._elems_yield: [Array.Buffer.T]([int]int);                                        
var tid_yield: Tid;                                                                                 
var Buffer._lock_yield: [Buffer]Tid;                                                                
var $pc_yield: Phase;                                                                               
var Buffer.elementData_yield: [Buffer]Array.Buffer.T;                                               
var Buffer.elementCount_yield: [Buffer]int;                                                         
var Array.Buffer.T._length_yield: [Array.Buffer.T]int;                                              
var Buffer._state_yield: [Buffer]State;                                                             
var this_yield: Buffer;                                                                             
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Buffer._state[this], tid);                                                     
assume Buffer._state_yield == Buffer._state && Buffer.elementData_yield == Buffer.elementData && Buffer.elementCount_yield == Buffer.elementCount && Buffer.start_yield == Buffer.start && Buffer.end_yield == Buffer.end && Buffer._lock_yield == Buffer._lock && Array.Buffer.T._state_yield == Array.Buffer.T._state && Array.Buffer.T._elems_yield == Array.Buffer.T._elems && Array.Buffer.T._length_yield == Array.Buffer.T._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Buffer.start(tid, this, Buffer.start[this] , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Buffer.start.Transitive(tid : Tid, this: Buffer, newValue : int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int , Buffer._state_p: [Buffer]State, Buffer.elementData_p: [Buffer]Array.Buffer.T, Buffer.elementCount_p: [Buffer]int, Buffer.start_p: [Buffer]int, Buffer.end_p: [Buffer]int, Buffer._lock_p: [Buffer]Tid, Array.Buffer.T._state_p: [Array.Buffer.T]State, Array.Buffer.T._elems_p: [Array.Buffer.T]([int]int), Array.Buffer.T._length_p: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires StateInvariant(Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var $recorded.state_pre: int;                                                                       
var Buffer._state_pre: [Buffer]State;                                                               
var newValue_pre: int;                                                                              
var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                          
var Buffer.elementCount_pre: [Buffer]int;                                                           
var Buffer.start_pre: [Buffer]int;                                                                  
var tid_pre: Tid;                                                                                   
var this_pre: Buffer;                                                                               
var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                                
var Buffer._lock_pre: [Buffer]Tid;                                                                  
var $pc_pre: Phase;                                                                                 
var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                               
var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                 
var Buffer.end_pre: [Buffer]int;                                                                    
                                                                                                    
var Buffer._lock_post: [Buffer]Tid;                                                                 
var $recorded.state_post: int;                                                                      
var Buffer._state_post: [Buffer]State;                                                              
var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                              
var this_post: Buffer;                                                                              
var newValue_post: int;                                                                             
var $pc_post: Phase;                                                                                
var Buffer.end_post: [Buffer]int;                                                                   
var Buffer.elementCount_post: [Buffer]int;                                                          
var tid_post: Tid;                                                                                  
var Buffer.start_post: [Buffer]int;                                                                 
var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                         
var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                                
var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                               
                                                                                                    
assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Buffer._state[this], tid);                                                     
 assume Y(tid , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length , Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
 assume Y_Buffer.start(tid, this, newValue , Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
assume Buffer._state_post == Buffer._state_p && Buffer.elementData_post == Buffer.elementData_p && Buffer.elementCount_post == Buffer.elementCount_p && Buffer.start_post == Buffer.start_p && Buffer.end_post == Buffer.end_p && Buffer._lock_post == Buffer._lock_p && Array.Buffer.T._state_post == Array.Buffer.T._state_p && Array.Buffer.T._elems_post == Array.Buffer.T._elems_p && Array.Buffer.T._length_post == Array.Buffer.T._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Buffer.start(tid, this, newValue , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
// Buffer.end:                                                                                      
                                                                                                    
function {:inline} Y_Buffer.end(tid : Tid, this: Buffer, newValue: int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int): bool
{                                                                                                   
 ((isAccessible(Buffer._state[this], tid) && leq(m#moverPath(ReadEval.Buffer.end(tid: Tid,this: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length)), _R)) ==> (Buffer.end[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Buffer.end(tid : Tid, this: Buffer, newValue: int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Buffer.end.Subsumes.W(tid : Tid, u : Tid, this: Buffer, newValue: int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.Buffer.T._state_yield: [Array.Buffer.T]State;                                             
var Buffer.start_yield: [Buffer]int;                                                                
var Buffer.end_yield: [Buffer]int;                                                                  
var Array.Buffer.T._elems_yield: [Array.Buffer.T]([int]int);                                        
var tid_yield: Tid;                                                                                 
var Buffer._lock_yield: [Buffer]Tid;                                                                
var $pc_yield: Phase;                                                                               
var Buffer.elementData_yield: [Buffer]Array.Buffer.T;                                               
var newValue_yield: int;                                                                            
var Buffer.elementCount_yield: [Buffer]int;                                                         
var Array.Buffer.T._length_yield: [Array.Buffer.T]int;                                              
var u_yield: Tid;                                                                                   
var Buffer._state_yield: [Buffer]State;                                                             
var this_yield: Buffer;                                                                             
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Buffer._state[this], tid);                                                     
 assume isAccessible(Buffer._state[this], u);                                                       
 assume !isError(m#moverPath(WriteEval.Buffer.end(u: Tid,this: Buffer,newValue: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length)));
                                                                                                    
assume Buffer._state_yield == Buffer._state && Buffer.elementData_yield == Buffer.elementData && Buffer.elementCount_yield == Buffer.elementCount && Buffer.start_yield == Buffer.start && Buffer.end_yield == Buffer.end && Buffer._lock_yield == Buffer._lock && Array.Buffer.T._state_yield == Array.Buffer.T._state && Array.Buffer.T._elems_yield == Array.Buffer.T._elems && Array.Buffer.T._length_yield == Array.Buffer.T._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Buffer.end(tid, this, newValue , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Buffer.end.Reflexive(tid : Tid, this: Buffer , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.Buffer.T._state_yield: [Array.Buffer.T]State;                                             
var Buffer.start_yield: [Buffer]int;                                                                
var Buffer.end_yield: [Buffer]int;                                                                  
var Array.Buffer.T._elems_yield: [Array.Buffer.T]([int]int);                                        
var tid_yield: Tid;                                                                                 
var Buffer._lock_yield: [Buffer]Tid;                                                                
var $pc_yield: Phase;                                                                               
var Buffer.elementData_yield: [Buffer]Array.Buffer.T;                                               
var Buffer.elementCount_yield: [Buffer]int;                                                         
var Array.Buffer.T._length_yield: [Array.Buffer.T]int;                                              
var Buffer._state_yield: [Buffer]State;                                                             
var this_yield: Buffer;                                                                             
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Buffer._state[this], tid);                                                     
assume Buffer._state_yield == Buffer._state && Buffer.elementData_yield == Buffer.elementData && Buffer.elementCount_yield == Buffer.elementCount && Buffer.start_yield == Buffer.start && Buffer.end_yield == Buffer.end && Buffer._lock_yield == Buffer._lock && Array.Buffer.T._state_yield == Array.Buffer.T._state && Array.Buffer.T._elems_yield == Array.Buffer.T._elems && Array.Buffer.T._length_yield == Array.Buffer.T._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Buffer.end(tid, this, Buffer.end[this] , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Buffer.end.Transitive(tid : Tid, this: Buffer, newValue : int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int , Buffer._state_p: [Buffer]State, Buffer.elementData_p: [Buffer]Array.Buffer.T, Buffer.elementCount_p: [Buffer]int, Buffer.start_p: [Buffer]int, Buffer.end_p: [Buffer]int, Buffer._lock_p: [Buffer]Tid, Array.Buffer.T._state_p: [Array.Buffer.T]State, Array.Buffer.T._elems_p: [Array.Buffer.T]([int]int), Array.Buffer.T._length_p: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires StateInvariant(Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var $recorded.state_pre: int;                                                                       
var Buffer._state_pre: [Buffer]State;                                                               
var newValue_pre: int;                                                                              
var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                          
var Buffer.elementCount_pre: [Buffer]int;                                                           
var Buffer.start_pre: [Buffer]int;                                                                  
var tid_pre: Tid;                                                                                   
var this_pre: Buffer;                                                                               
var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                                
var Buffer._lock_pre: [Buffer]Tid;                                                                  
var $pc_pre: Phase;                                                                                 
var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                               
var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                 
var Buffer.end_pre: [Buffer]int;                                                                    
                                                                                                    
var Buffer._lock_post: [Buffer]Tid;                                                                 
var $recorded.state_post: int;                                                                      
var Buffer._state_post: [Buffer]State;                                                              
var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                              
var this_post: Buffer;                                                                              
var newValue_post: int;                                                                             
var $pc_post: Phase;                                                                                
var Buffer.end_post: [Buffer]int;                                                                   
var Buffer.elementCount_post: [Buffer]int;                                                          
var tid_post: Tid;                                                                                  
var Buffer.start_post: [Buffer]int;                                                                 
var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                         
var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                                
var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                               
                                                                                                    
assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Buffer._state[this], tid);                                                     
 assume Y(tid , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length , Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
 assume Y_Buffer.end(tid, this, newValue , Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
assume Buffer._state_post == Buffer._state_p && Buffer.elementData_post == Buffer.elementData_p && Buffer.elementCount_post == Buffer.elementCount_p && Buffer.start_post == Buffer.start_p && Buffer.end_post == Buffer.end_p && Buffer._lock_post == Buffer._lock_p && Array.Buffer.T._state_post == Array.Buffer.T._state_p && Array.Buffer.T._elems_post == Array.Buffer.T._elems_p && Array.Buffer.T._length_post == Array.Buffer.T._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Buffer.end(tid, this, newValue , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
// Buffer._lock:                                                                                    
                                                                                                    
function {:inline} Y_Buffer._lock(tid : Tid, this: Buffer, newValue: Tid , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int): bool
{                                                                                                   
 ((isAccessible(Buffer._state[this], tid) && leq(m#moverPath(ReadEval.Buffer._lock(tid: Tid,this: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length)), _R)) ==> (Buffer._lock[this] == newValue))
 &&(((Buffer._lock[this]==tid)==(newValue==tid)))                                                   
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Buffer._lock(tid : Tid, this: Buffer, newValue: Tid , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Buffer._lock.Subsumes.W(tid : Tid, u : Tid, this: Buffer, newValue: Tid , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Array.Buffer.T._state_yield: [Array.Buffer.T]State;                                             
var Buffer.start_yield: [Buffer]int;                                                                
var newValue_yield: Tid;                                                                            
var Buffer.end_yield: [Buffer]int;                                                                  
var Array.Buffer.T._elems_yield: [Array.Buffer.T]([int]int);                                        
var tid_yield: Tid;                                                                                 
var Buffer._lock_yield: [Buffer]Tid;                                                                
var $pc_yield: Phase;                                                                               
var Buffer.elementData_yield: [Buffer]Array.Buffer.T;                                               
var Buffer.elementCount_yield: [Buffer]int;                                                         
var Array.Buffer.T._length_yield: [Array.Buffer.T]int;                                              
var u_yield: Tid;                                                                                   
var Buffer._state_yield: [Buffer]State;                                                             
var this_yield: Buffer;                                                                             
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Buffer._state[this], tid);                                                     
 assume isAccessible(Buffer._state[this], u);                                                       
 assume !isError(m#moverPath(WriteEval.Buffer._lock(u: Tid,this: Buffer,newValue: Tid,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length)));
 assume leq(m#moverPath(ReadEval.Buffer._lock(tid: Tid,this: Buffer,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length)), _N);
assume Buffer._state_yield == Buffer._state && Buffer.elementData_yield == Buffer.elementData && Buffer.elementCount_yield == Buffer.elementCount && Buffer.start_yield == Buffer.start && Buffer.end_yield == Buffer.end && Buffer._lock_yield == Buffer._lock && Array.Buffer.T._state_yield == Array.Buffer.T._state && Array.Buffer.T._elems_yield == Array.Buffer.T._elems && Array.Buffer.T._length_yield == Array.Buffer.T._length && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Buffer._lock(tid, this, newValue , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Buffer._lock.Reflexive(tid : Tid, this: Buffer , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Array.Buffer.T._state_yield: [Array.Buffer.T]State;                                             
var Buffer.start_yield: [Buffer]int;                                                                
var Buffer.end_yield: [Buffer]int;                                                                  
var Array.Buffer.T._elems_yield: [Array.Buffer.T]([int]int);                                        
var tid_yield: Tid;                                                                                 
var Buffer._lock_yield: [Buffer]Tid;                                                                
var $pc_yield: Phase;                                                                               
var Buffer.elementData_yield: [Buffer]Array.Buffer.T;                                               
var Buffer.elementCount_yield: [Buffer]int;                                                         
var Array.Buffer.T._length_yield: [Array.Buffer.T]int;                                              
var Buffer._state_yield: [Buffer]State;                                                             
var this_yield: Buffer;                                                                             
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Buffer._state[this], tid);                                                     
assume Buffer._state_yield == Buffer._state && Buffer.elementData_yield == Buffer.elementData && Buffer.elementCount_yield == Buffer.elementCount && Buffer.start_yield == Buffer.start && Buffer.end_yield == Buffer.end && Buffer._lock_yield == Buffer._lock && Array.Buffer.T._state_yield == Array.Buffer.T._state && Array.Buffer.T._elems_yield == Array.Buffer.T._elems && Array.Buffer.T._length_yield == Array.Buffer.T._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Buffer._lock(tid, this, Buffer._lock[this] , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Buffer._lock.Transitive(tid : Tid, this: Buffer, newValue : Tid , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int , Buffer._state_p: [Buffer]State, Buffer.elementData_p: [Buffer]Array.Buffer.T, Buffer.elementCount_p: [Buffer]int, Buffer.start_p: [Buffer]int, Buffer.end_p: [Buffer]int, Buffer._lock_p: [Buffer]Tid, Array.Buffer.T._state_p: [Array.Buffer.T]State, Array.Buffer.T._elems_p: [Array.Buffer.T]([int]int), Array.Buffer.T._length_p: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires StateInvariant(Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var $recorded.state_pre: int;                                                                       
var Buffer._state_pre: [Buffer]State;                                                               
var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                          
var Buffer.elementCount_pre: [Buffer]int;                                                           
var Buffer.start_pre: [Buffer]int;                                                                  
var tid_pre: Tid;                                                                                   
var this_pre: Buffer;                                                                               
var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                                
var Buffer._lock_pre: [Buffer]Tid;                                                                  
var $pc_pre: Phase;                                                                                 
var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                               
var newValue_pre: Tid;                                                                              
var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                 
var Buffer.end_pre: [Buffer]int;                                                                    
                                                                                                    
var Buffer._lock_post: [Buffer]Tid;                                                                 
var $recorded.state_post: int;                                                                      
var Buffer._state_post: [Buffer]State;                                                              
var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                              
var this_post: Buffer;                                                                              
var $pc_post: Phase;                                                                                
var Buffer.end_post: [Buffer]int;                                                                   
var Buffer.elementCount_post: [Buffer]int;                                                          
var tid_post: Tid;                                                                                  
var Buffer.start_post: [Buffer]int;                                                                 
var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                         
var newValue_post: Tid;                                                                             
var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                                
var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                               
                                                                                                    
assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Buffer._state[this], tid);                                                     
 assume Y(tid , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length , Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
 assume Y_Buffer._lock(tid, this, newValue , Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
assume Buffer._state_post == Buffer._state_p && Buffer.elementData_post == Buffer.elementData_p && Buffer.elementCount_post == Buffer.elementCount_p && Buffer.start_post == Buffer.start_p && Buffer.end_post == Buffer.end_p && Buffer._lock_post == Buffer._lock_p && Array.Buffer.T._state_post == Array.Buffer.T._state_p && Array.Buffer.T._elems_post == Array.Buffer.T._elems_p && Array.Buffer.T._length_post == Array.Buffer.T._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Buffer._lock(tid, this, newValue , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
// Array.Buffer.T:                                                                                  
                                                                                                    
function {:inline} Y_Array.Buffer.T(tid : Tid, athis: Array.Buffer.T, index: int, newValue: int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int): bool
{                                                                                                   
(var this := Array.Buffer.T._this[athis];                                                           
 ((isAccessible(Array.Buffer.T._state[athis], tid) && leq(m#moverPath(ReadEval.Array.Buffer.T(tid: Tid,Array.Buffer.T._this[athis]: Buffer,athis: Array.Buffer.T,index: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length)), _R)) ==> (Array.Buffer.T._elems[athis][index] == newValue))
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Array.Buffer.T(tid : Tid, athis: Array.Buffer.T, index: int, newValue: int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int): bool
{                                                                                                   
(var this := Array.Buffer.T._this[athis];                                                           
true                                                                                                
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
procedure Y_Array.Buffer.T.Subsumes.W(tid : Tid, u : Tid, this: Buffer, athis: Array.Buffer.T, index: int, newValue: int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
 requires this == Array.Buffer.T._this[athis];                                                      
{                                                                                                   
var Array.Buffer.T._state_yield: [Array.Buffer.T]State;                                             
var Buffer.start_yield: [Buffer]int;                                                                
var Buffer.end_yield: [Buffer]int;                                                                  
var Array.Buffer.T._elems_yield: [Array.Buffer.T]([int]int);                                        
var tid_yield: Tid;                                                                                 
var Buffer._lock_yield: [Buffer]Tid;                                                                
var $pc_yield: Phase;                                                                               
var Buffer.elementData_yield: [Buffer]Array.Buffer.T;                                               
var athis_yield: Array.Buffer.T;                                                                    
var Buffer.elementCount_yield: [Buffer]int;                                                         
var Array.Buffer.T._length_yield: [Array.Buffer.T]int;                                              
var index_yield: int;                                                                               
var Buffer._state_yield: [Buffer]State;                                                             
var this_yield: Buffer;                                                                             
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Array.Buffer.T._state[athis], u);                                              
 assume !isError(m#moverPath(WriteEval.Array.Buffer.T(u: Tid,Array.Buffer.T._this[athis]: Buffer,athis: Array.Buffer.T,index: int,newValue: int,Buffer._state,Buffer.elementData,Buffer.elementCount,Buffer.start,Buffer.end,Buffer._lock,Array.Buffer.T._state,Array.Buffer.T._elems,Array.Buffer.T._length)));
                                                                                                    
assume Buffer._state_yield == Buffer._state && Buffer.elementData_yield == Buffer.elementData && Buffer.elementCount_yield == Buffer.elementCount && Buffer.start_yield == Buffer.start && Buffer.end_yield == Buffer.end && Buffer._lock_yield == Buffer._lock && Array.Buffer.T._state_yield == Array.Buffer.T._state && Array.Buffer.T._elems_yield == Array.Buffer.T._elems && Array.Buffer.T._length_yield == Array.Buffer.T._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Buffer.T(tid, athis, index, newValue , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Buffer.T.Reflexive(tid : Tid, this: Buffer, athis: Array.Buffer.T, index: int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires ValidTid(tid);                                                                            
 requires this == Array.Buffer.T._this[athis];                                                      
{                                                                                                   
var Array.Buffer.T._state_yield: [Array.Buffer.T]State;                                             
var Buffer.start_yield: [Buffer]int;                                                                
var Buffer.end_yield: [Buffer]int;                                                                  
var Array.Buffer.T._elems_yield: [Array.Buffer.T]([int]int);                                        
var tid_yield: Tid;                                                                                 
var Buffer._lock_yield: [Buffer]Tid;                                                                
var $pc_yield: Phase;                                                                               
var Buffer.elementData_yield: [Buffer]Array.Buffer.T;                                               
var athis_yield: Array.Buffer.T;                                                                    
var Buffer.elementCount_yield: [Buffer]int;                                                         
var Array.Buffer.T._length_yield: [Array.Buffer.T]int;                                              
var index_yield: int;                                                                               
var Buffer._state_yield: [Buffer]State;                                                             
var this_yield: Buffer;                                                                             
var $recorded.state_yield: int;                                                                     
                                                                                                    
 assume isAccessible(Array.Buffer.T._state[athis], tid);                                            
assume Buffer._state_yield == Buffer._state && Buffer.elementData_yield == Buffer.elementData && Buffer.elementCount_yield == Buffer.elementCount && Buffer.start_yield == Buffer.start && Buffer.end_yield == Buffer.end && Buffer._lock_yield == Buffer._lock && Array.Buffer.T._state_yield == Array.Buffer.T._state && Array.Buffer.T._elems_yield == Array.Buffer.T._elems && Array.Buffer.T._length_yield == Array.Buffer.T._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Buffer.T(tid, athis, index, Array.Buffer.T._elems[athis][index] , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Buffer.T.Transitive(tid : Tid, this: Buffer, athis: Array.Buffer.T, index: int, newValue : int , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int , Buffer._state_p: [Buffer]State, Buffer.elementData_p: [Buffer]Array.Buffer.T, Buffer.elementCount_p: [Buffer]int, Buffer.start_p: [Buffer]int, Buffer.end_p: [Buffer]int, Buffer._lock_p: [Buffer]Tid, Array.Buffer.T._state_p: [Array.Buffer.T]State, Array.Buffer.T._elems_p: [Array.Buffer.T]([int]int), Array.Buffer.T._length_p: [Array.Buffer.T]int)
 requires StateInvariant(Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
 requires StateInvariant(Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
                                                                                                    
 requires this == Array.Buffer.T._this[athis];                                                      
 requires ValidTid(tid);                                                                            
{                                                                                                   
var $recorded.state_pre: int;                                                                       
var Buffer._state_pre: [Buffer]State;                                                               
var Array.Buffer.T._elems_pre: [Array.Buffer.T]([int]int);                                          
var index_pre: int;                                                                                 
var Buffer.elementCount_pre: [Buffer]int;                                                           
var Buffer.start_pre: [Buffer]int;                                                                  
var tid_pre: Tid;                                                                                   
var this_pre: Buffer;                                                                               
var Array.Buffer.T._length_pre: [Array.Buffer.T]int;                                                
var Buffer._lock_pre: [Buffer]Tid;                                                                  
var $pc_pre: Phase;                                                                                 
var Array.Buffer.T._state_pre: [Array.Buffer.T]State;                                               
var Buffer.elementData_pre: [Buffer]Array.Buffer.T;                                                 
var Buffer.end_pre: [Buffer]int;                                                                    
var athis_pre: Array.Buffer.T;                                                                      
                                                                                                    
var Buffer._lock_post: [Buffer]Tid;                                                                 
var $recorded.state_post: int;                                                                      
var athis_post: Array.Buffer.T;                                                                     
var Buffer._state_post: [Buffer]State;                                                              
var Array.Buffer.T._state_post: [Array.Buffer.T]State;                                              
var this_post: Buffer;                                                                              
var $pc_post: Phase;                                                                                
var Buffer.end_post: [Buffer]int;                                                                   
var Buffer.elementCount_post: [Buffer]int;                                                          
var tid_post: Tid;                                                                                  
var Buffer.start_post: [Buffer]int;                                                                 
var Array.Buffer.T._elems_post: [Array.Buffer.T]([int]int);                                         
var index_post: int;                                                                                
var Buffer.elementData_post: [Buffer]Array.Buffer.T;                                                
var Array.Buffer.T._length_post: [Array.Buffer.T]int;                                               
                                                                                                    
assume Buffer._state_pre == Buffer._state && Buffer.elementData_pre == Buffer.elementData && Buffer.elementCount_pre == Buffer.elementCount && Buffer.start_pre == Buffer.start && Buffer.end_pre == Buffer.end && Buffer._lock_pre == Buffer._lock && Array.Buffer.T._state_pre == Array.Buffer.T._state && Array.Buffer.T._elems_pre == Array.Buffer.T._elems && Array.Buffer.T._length_pre == Array.Buffer.T._length && athis_pre == athis && index_pre == index && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
assume Buffer._state_post == Buffer._state_p && Buffer.elementData_post == Buffer.elementData_p && Buffer.elementCount_post == Buffer.elementCount_p && Buffer.start_post == Buffer.start_p && Buffer.end_post == Buffer.end_p && Buffer._lock_post == Buffer._lock_p && Array.Buffer.T._state_post == Array.Buffer.T._state_p && Array.Buffer.T._elems_post == Array.Buffer.T._elems_p && Array.Buffer.T._length_post == Array.Buffer.T._length_p && athis_post == athis && index_post == index && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assume isAccessible(Array.Buffer.T._state[athis], tid);                                            
 assume Y(tid , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length , Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
 assume Y_Array.Buffer.T(tid, athis, index, newValue , Buffer._state_p, Buffer.elementData_p, Buffer.elementCount_p, Buffer.start_p, Buffer.end_p, Buffer._lock_p, Array.Buffer.T._state_p, Array.Buffer.T._elems_p, Array.Buffer.T._length_p);
 assert Y_Array.Buffer.T(tid, athis, index, newValue , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length);
}                                                                                                   
                                                                                                    
                                                                                                    
function {:inline} Y(tid : Tid , Buffer._state: [Buffer]State, Buffer.elementData: [Buffer]Array.Buffer.T, Buffer.elementCount: [Buffer]int, Buffer.start: [Buffer]int, Buffer.end: [Buffer]int, Buffer._lock: [Buffer]Tid, Array.Buffer.T._state: [Array.Buffer.T]State, Array.Buffer.T._elems: [Array.Buffer.T]([int]int), Array.Buffer.T._length: [Array.Buffer.T]int , Buffer._state_p: [Buffer]State, Buffer.elementData_p: [Buffer]Array.Buffer.T, Buffer.elementCount_p: [Buffer]int, Buffer.start_p: [Buffer]int, Buffer.end_p: [Buffer]int, Buffer._lock_p: [Buffer]Tid, Array.Buffer.T._state_p: [Array.Buffer.T]State, Array.Buffer.T._elems_p: [Array.Buffer.T]([int]int), Array.Buffer.T._length_p: [Array.Buffer.T]int): bool
{                                                                                                   
 (forall this: Buffer :: Y_Buffer.elementData(tid : Tid, this, Buffer.elementData_p[this] , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length))
 && (forall this: Buffer :: Y_Buffer.elementCount(tid : Tid, this, Buffer.elementCount_p[this] , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length))
 && (forall this: Buffer :: Y_Buffer.start(tid : Tid, this, Buffer.start_p[this] , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length))
 && (forall this: Buffer :: Y_Buffer.end(tid : Tid, this, Buffer.end_p[this] , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length))
 && (forall this: Buffer :: Y_Buffer._lock(tid : Tid, this, Buffer._lock_p[this] , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length))
 && (forall athis: Array.Buffer.T, index: int :: Y_Array.Buffer.T(tid : Tid, athis, index, Array.Buffer.T._elems_p[athis][index] , Buffer._state, Buffer.elementData, Buffer.elementCount, Buffer.start, Buffer.end, Buffer._lock, Array.Buffer.T._state, Array.Buffer.T._elems, Array.Buffer.T._length))
 && (forall _i : Buffer :: isShared(Buffer._state[_i]) ==> isShared(Buffer._state_p[_i]))           
 && (forall _i : Buffer :: isLocal(Buffer._state[_i], tid) <==> isLocal(Buffer._state_p[_i], tid))  
 && (forall _i : Array.Buffer.T :: isShared(Array.Buffer.T._state[_i]) ==> isShared(Array.Buffer.T._state_p[_i]))
 && (forall _i : Array.Buffer.T :: Array.Buffer.T._length[_i] == Array.Buffer.T._length_p[_i])      
 && (forall _i : Array.Buffer.T :: isLocal(Array.Buffer.T._state[_i], tid) <==> isLocal(Array.Buffer.T._state_p[_i], tid))
                                                                                                    
}                                                                                                   
                                                                                                    
                                                                                                    
// 936.1-936.34: (6.2): Buffer.elementData failed Write-Write Right-Mover Check
// 1005.1-1005.30: (6.2): Buffer.elementData failed Write-Read Right-Mover Check
// 1078.1-1078.34: (6.2): Buffer.elementData failed Write-Write Left-Mover Check
// 1148.1-1148.30: (6.2): Buffer.elementData failed Write-Read Left-Mover Check
// 1215.1-1215.34: (6.2): Buffer.elementData failed Read-Write Right-Mover Check
// 1285.1-1285.34: (6.2): Buffer.elementData failed Read-Write Left-Mover Check
// 1354.1-1354.34: (7.2): Buffer.elementCount failed Write-Write Right-Mover Check
// 1423.1-1423.30: (7.2): Buffer.elementCount failed Write-Read Right-Mover Check
// 1496.1-1496.34: (7.2): Buffer.elementCount failed Write-Write Left-Mover Check
// 1566.1-1566.30: (7.2): Buffer.elementCount failed Write-Read Left-Mover Check
// 1633.1-1633.34: (7.2): Buffer.elementCount failed Read-Write Right-Mover Check
// 1703.1-1703.34: (7.2): Buffer.elementCount failed Read-Write Left-Mover Check
// 1772.1-1772.34: (8.2): Buffer.start failed Write-Write Right-Mover Check
// 1841.1-1841.30: (8.2): Buffer.start failed Write-Read Right-Mover Check
// 1914.1-1914.34: (8.2): Buffer.start failed Write-Write Left-Mover Check
// 1984.1-1984.30: (8.2): Buffer.start failed Write-Read Left-Mover Check
// 2051.1-2051.34: (8.2): Buffer.start failed Read-Write Right-Mover Check
// 2121.1-2121.34: (8.2): Buffer.start failed Read-Write Left-Mover Check
// 2190.1-2190.34: (9.2): Buffer.end failed Write-Write Right-Mover Check
// 2259.1-2259.30: (9.2): Buffer.end failed Write-Read Right-Mover Check
// 2332.1-2332.34: (9.2): Buffer.end failed Write-Write Left-Mover Check
// 2402.1-2402.30: (9.2): Buffer.end failed Write-Read Left-Mover Check
// 2469.1-2469.34: (9.2): Buffer.end failed Read-Write Right-Mover Check
// 2539.1-2539.34: (9.2): Buffer.end failed Read-Write Left-Mover Check
// 2614.1-2614.34: (4.2): Array Array.Buffer.T failed Write-Write Right-Mover Check
// 2689.1-2689.30: (4.2): Array Array.Buffer.T failed Write-Read Right-Mover Check
// 2768.1-2768.34: (4.2): Array Array.Buffer.T failed Write-Write Left-Mover Check
// 2844.1-2844.30: (4.2): Array Array.Buffer.T failed Write-Read Left-Mover Check
// 2917.1-2917.34: (4.2): Array Array.Buffer.T failed Read-Write Right-Mover Check
// 2993.1-2993.34: (4.2): Array Array.Buffer.T failed Read-Write Left-Mover Check
// 3074.1-3074.140: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementData (case A.1)
// 3075.1-3075.101: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementData (case A.2)
// 3076.1-3076.158: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementData (case A.3)
// 3187.1-3187.140: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementData (case C)
// 3303.1-3303.144: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementData (case D)
// 3304.1-3304.144: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementData (case R)
// 3385.1-3385.136: (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.elementData (case F)
// 3386.1-3386.136: (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.elementData (case H)
// 3387.1-3387.146: (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.elementData (case I)
// 3467.1-3467.136: (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.elementData (case J)
// 3468.1-3468.136: (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.elementData (case K)
// 3469.1-3469.99: (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.elementData (case L)
// 3551.1-3551.140: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementData (case A.1)
// 3552.1-3552.101: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementData (case A.2)
// 3553.1-3553.158: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementData (case A.3)
// 3664.1-3664.140: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementCount (case C)
// 3780.1-3780.144: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementCount (case D)
// 3781.1-3781.144: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementCount (case R)
// 3862.1-3862.136: (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.elementCount (case F)
// 3863.1-3863.136: (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.elementCount (case H)
// 3864.1-3864.146: (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.elementCount (case I)
// 3944.1-3944.136: (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.elementData (case J)
// 3945.1-3945.136: (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.elementData (case K)
// 3946.1-3946.99: (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.elementData (case L)
// 4028.1-4028.140: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementData (case A.1)
// 4029.1-4029.101: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementData (case A.2)
// 4030.1-4030.158: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementData (case A.3)
// 4141.1-4141.140: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.start (case C)
// 4257.1-4257.144: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.start (case D)
// 4258.1-4258.144: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.start (case R)
// 4339.1-4339.136: (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.start (case F)
// 4340.1-4340.136: (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.start (case H)
// 4341.1-4341.146: (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.start (case I)
// 4421.1-4421.136: (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.elementData (case J)
// 4422.1-4422.136: (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.elementData (case K)
// 4423.1-4423.99: (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.elementData (case L)
// 4505.1-4505.140: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementData (case A.1)
// 4506.1-4506.101: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementData (case A.2)
// 4507.1-4507.158: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementData (case A.3)
// 4618.1-4618.140: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.end (case C)
// 4734.1-4734.144: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.end (case D)
// 4735.1-4735.144: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.end (case R)
// 4816.1-4816.136: (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.end (case F)
// 4817.1-4817.136: (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.end (case H)
// 4818.1-4818.146: (6.2): Buffer.elementData is not Read-Write Stable with respect to Buffer.end (case I)
// 4898.1-4898.136: (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.elementData (case J)
// 4899.1-4899.136: (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.elementData (case K)
// 4900.1-4900.99: (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.elementData (case L)
// 4987.1-4987.140: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementData (case A.1)
// 4988.1-4988.101: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementData (case A.2)
// 4989.1-4989.156: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementData (case A.3)
// 5107.1-5107.140: (6.2): Buffer.elementData is not Write-Write Stable with respect to Array Array.Buffer.T (case C)
// 5230.1-5230.144: (6.2): Buffer.elementData is not Write-Write Stable with respect to Array Array.Buffer.T (case D)
// 5231.1-5231.144: (6.2): Buffer.elementData is not Write-Write Stable with respect to Array Array.Buffer.T (case R)
// 5317.1-5317.136: (6.2): Buffer.elementData is not Read-Write Stable with respect to Array Array.Buffer.T (case F)
// 5318.1-5318.136: (6.2): Buffer.elementData is not Read-Write Stable with respect to Array Array.Buffer.T (case H)
// 5319.1-5319.144: (6.2): Buffer.elementData is not Read-Write Stable with respect to Array Array.Buffer.T (case I)
// 5404.1-5404.136: (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.elementData (case J)
// 5405.1-5405.136: (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.elementData (case K)
// 5406.1-5406.99: (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.elementData (case L)
// 5488.1-5488.140: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementCount (case A.1)
// 5489.1-5489.101: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementCount (case A.2)
// 5490.1-5490.158: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.elementCount (case A.3)
// 5601.1-5601.140: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementData (case C)
// 5717.1-5717.144: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementData (case D)
// 5718.1-5718.144: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementData (case R)
// 5799.1-5799.136: (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.elementData (case F)
// 5800.1-5800.136: (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.elementData (case H)
// 5801.1-5801.146: (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.elementData (case I)
// 5881.1-5881.136: (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.elementCount (case J)
// 5882.1-5882.136: (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.elementCount (case K)
// 5883.1-5883.99: (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.elementCount (case L)
// 5965.1-5965.140: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementCount (case A.1)
// 5966.1-5966.101: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementCount (case A.2)
// 5967.1-5967.158: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementCount (case A.3)
// 6078.1-6078.140: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementCount (case C)
// 6194.1-6194.144: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementCount (case D)
// 6195.1-6195.144: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.elementCount (case R)
// 6276.1-6276.136: (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.elementCount (case F)
// 6277.1-6277.136: (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.elementCount (case H)
// 6278.1-6278.146: (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.elementCount (case I)
// 6358.1-6358.136: (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.elementCount (case J)
// 6359.1-6359.136: (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.elementCount (case K)
// 6360.1-6360.99: (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.elementCount (case L)
// 6442.1-6442.140: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementCount (case A.1)
// 6443.1-6443.101: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementCount (case A.2)
// 6444.1-6444.158: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementCount (case A.3)
// 6555.1-6555.140: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.start (case C)
// 6671.1-6671.144: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.start (case D)
// 6672.1-6672.144: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.start (case R)
// 6753.1-6753.136: (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.start (case F)
// 6754.1-6754.136: (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.start (case H)
// 6755.1-6755.146: (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.start (case I)
// 6835.1-6835.136: (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.elementCount (case J)
// 6836.1-6836.136: (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.elementCount (case K)
// 6837.1-6837.99: (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.elementCount (case L)
// 6919.1-6919.140: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementCount (case A.1)
// 6920.1-6920.101: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementCount (case A.2)
// 6921.1-6921.158: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementCount (case A.3)
// 7032.1-7032.140: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.end (case C)
// 7148.1-7148.144: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.end (case D)
// 7149.1-7149.144: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.end (case R)
// 7230.1-7230.136: (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.end (case F)
// 7231.1-7231.136: (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.end (case H)
// 7232.1-7232.146: (7.2): Buffer.elementCount is not Read-Write Stable with respect to Buffer.end (case I)
// 7312.1-7312.136: (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.elementCount (case J)
// 7313.1-7313.136: (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.elementCount (case K)
// 7314.1-7314.99: (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.elementCount (case L)
// 7401.1-7401.140: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementCount (case A.1)
// 7402.1-7402.101: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementCount (case A.2)
// 7403.1-7403.156: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementCount (case A.3)
// 7521.1-7521.140: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Array Array.Buffer.T (case C)
// 7644.1-7644.144: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Array Array.Buffer.T (case D)
// 7645.1-7645.144: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Array Array.Buffer.T (case R)
// 7731.1-7731.136: (7.2): Buffer.elementCount is not Read-Write Stable with respect to Array Array.Buffer.T (case F)
// 7732.1-7732.136: (7.2): Buffer.elementCount is not Read-Write Stable with respect to Array Array.Buffer.T (case H)
// 7733.1-7733.144: (7.2): Buffer.elementCount is not Read-Write Stable with respect to Array Array.Buffer.T (case I)
// 7818.1-7818.136: (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.elementCount (case J)
// 7819.1-7819.136: (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.elementCount (case K)
// 7820.1-7820.99: (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.elementCount (case L)
// 7902.1-7902.140: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.start (case A.1)
// 7903.1-7903.101: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.start (case A.2)
// 7904.1-7904.158: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.start (case A.3)
// 8015.1-8015.140: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementData (case C)
// 8131.1-8131.144: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementData (case D)
// 8132.1-8132.144: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementData (case R)
// 8213.1-8213.136: (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.elementData (case F)
// 8214.1-8214.136: (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.elementData (case H)
// 8215.1-8215.146: (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.elementData (case I)
// 8295.1-8295.136: (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.start (case J)
// 8296.1-8296.136: (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.start (case K)
// 8297.1-8297.99: (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.start (case L)
// 8379.1-8379.140: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.start (case A.1)
// 8380.1-8380.101: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.start (case A.2)
// 8381.1-8381.158: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.start (case A.3)
// 8492.1-8492.140: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementCount (case C)
// 8608.1-8608.144: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementCount (case D)
// 8609.1-8609.144: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.elementCount (case R)
// 8690.1-8690.136: (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.elementCount (case F)
// 8691.1-8691.136: (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.elementCount (case H)
// 8692.1-8692.146: (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.elementCount (case I)
// 8772.1-8772.136: (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.start (case J)
// 8773.1-8773.136: (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.start (case K)
// 8774.1-8774.99: (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.start (case L)
// 8856.1-8856.140: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.start (case A.1)
// 8857.1-8857.101: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.start (case A.2)
// 8858.1-8858.158: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.start (case A.3)
// 8969.1-8969.140: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.start (case C)
// 9085.1-9085.144: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.start (case D)
// 9086.1-9086.144: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.start (case R)
// 9167.1-9167.136: (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.start (case F)
// 9168.1-9168.136: (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.start (case H)
// 9169.1-9169.146: (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.start (case I)
// 9249.1-9249.136: (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.start (case J)
// 9250.1-9250.136: (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.start (case K)
// 9251.1-9251.99: (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.start (case L)
// 9333.1-9333.140: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.start (case A.1)
// 9334.1-9334.101: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.start (case A.2)
// 9335.1-9335.158: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.start (case A.3)
// 9446.1-9446.140: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.end (case C)
// 9562.1-9562.144: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.end (case D)
// 9563.1-9563.144: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.end (case R)
// 9644.1-9644.136: (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.end (case F)
// 9645.1-9645.136: (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.end (case H)
// 9646.1-9646.146: (8.2): Buffer.start is not Read-Write Stable with respect to Buffer.end (case I)
// 9726.1-9726.136: (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.start (case J)
// 9727.1-9727.136: (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.start (case K)
// 9728.1-9728.99: (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.start (case L)
// 9815.1-9815.140: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.start (case A.1)
// 9816.1-9816.101: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.start (case A.2)
// 9817.1-9817.156: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.start (case A.3)
// 9935.1-9935.140: (8.2): Buffer.start is not Write-Write Stable with respect to Array Array.Buffer.T (case C)
// 10058.1-10058.144: (8.2): Buffer.start is not Write-Write Stable with respect to Array Array.Buffer.T (case D)
// 10059.1-10059.144: (8.2): Buffer.start is not Write-Write Stable with respect to Array Array.Buffer.T (case R)
// 10145.1-10145.136: (8.2): Buffer.start is not Read-Write Stable with respect to Array Array.Buffer.T (case F)
// 10146.1-10146.136: (8.2): Buffer.start is not Read-Write Stable with respect to Array Array.Buffer.T (case H)
// 10147.1-10147.144: (8.2): Buffer.start is not Read-Write Stable with respect to Array Array.Buffer.T (case I)
// 10232.1-10232.136: (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.start (case J)
// 10233.1-10233.136: (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.start (case K)
// 10234.1-10234.99: (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.start (case L)
// 10316.1-10316.140: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.end (case A.1)
// 10317.1-10317.101: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.end (case A.2)
// 10318.1-10318.158: (6.2): Buffer.elementData is not Write-Write Stable with respect to Buffer.end (case A.3)
// 10429.1-10429.140: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementData (case C)
// 10545.1-10545.144: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementData (case D)
// 10546.1-10546.144: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementData (case R)
// 10627.1-10627.136: (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.elementData (case F)
// 10628.1-10628.136: (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.elementData (case H)
// 10629.1-10629.146: (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.elementData (case I)
// 10709.1-10709.136: (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.end (case J)
// 10710.1-10710.136: (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.end (case K)
// 10711.1-10711.99: (6.2): Buffer.elementData is not Write-Read Stable with respect to Buffer.end (case L)
// 10793.1-10793.140: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.end (case A.1)
// 10794.1-10794.101: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.end (case A.2)
// 10795.1-10795.158: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Buffer.end (case A.3)
// 10906.1-10906.140: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementCount (case C)
// 11022.1-11022.144: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementCount (case D)
// 11023.1-11023.144: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.elementCount (case R)
// 11104.1-11104.136: (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.elementCount (case F)
// 11105.1-11105.136: (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.elementCount (case H)
// 11106.1-11106.146: (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.elementCount (case I)
// 11186.1-11186.136: (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.end (case J)
// 11187.1-11187.136: (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.end (case K)
// 11188.1-11188.99: (7.2): Buffer.elementCount is not Write-Read Stable with respect to Buffer.end (case L)
// 11270.1-11270.140: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.end (case A.1)
// 11271.1-11271.101: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.end (case A.2)
// 11272.1-11272.158: (8.2): Buffer.start is not Write-Write Stable with respect to Buffer.end (case A.3)
// 11383.1-11383.140: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.start (case C)
// 11499.1-11499.144: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.start (case D)
// 11500.1-11500.144: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.start (case R)
// 11581.1-11581.136: (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.start (case F)
// 11582.1-11582.136: (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.start (case H)
// 11583.1-11583.146: (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.start (case I)
// 11663.1-11663.136: (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.end (case J)
// 11664.1-11664.136: (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.end (case K)
// 11665.1-11665.99: (8.2): Buffer.start is not Write-Read Stable with respect to Buffer.end (case L)
// 11747.1-11747.140: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.end (case A.1)
// 11748.1-11748.101: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.end (case A.2)
// 11749.1-11749.158: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.end (case A.3)
// 11860.1-11860.140: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.end (case C)
// 11976.1-11976.144: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.end (case D)
// 11977.1-11977.144: (9.2): Buffer.end is not Write-Write Stable with respect to Buffer.end (case R)
// 12058.1-12058.136: (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.end (case F)
// 12059.1-12059.136: (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.end (case H)
// 12060.1-12060.146: (9.2): Buffer.end is not Read-Write Stable with respect to Buffer.end (case I)
// 12140.1-12140.136: (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.end (case J)
// 12141.1-12141.136: (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.end (case K)
// 12142.1-12142.99: (9.2): Buffer.end is not Write-Read Stable with respect to Buffer.end (case L)
// 12229.1-12229.140: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.end (case A.1)
// 12230.1-12230.101: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.end (case A.2)
// 12231.1-12231.156: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.end (case A.3)
// 12349.1-12349.140: (9.2): Buffer.end is not Write-Write Stable with respect to Array Array.Buffer.T (case C)
// 12472.1-12472.144: (9.2): Buffer.end is not Write-Write Stable with respect to Array Array.Buffer.T (case D)
// 12473.1-12473.144: (9.2): Buffer.end is not Write-Write Stable with respect to Array Array.Buffer.T (case R)
// 12559.1-12559.136: (9.2): Buffer.end is not Read-Write Stable with respect to Array Array.Buffer.T (case F)
// 12560.1-12560.136: (9.2): Buffer.end is not Read-Write Stable with respect to Array Array.Buffer.T (case H)
// 12561.1-12561.144: (9.2): Buffer.end is not Read-Write Stable with respect to Array Array.Buffer.T (case I)
// 12646.1-12646.136: (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.end (case J)
// 12647.1-12647.136: (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.end (case K)
// 12648.1-12648.99: (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Buffer.end (case L)
// 12735.1-12735.140: (6.2): Buffer.elementData is not Write-Write Stable with respect to Array Array.Buffer.T (case A.1)
// 12736.1-12736.101: (6.2): Buffer.elementData is not Write-Write Stable with respect to Array Array.Buffer.T (case A.2)
// 12737.1-12737.156: (6.2): Buffer.elementData is not Write-Write Stable with respect to Array Array.Buffer.T (case A.3)
// 12855.1-12855.140: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementData (case C)
// 12978.1-12978.144: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementData (case D)
// 12979.1-12979.144: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementData (case R)
// 13065.1-13065.136: (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.elementData (case F)
// 13066.1-13066.136: (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.elementData (case H)
// 13067.1-13067.144: (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.elementData (case I)
// 13152.1-13152.136: (6.2): Buffer.elementData is not Write-Read Stable with respect to Array Array.Buffer.T (case J)
// 13153.1-13153.136: (6.2): Buffer.elementData is not Write-Read Stable with respect to Array Array.Buffer.T (case K)
// 13154.1-13154.99: (6.2): Buffer.elementData is not Write-Read Stable with respect to Array Array.Buffer.T (case L)
// 13241.1-13241.140: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Array Array.Buffer.T (case A.1)
// 13242.1-13242.101: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Array Array.Buffer.T (case A.2)
// 13243.1-13243.156: (7.2): Buffer.elementCount is not Write-Write Stable with respect to Array Array.Buffer.T (case A.3)
// 13361.1-13361.140: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementCount (case C)
// 13484.1-13484.144: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementCount (case D)
// 13485.1-13485.144: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.elementCount (case R)
// 13571.1-13571.136: (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.elementCount (case F)
// 13572.1-13572.136: (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.elementCount (case H)
// 13573.1-13573.144: (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.elementCount (case I)
// 13658.1-13658.136: (7.2): Buffer.elementCount is not Write-Read Stable with respect to Array Array.Buffer.T (case J)
// 13659.1-13659.136: (7.2): Buffer.elementCount is not Write-Read Stable with respect to Array Array.Buffer.T (case K)
// 13660.1-13660.99: (7.2): Buffer.elementCount is not Write-Read Stable with respect to Array Array.Buffer.T (case L)
// 13747.1-13747.140: (8.2): Buffer.start is not Write-Write Stable with respect to Array Array.Buffer.T (case A.1)
// 13748.1-13748.101: (8.2): Buffer.start is not Write-Write Stable with respect to Array Array.Buffer.T (case A.2)
// 13749.1-13749.156: (8.2): Buffer.start is not Write-Write Stable with respect to Array Array.Buffer.T (case A.3)
// 13867.1-13867.140: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.start (case C)
// 13990.1-13990.144: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.start (case D)
// 13991.1-13991.144: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.start (case R)
// 14077.1-14077.136: (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.start (case F)
// 14078.1-14078.136: (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.start (case H)
// 14079.1-14079.144: (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.start (case I)
// 14164.1-14164.136: (8.2): Buffer.start is not Write-Read Stable with respect to Array Array.Buffer.T (case J)
// 14165.1-14165.136: (8.2): Buffer.start is not Write-Read Stable with respect to Array Array.Buffer.T (case K)
// 14166.1-14166.99: (8.2): Buffer.start is not Write-Read Stable with respect to Array Array.Buffer.T (case L)
// 14253.1-14253.140: (9.2): Buffer.end is not Write-Write Stable with respect to Array Array.Buffer.T (case A.1)
// 14254.1-14254.101: (9.2): Buffer.end is not Write-Write Stable with respect to Array Array.Buffer.T (case A.2)
// 14255.1-14255.156: (9.2): Buffer.end is not Write-Write Stable with respect to Array Array.Buffer.T (case A.3)
// 14373.1-14373.140: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.end (case C)
// 14496.1-14496.144: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.end (case D)
// 14497.1-14497.144: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Buffer.end (case R)
// 14583.1-14583.136: (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.end (case F)
// 14584.1-14584.136: (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.end (case H)
// 14585.1-14585.144: (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Buffer.end (case I)
// 14670.1-14670.136: (9.2): Buffer.end is not Write-Read Stable with respect to Array Array.Buffer.T (case J)
// 14671.1-14671.136: (9.2): Buffer.end is not Write-Read Stable with respect to Array Array.Buffer.T (case K)
// 14672.1-14672.99: (9.2): Buffer.end is not Write-Read Stable with respect to Array Array.Buffer.T (case L)
// 14764.1-14764.140: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Array Array.Buffer.T (case A.1)
// 14765.1-14765.101: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Array Array.Buffer.T (case A.2)
// 14766.1-14766.156: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Array Array.Buffer.T (case A.3)
// 14891.1-14891.140: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Array Array.Buffer.T (case C)
// 15021.1-15021.144: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Array Array.Buffer.T (case D)
// 15022.1-15022.144: (4.2): Array Array.Buffer.T is not Write-Write Stable with respect to Array Array.Buffer.T (case R)
// 15113.1-15113.136: (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Array Array.Buffer.T (case F)
// 15114.1-15114.136: (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Array Array.Buffer.T (case H)
// 15115.1-15115.144: (4.2): Array Array.Buffer.T is not Read-Write Stable with respect to Array Array.Buffer.T (case I)
// 15205.1-15205.136: (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Array Array.Buffer.T (case J)
// 15206.1-15206.136: (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Array Array.Buffer.T (case K)
// 15207.1-15207.99: (4.2): Array Array.Buffer.T is not Write-Read Stable with respect to Array Array.Buffer.T (case L)
// 15243.1-15268.2: (6.2): yields_as clause for Buffer.elementData is not valid
// 15273.1-15293.2: (6.2): yields_as clause for Buffer.elementData is not reflexive
// 15299.1-15339.2: (6.2): yields_as clause for Buffer.elementData is not transitive
// 15358.1-15383.2: (7.2): yields_as clause for Buffer.elementCount is not valid
// 15388.1-15408.2: (7.2): yields_as clause for Buffer.elementCount is not reflexive
// 15414.1-15454.2: (7.2): yields_as clause for Buffer.elementCount is not transitive
// 15473.1-15498.2: (8.2): yields_as clause for Buffer.start is not valid
// 15503.1-15523.2: (8.2): yields_as clause for Buffer.start is not reflexive
// 15529.1-15569.2: (8.2): yields_as clause for Buffer.start is not transitive
// 15588.1-15613.2: (9.2): yields_as clause for Buffer.end is not valid
// 15618.1-15638.2: (9.2): yields_as clause for Buffer.end is not reflexive
// 15644.1-15684.2: (9.2): yields_as clause for Buffer.end is not transitive
// 15704.1-15729.2: (7.32): yields_as clause for Buffer._lock is not valid
// 15734.1-15754.2: (7.32): yields_as clause for Buffer._lock is not reflexive
// 15760.1-15800.2: (7.32): yields_as clause for Buffer._lock is not transitive
// 15818.1-15847.2: (4.2): yields_as clause for Array.Buffer.T is not valid
// 15848.1-15874.2: (4.2): yields_as clause for Array.Buffer.T is not reflexive
// 15879.1-15923.2: (4.2): yields_as clause for Array.Buffer.T is not transitive
