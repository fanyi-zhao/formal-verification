                                                                                                    
 /*                                                                                                 
                                                                                                    
 /home/artifact/Synchronicity/workspace/Synchronicity/tests/queue-no-seq-v2.anchor:                 
                                                                                                    
 AST:                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
    class Queue {                                                                                   
      array T = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E]                                                                  
                                                                                                    
      array A = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E]                                                                            
                                                                                                    
       [Queue.T{this}] elems isLocal(this, tid)                                                     
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
      volatile int head isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile int tail isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile [Queue.A{this}] spec isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      invariant  0 <= this.head && this.head <= this.tail && this.tail - this.head <= this.elems.length;
      invariant  this.elems.length == 512;                                                          
      invariant  this.spec.length == this.tail - this.head;                                         
      invariant  forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == this.elems[this.head + i % this.elems.length];
                                                                                                    
      requires this.elems == [Queue.T{this}].null;                                                  
      requires this.spec == [Queue.A{this}].null;                                                   
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void init() {                                                                          
        assume this.elems == [Queue.T{this}].null;                                                  
        assume this.head == 0;                                                                      
        assume this.tail == 0;                                                                      
        assume this.spec == [Queue.A{this}].null;                                                   
        {                                                                                           
          int tmp1;                                                                                 
          tmp1 = 0;                                                                                 
          this.head := tmp1;                                                                        
          int tmp2;                                                                                 
          tmp2 = 0;                                                                                 
          this.tail := tmp2;                                                                        
          [Queue.T{this}] elems;                                                                    
          elems = new [Queue.T{this}](512);                                                         
          [Queue.A{this}] spec;                                                                     
          spec = new [Queue.A{this}](0);                                                            
          this.elems := elems, this.spec := spec;                                                   
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures this.spec == old(this.spec) || this.spec.length == old(this.spec.length - 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == old(this.spec[i + 1]));
      }                                                                                             
      public int dequeue() {                                                                        
        synchronized (this) {                                                                       
          bool tmp3;                                                                                
          int tmp4;                                                                                 
          int tmp5;                                                                                 
          tmp5 := this.tail;                                                                        
          int tmp6;                                                                                 
          tmp6 := this.head;                                                                        
          tmp4 = tmp5 - tmp6;                                                                       
          tmp3 = tmp4 > 0;                                                                          
          if (tmp3 /* == this.tail - this.head > 0 */) {                                            
            int result;                                                                             
            [Queue.T{this}] tmp7;                                                                   
            tmp7 := this.elems;                                                                     
            int tmp8;                                                                               
            int tmp9;                                                                               
            tmp9 := this.head;                                                                      
            int tmp10;                                                                              
            [Queue.T{this}] tmp11;                                                                  
            tmp11 := this.elems;                                                                    
            tmp10 = tmp11.length;                                                                   
            tmp8 = tmp9 % tmp10;                                                                    
            result := tmp7[tmp8];                                                                   
            [Queue.A{this}] newSpec;                                                                
            int tmp12;                                                                              
            int tmp13;                                                                              
            [Queue.A{this}] tmp14;                                                                  
            tmp14 := this.spec;                                                                     
            tmp13 = tmp14.length;                                                                   
            tmp12 = tmp13 - 1;                                                                      
            newSpec = new [Queue.A{this}](tmp12);                                                   
            assume forall int i ::0 <= i && i < this.tail - (this.head + 1) ==> newSpec[i] == this.spec[i + 1];
            this.spec := newSpec;                                                                   
            int tmp15;                                                                              
            int tmp16;                                                                              
            tmp16 := this.head;                                                                     
            tmp15 = tmp16 + 1;                                                                      
            this.head := tmp15;                                                                     
             return result;                                                                         
          } else {                                                                                  
             return 0;                                                                              
          }                                                                                         
        }                                                                                           
        // return -1;                                                                               
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures this.spec == old(this.spec) || this.spec.length == old(this.spec.length + 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == (i == this.spec.length - 1 ? x : old(this.spec[i])));
      }                                                                                             
      public void enqueue(int x) {                                                                  
        synchronized (this) {                                                                       
          bool tmp17;                                                                               
          int tmp18;                                                                                
          int tmp19;                                                                                
          tmp19 := this.tail;                                                                       
          int tmp20;                                                                                
          tmp20 := this.head;                                                                       
          tmp18 = tmp19 - tmp20;                                                                    
          int tmp21;                                                                                
          [Queue.T{this}] tmp22;                                                                    
          tmp22 := this.elems;                                                                      
          tmp21 = tmp22.length;                                                                     
          tmp17 = tmp18 < tmp21;                                                                    
          if (tmp17 /* == this.tail - this.head < this.elems.length */) {                           
            [Queue.T{this}] tmp23;                                                                  
            tmp23 := this.elems;                                                                    
            int tmp24;                                                                              
            int tmp25;                                                                              
            tmp25 := this.tail;                                                                     
            int tmp26;                                                                              
            [Queue.T{this}] tmp27;                                                                  
            tmp27 := this.elems;                                                                    
            tmp26 = tmp27.length;                                                                   
            tmp24 = tmp25 % tmp26;                                                                  
            tmp23[tmp24] := x;                                                                      
            [Queue.A{this}] newSpec;                                                                
            int tmp28;                                                                              
            int tmp29;                                                                              
            [Queue.A{this}] tmp30;                                                                  
            tmp30 := this.spec;                                                                     
            tmp29 = tmp30.length;                                                                   
            tmp28 = tmp29 + 1;                                                                      
            newSpec = new [Queue.A{this}](tmp28);                                                   
            assume forall int i ::0 <= i && i < this.tail - this.head ==> newSpec[i] == this.spec[i];
            assume newSpec[this.tail % this.elems.length] == x;                                     
            this.spec := newSpec;                                                                   
            int tmp31;                                                                              
            int tmp32;                                                                              
            tmp32 := this.tail;                                                                     
            tmp31 = tmp32 + 1;                                                                      
            this.tail := tmp31;                                                                     
          } else {                                                                                  
                                                                                                    
          }                                                                                         
        }                                                                                           
        // return;                                                                                  
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Explicit:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Queue {                                                                                   
      array T = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E]                                                                  
                                                                                                    
      array A = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E]                                                                            
                                                                                                    
       [Queue.T{this}] elems isLocal(this, tid)                                                     
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
      volatile int head isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile int tail isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile [Queue.A{this}] spec isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
      invariant  0 <= this.head && this.head <= this.tail && this.tail - this.head <= this.elems.length;
      invariant  this.elems.length == 512;                                                          
      invariant  this.spec.length == this.tail - this.head;                                         
      invariant  forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == this.elems[this.head + i % this.elems.length];
                                                                                                    
      requires this.elems == [Queue.T{this}].null;                                                  
      requires this.spec == [Queue.A{this}].null;                                                   
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void init() {                                                                          
        assume this.elems == [Queue.T{this}].null;                                                  
        assume this.head == 0;                                                                      
        assume this.tail == 0;                                                                      
        assume this.spec == [Queue.A{this}].null;                                                   
        {                                                                                           
          int tmp1;                                                                                 
          tmp1 = 0;                                                                                 
          this.head := tmp1;                                                                        
          int tmp2;                                                                                 
          tmp2 = 0;                                                                                 
          this.tail := tmp2;                                                                        
          [Queue.T{this}] elems;                                                                    
          elems = new [Queue.T{this}](512);                                                         
          [Queue.A{this}] spec;                                                                     
          spec = new [Queue.A{this}](0);                                                            
          this.elems := elems, this.spec := spec;                                                   
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures this.spec == old(this.spec) || this.spec.length == old(this.spec.length - 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == old(this.spec[i + 1]));
      }                                                                                             
      public int dequeue() {                                                                        
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            bool tmp3;                                                                              
            int tmp4;                                                                               
            int tmp5;                                                                               
            tmp5 := this.tail;                                                                      
            int tmp6;                                                                               
            tmp6 := this.head;                                                                      
            tmp4 = tmp5 - tmp6;                                                                     
            tmp3 = tmp4 > 0;                                                                        
            if (tmp3 /* == this.tail - this.head > 0 */) {                                          
              int result;                                                                           
              [Queue.T{this}] tmp7;                                                                 
              tmp7 := this.elems;                                                                   
              int tmp8;                                                                             
              int tmp9;                                                                             
              tmp9 := this.head;                                                                    
              int tmp10;                                                                            
              [Queue.T{this}] tmp11;                                                                
              tmp11 := this.elems;                                                                  
              tmp10 = tmp11.length;                                                                 
              tmp8 = tmp9 % tmp10;                                                                  
              result := tmp7[tmp8];                                                                 
              [Queue.A{this}] newSpec;                                                              
              int tmp12;                                                                            
              int tmp13;                                                                            
              [Queue.A{this}] tmp14;                                                                
              tmp14 := this.spec;                                                                   
              tmp13 = tmp14.length;                                                                 
              tmp12 = tmp13 - 1;                                                                    
              newSpec = new [Queue.A{this}](tmp12);                                                 
              assume forall int i ::0 <= i && i < this.tail - (this.head + 1) ==> newSpec[i] == this.spec[i + 1];
              this.spec := newSpec;                                                                 
              int tmp15;                                                                            
              int tmp16;                                                                            
              tmp16 := this.head;                                                                   
              tmp15 = tmp16 + 1;                                                                    
              this.head := tmp15;                                                                   
              {                                                                                     
                release(this);                                                                      
                 return result;                                                                     
              }                                                                                     
            } else {                                                                                
              {                                                                                     
                release(this);                                                                      
                 return 0;                                                                          
              }                                                                                     
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return -1;                                                                             
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures this.spec == old(this.spec) || this.spec.length == old(this.spec.length + 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == (i == this.spec.length - 1 ? x : old(this.spec[i])));
      }                                                                                             
      public void enqueue(int x) {                                                                  
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            bool tmp17;                                                                             
            int tmp18;                                                                              
            int tmp19;                                                                              
            tmp19 := this.tail;                                                                     
            int tmp20;                                                                              
            tmp20 := this.head;                                                                     
            tmp18 = tmp19 - tmp20;                                                                  
            int tmp21;                                                                              
            [Queue.T{this}] tmp22;                                                                  
            tmp22 := this.elems;                                                                    
            tmp21 = tmp22.length;                                                                   
            tmp17 = tmp18 < tmp21;                                                                  
            if (tmp17 /* == this.tail - this.head < this.elems.length */) {                         
              [Queue.T{this}] tmp23;                                                                
              tmp23 := this.elems;                                                                  
              int tmp24;                                                                            
              int tmp25;                                                                            
              tmp25 := this.tail;                                                                   
              int tmp26;                                                                            
              [Queue.T{this}] tmp27;                                                                
              tmp27 := this.elems;                                                                  
              tmp26 = tmp27.length;                                                                 
              tmp24 = tmp25 % tmp26;                                                                
              tmp23[tmp24] := x;                                                                    
              [Queue.A{this}] newSpec;                                                              
              int tmp28;                                                                            
              int tmp29;                                                                            
              [Queue.A{this}] tmp30;                                                                
              tmp30 := this.spec;                                                                   
              tmp29 = tmp30.length;                                                                 
              tmp28 = tmp29 + 1;                                                                    
              newSpec = new [Queue.A{this}](tmp28);                                                 
              assume forall int i ::0 <= i && i < this.tail - this.head ==> newSpec[i] == this.spec[i];
              assume newSpec[this.tail % this.elems.length] == x;                                   
              this.spec := newSpec;                                                                 
              int tmp31;                                                                            
              int tmp32;                                                                            
              tmp32 := this.tail;                                                                   
              tmp31 = tmp32 + 1;                                                                    
              this.tail := tmp31;                                                                   
            } else {                                                                                
                                                                                                    
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Inlined:                                                                                           
                                                                                                    
                                                                                                    
                                                                                                    
    class Queue {                                                                                   
      array T = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E]                                                                  
                                                                                                    
      array A = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E]                                                                            
                                                                                                    
       [Queue.T{this}] elems isLocal(this, tid)                                                     
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
      volatile int head isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile int tail isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile [Queue.A{this}] spec isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
      invariant  0 <= this.head && this.head <= this.tail && this.tail - this.head <= this.elems.length;
      invariant  this.elems.length == 512;                                                          
      invariant  this.spec.length == this.tail - this.head;                                         
      invariant  forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == this.elems[this.head + i % this.elems.length];
                                                                                                    
      requires this.elems == [Queue.T{this}].null;                                                  
      requires this.spec == [Queue.A{this}].null;                                                   
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void init() {                                                                          
        assume this.elems == [Queue.T{this}].null;                                                  
        assume this.head == 0;                                                                      
        assume this.tail == 0;                                                                      
        assume this.spec == [Queue.A{this}].null;                                                   
        {                                                                                           
          int tmp1;                                                                                 
          tmp1 = 0;                                                                                 
          this.head := tmp1;                                                                        
          int tmp2;                                                                                 
          tmp2 = 0;                                                                                 
          this.tail := tmp2;                                                                        
          [Queue.T{this}] elems;                                                                    
          elems = new [Queue.T{this}](512);                                                         
          [Queue.A{this}] spec;                                                                     
          spec = new [Queue.A{this}](0);                                                            
          this.elems := elems, this.spec := spec;                                                   
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures this.spec == old(this.spec) || this.spec.length == old(this.spec.length - 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == old(this.spec[i + 1]));
      }                                                                                             
      public int dequeue() {                                                                        
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            bool tmp3;                                                                              
            int tmp4;                                                                               
            int tmp5;                                                                               
            tmp5 := this.tail;                                                                      
            int tmp6;                                                                               
            tmp6 := this.head;                                                                      
            tmp4 = tmp5 - tmp6;                                                                     
            tmp3 = tmp4 > 0;                                                                        
            if (tmp3 /* == this.tail - this.head > 0 */) {                                          
              int result;                                                                           
              [Queue.T{this}] tmp7;                                                                 
              tmp7 := this.elems;                                                                   
              int tmp8;                                                                             
              int tmp9;                                                                             
              tmp9 := this.head;                                                                    
              int tmp10;                                                                            
              [Queue.T{this}] tmp11;                                                                
              tmp11 := this.elems;                                                                  
              tmp10 = tmp11.length;                                                                 
              tmp8 = tmp9 % tmp10;                                                                  
              result := tmp7[tmp8];                                                                 
              [Queue.A{this}] newSpec;                                                              
              int tmp12;                                                                            
              int tmp13;                                                                            
              [Queue.A{this}] tmp14;                                                                
              tmp14 := this.spec;                                                                   
              tmp13 = tmp14.length;                                                                 
              tmp12 = tmp13 - 1;                                                                    
              newSpec = new [Queue.A{this}](tmp12);                                                 
              assume forall int i ::0 <= i && i < this.tail - (this.head + 1) ==> newSpec[i] == this.spec[i + 1];
              this.spec := newSpec;                                                                 
              int tmp15;                                                                            
              int tmp16;                                                                            
              tmp16 := this.head;                                                                   
              tmp15 = tmp16 + 1;                                                                    
              this.head := tmp15;                                                                   
              {                                                                                     
                release(this);                                                                      
                 return result;                                                                     
              }                                                                                     
            } else {                                                                                
              {                                                                                     
                release(this);                                                                      
                 return 0;                                                                          
              }                                                                                     
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return -1;                                                                             
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures this.spec == old(this.spec) || this.spec.length == old(this.spec.length + 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == (i == this.spec.length - 1 ? x : old(this.spec[i])));
      }                                                                                             
      public void enqueue(int x) {                                                                  
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            bool tmp17;                                                                             
            int tmp18;                                                                              
            int tmp19;                                                                              
            tmp19 := this.tail;                                                                     
            int tmp20;                                                                              
            tmp20 := this.head;                                                                     
            tmp18 = tmp19 - tmp20;                                                                  
            int tmp21;                                                                              
            [Queue.T{this}] tmp22;                                                                  
            tmp22 := this.elems;                                                                    
            tmp21 = tmp22.length;                                                                   
            tmp17 = tmp18 < tmp21;                                                                  
            if (tmp17 /* == this.tail - this.head < this.elems.length */) {                         
              [Queue.T{this}] tmp23;                                                                
              tmp23 := this.elems;                                                                  
              int tmp24;                                                                            
              int tmp25;                                                                            
              tmp25 := this.tail;                                                                   
              int tmp26;                                                                            
              [Queue.T{this}] tmp27;                                                                
              tmp27 := this.elems;                                                                  
              tmp26 = tmp27.length;                                                                 
              tmp24 = tmp25 % tmp26;                                                                
              tmp23[tmp24] := x;                                                                    
              [Queue.A{this}] newSpec;                                                              
              int tmp28;                                                                            
              int tmp29;                                                                            
              [Queue.A{this}] tmp30;                                                                
              tmp30 := this.spec;                                                                   
              tmp29 = tmp30.length;                                                                 
              tmp28 = tmp29 + 1;                                                                    
              newSpec = new [Queue.A{this}](tmp28);                                                 
              assume forall int i ::0 <= i && i < this.tail - this.head ==> newSpec[i] == this.spec[i];
              assume newSpec[this.tail % this.elems.length] == x;                                   
              this.spec := newSpec;                                                                 
              int tmp31;                                                                            
              int tmp32;                                                                            
              tmp32 := this.tail;                                                                   
              tmp31 = tmp32 + 1;                                                                    
              this.tail := tmp31;                                                                   
            } else {                                                                                
                                                                                                    
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Prepared:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Queue {                                                                                   
      array T = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E]                                                                  
                                                                                                    
      array A = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E]                                                                            
                                                                                                    
       [Queue.T{this}] elems isLocal(this, tid)                                                     
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
      volatile int head isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile int tail isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile [Queue.A{this}] spec isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
      invariant  0 <= this.head && this.head <= this.tail && this.tail - this.head <= this.elems.length;
      invariant  this.elems.length == 512;                                                          
      invariant  this.spec.length == this.tail - this.head;                                         
      invariant  forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == this.elems[this.head + i % this.elems.length];
                                                                                                    
      requires this.elems == [Queue.T{this}].null;                                                  
      requires this.spec == [Queue.A{this}].null;                                                   
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void init() {                                                                          
        assume this.elems == [Queue.T{this}].null;                                                  
        assume this.head == 0;                                                                      
        assume this.tail == 0;                                                                      
        assume this.spec == [Queue.A{this}].null;                                                   
        {                                                                                           
          int tmp1;                                                                                 
          tmp1 = 0;                                                                                 
          this.head := tmp1;                                                                        
          int tmp2;                                                                                 
          tmp2 = 0;                                                                                 
          this.tail := tmp2;                                                                        
          [Queue.T{this}] elems;                                                                    
          elems = new [Queue.T{this}](512);                                                         
          [Queue.A{this}] spec;                                                                     
          spec = new [Queue.A{this}](0);                                                            
          this.elems := elems, this.spec := spec;                                                   
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures this.spec == old(this.spec) || this.spec.length == old(this.spec.length - 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == old(this.spec[i + 1]));
      }                                                                                             
      public int dequeue() {                                                                        
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            bool tmp3;                                                                              
            int tmp4;                                                                               
            int tmp5;                                                                               
            tmp5 := this.tail;                                                                      
            int tmp6;                                                                               
            tmp6 := this.head;                                                                      
            tmp4 = tmp5 - tmp6;                                                                     
            tmp3 = tmp4 > 0;                                                                        
            if (tmp3 /* == this.tail - this.head > 0 */) {                                          
              int result;                                                                           
              [Queue.T{this}] tmp7;                                                                 
              tmp7 := this.elems;                                                                   
              int tmp8;                                                                             
              int tmp9;                                                                             
              tmp9 := this.head;                                                                    
              int tmp10;                                                                            
              [Queue.T{this}] tmp11;                                                                
              tmp11 := this.elems;                                                                  
              tmp10 = tmp11.length;                                                                 
              tmp8 = tmp9 % tmp10;                                                                  
              result := tmp7[tmp8];                                                                 
              [Queue.A{this}] newSpec;                                                              
              int tmp12;                                                                            
              int tmp13;                                                                            
              [Queue.A{this}] tmp14;                                                                
              tmp14 := this.spec;                                                                   
              tmp13 = tmp14.length;                                                                 
              tmp12 = tmp13 - 1;                                                                    
              newSpec = new [Queue.A{this}](tmp12);                                                 
              assume forall int i ::0 <= i && i < this.tail - (this.head + 1) ==> newSpec[i] == this.spec[i + 1];
              this.spec := newSpec;                                                                 
              int tmp15;                                                                            
              int tmp16;                                                                            
              tmp16 := this.head;                                                                   
              tmp15 = tmp16 + 1;                                                                    
              this.head := tmp15;                                                                   
              {                                                                                     
                release(this);                                                                      
                 return result;                                                                     
              }                                                                                     
            } else {                                                                                
              {                                                                                     
                release(this);                                                                      
                 return 0;                                                                          
              }                                                                                     
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return -1;                                                                             
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
        modifies this;                                                                              
        modifies this.elems;                                                                        
        modifies this.elems;                                                                        
        modifies this.spec;                                                                         
        ensures this.spec == old(this.spec) || this.spec.length == old(this.spec.length + 1) && (forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == (i == this.spec.length - 1 ? x : old(this.spec[i])));
      }                                                                                             
      public void enqueue(int x) {                                                                  
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            bool tmp17;                                                                             
            int tmp18;                                                                              
            int tmp19;                                                                              
            tmp19 := this.tail;                                                                     
            int tmp20;                                                                              
            tmp20 := this.head;                                                                     
            tmp18 = tmp19 - tmp20;                                                                  
            int tmp21;                                                                              
            [Queue.T{this}] tmp22;                                                                  
            tmp22 := this.elems;                                                                    
            tmp21 = tmp22.length;                                                                   
            tmp17 = tmp18 < tmp21;                                                                  
            if (tmp17 /* == this.tail - this.head < this.elems.length */) {                         
              [Queue.T{this}] tmp23;                                                                
              tmp23 := this.elems;                                                                  
              int tmp24;                                                                            
              int tmp25;                                                                            
              tmp25 := this.tail;                                                                   
              int tmp26;                                                                            
              [Queue.T{this}] tmp27;                                                                
              tmp27 := this.elems;                                                                  
              tmp26 = tmp27.length;                                                                 
              tmp24 = tmp25 % tmp26;                                                                
              tmp23[tmp24] := x;                                                                    
              [Queue.A{this}] newSpec;                                                              
              int tmp28;                                                                            
              int tmp29;                                                                            
              [Queue.A{this}] tmp30;                                                                
              tmp30 := this.spec;                                                                   
              tmp29 = tmp30.length;                                                                 
              tmp28 = tmp29 + 1;                                                                    
              newSpec = new [Queue.A{this}](tmp28);                                                 
              assume forall int i ::0 <= i && i < this.tail - this.head ==> newSpec[i] == this.spec[i];
              assume newSpec[this.tail % this.elems.length] == x;                                   
              this.spec := newSpec;                                                                 
              int tmp31;                                                                            
              int tmp32;                                                                            
              tmp32 := this.tail;                                                                   
              tmp31 = tmp32 + 1;                                                                    
              this.tail := tmp31;                                                                   
            } else {                                                                                
                                                                                                    
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
 */                                                                                                 
                                                                                                    
//// Background                                                                                     
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * Tid                                                                                              
 */                                                                                                 
 type Tid = int;  // make int so you can iterate over Tids                                          
 const unique Tid.null: Tid;                                                                        
 axiom Tid.null == -1;                                                                              
                                                                                                    
 function {:inline} ValidTid(tid : Tid): bool {                                                     
  tid != Tid.null && tid >= 0                                                                       
 }                                                                                                  
                                                                                                    
 type{:datatype} State;                                                                             
 function{:constructor} NULL(): State;                                                              
 function{:constructor} FRESH(): State;                                                             
 function{:constructor} LOCAL(t: Tid): State;                                                       
 function{:constructor} SHARED(): State;                                                            
                                                                                                    
 function {:inline} isNull(state: State) : bool {                                                   
  state == NULL()                                                                                   
 }                                                                                                  
                                                                                                    
 function {:inline} isFresh(state: State) : bool {                                                  
  state == FRESH()                                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} isShared(state: State) : bool {                                                 
  state == SHARED()                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocal(state: State, t: Tid) : bool {                                          
  state == LOCAL(t)                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocalAssignable(state: State, t: Tid) : bool {                                
  state == LOCAL(t) || state == SHARED() || state == NULL()                                         
 }                                                                                                  
                                                                                                    
 function {:inline} isSharedAssignable(state: State) : bool {                                       
  state == SHARED() || state == NULL()                                                              
 }                                                                                                  
                                                                                                    
 function {:inline} isAccessible(state: State, t: Tid) : bool {                                     
  state == LOCAL(t) || state == SHARED()                                                            
 }                                                                                                  
                                                                                                    
 function {:inline} isAllocated(state: State) : bool {                                              
  !isFresh(state) && !isNull(state)                                                                 
 }                                                                                                  
                                                                                                    
                                                                                                    
 function MOD(x:int, y:int): int;                                                                   
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * For triggers                                                                                     
 */                                                                                                 
 function {:inline false} _trigger(i: int): bool {  true  }                                         
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 type Phase;                                                                                        
 const unique PreCommit : Phase;                                                                    
 const unique PostCommit : Phase;                                                                   
 const unique PhaseError : Phase;                                                                   
                                                                                                    
 function {:inline} transition(p: Phase, m: Mover): Phase {                                         
  if (m == _B) then                                                                                 
   p                                                                                                
  else if (m == _R) then                                                                            
   if (p == PreCommit) then                                                                         
    PreCommit                                                                                       
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _L) then                                                                            
   if (p == PostCommit) then                                                                        
    PostCommit                                                                                      
   else if (p == PreCommit) then                                                                    
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _N) then                                                                            
   if (p == PreCommit) then                                                                         
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else                                                                                              
   PhaseError // m == E or m == I                                                                   
 }                                                                                                  
                                                                                                    
                                                                                                    
 type Mover;                                                                                        
 const unique _B : Mover;                                                                           
 const unique _R : Mover;                                                                           
 const unique _L : Mover;                                                                           
 const unique _N : Mover;                                                                           
 const unique _E : Mover;                                                                           
                                                                                                    
 axiom (forall m : Mover :: m == _B || m == _R || m == _L || m == _N || m == _E);                   
                                                                                                    
 function {:inline} leq(m1: Mover, m2: Mover) : bool {                                              
  if (m1 == _B) then                                                                                
   true                                                                                             
  else if (m1 == _R) then                                                                           
   m2 == _R || m2 == _N || m2 == _E                                                                 
  else if (m1 == _L) then                                                                           
   m2 == _L || m2 == _N || m2 == _E                                                                 
  else if (m1 == _N) then                                                                           
   m2 == _N || m2 == _E                                                                             
  else if (m1 == _E) then                                                                           
   m2 == _E                                                                                         
  else                                                                                              
   false // should never happen...                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} lt(m1: Mover, m2: Mover) : bool { m1 != m2 && leq(m1, m2) }                     
                                                                                                    
 function {:inline} isError(m : Mover) : bool {                                                     
  m == _E                                                                                           
 }                                                                                                  
                                                                                                    
 function {:inline} eqOrError(m : Mover, n : Mover) : bool {                                        
  m == n || m == _E                                                                                 
 }                                                                                                  
                                                                                                    
 type{:datatype} MoverPath;                                                                         
 function{:constructor} moverPath(m:Mover, p:int):MoverPath;                                        
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// axioms                                                                                         
                                                                                                    
                                                                                                    
//// classes                                                                                        
                                                                                                    
                                                                                                    
/*** Class Decl Queue ***/                                                                          
                                                                                                    
type Queue;                                                                                         
const unique Queue.null: Queue;                                                                     
var Queue._state: [Queue]State;                                                                     
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var Queue.elems: [Queue]Array.Queue.T;                                                              
                                                                                                    
function {:inline} ReadEval.Queue.elems(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Array.Queue.T.null;                                                               
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Queue.elems(tid: Tid,this : Queue,newValue: Array.Queue.T,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Queue.head: [Queue]int;                                                                         
                                                                                                    
function {:inline} ReadEval.Queue.head(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Queue.head(tid: Tid,this : Queue,newValue: int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Queue.tail: [Queue]int;                                                                         
                                                                                                    
function {:inline} ReadEval.Queue.tail(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Queue.tail(tid: Tid,this : Queue,newValue: int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Queue.spec: [Queue]Array.Queue.A;                                                               
                                                                                                    
function {:inline} ReadEval.Queue.spec(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Array.Queue.A.null;                                                               
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Queue.spec(tid: Tid,this : Queue,newValue: Array.Queue.A,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Queue._lock: [Queue]Tid;                                                                        
                                                                                                    
function {:inline} ReadEval.Queue._lock(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Queue._lock[this]==tid)) then                                                               
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Queue._lock[this]==Tid.null)&&(newValue==tid))) then                                       
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Queue._lock[this]==tid)&&(newValue==Tid.null))) then                                      
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Queue._lock(tid: Tid,this : Queue,newValue: Tid,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Queue._lock[this]==tid)) then                                                               
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Queue._lock[this]==Tid.null)&&(newValue==tid))) then                                       
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Queue._lock[this]==tid)&&(newValue==Tid.null))) then                                      
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
function {:inline} Invariant.Queue.3717290(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
 (((0<=Queue.head[this])&&(Queue.head[this]<=Queue.tail[this]))&&((Queue.tail[this]-Queue.head[this])<=Array.Queue.T._length[Queue.elems[this]]))
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Queue.3717298(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
 (Array.Queue.T._length[Queue.elems[this]]==512)                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Queue.3717310(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
 (Array.Queue.A._length[Queue.spec[this]]==(Queue.tail[this]-Queue.head[this]))                     
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Queue.3717348(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
 (forall i: int ::  ((((0<=i)&&(i<Array.Queue.A._length[Queue.spec[this]]))==>(Array.Queue.A._elems[Queue.spec[this]][i]==Array.Queue.T._elems[Queue.elems[this]][MOD((Queue.head[this]+i), Array.Queue.T._length[Queue.elems[this]])]))))
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
procedure  Queue.init(tid:Tid, this : Queue)                                                        
modifies Queue._state;                                                                              
modifies Queue.elems;                                                                               
modifies Queue.head;                                                                                
modifies Queue.tail;                                                                                
modifies Queue.spec;                                                                                
modifies Queue._lock;                                                                               
modifies Array.Queue.T._state;                                                                      
modifies Array.Queue.T._elems;                                                                      
modifies Array.Queue.A._state;                                                                      
modifies Array.Queue.A._elems;                                                                      
                                                                                                    
requires ValidTid(tid);                                                                                    // (26.5): Bad tid
requires isLocal(Queue._state[this], tid);                                                          
                                                                                                    
requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
requires (Queue.elems[this]==Array.Queue.T.null);                                                   
                                                                                                    
requires (Queue.spec[this]==Array.Queue.A.null);                                                    
                                                                                                    
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && _this != this ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (26.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && _this != this ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (26.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && _this != this ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (26.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && _this != this ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (26.5): Object invariant may not hold.
                                                                                                    
ensures StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (26.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (26.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (26.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (26.5): Object invariant may not hold.
{                                                                                                   
 var _pc3723884: Phase;                                                                             
 var Queue._lock3723882: [Queue]Tid;                                                                
 var Array.Queue.T._elems3723882: [Array.Queue.T]([int]int);                                        
 var path3723846: int;                                                                              
 var mover3723879: Mover;                                                                           
 var elems3723879: Array.Queue.T;                                                                   
 var Queue.elems3723846: [Queue]Array.Queue.T;                                                      
 var Array.Queue.A._state3723846: [Array.Queue.A]State;                                             
 var tmp23723882: int;                                                                              
 var $recorded.state3723846: int;                                                                   
 var tmp13723882: int;                                                                              
 var Array.Queue.T._state3723882: [Array.Queue.T]State;                                             
 var Queue._lock3723884: [Queue]Tid;                                                                
 var Array.Queue.T._length3723879: [Array.Queue.T]int;                                              
 var tid3723846: Tid;                                                                               
 var $recorded.state3723884: int;                                                                   
 var Array.Queue.T._elems3723856: [Array.Queue.T]([int]int);                                        
 var Array.Queue.T._elems3723846: [Array.Queue.T]([int]int);                                        
 var this3723856: Queue;                                                                            
 var tmp13723856: int;                                                                              
 var Queue.tail3723846: [Queue]int;                                                                 
 var this3723879: Queue;                                                                            
 var Queue.head3723856: [Queue]int;                                                                 
 var mover3723882: Mover;                                                                           
 var Queue.spec3723879: [Queue]Array.Queue.A;                                                       
 var Queue.elems3723882: [Queue]Array.Queue.T;                                                      
 var Queue._state3723884: [Queue]State;                                                             
 var Queue._lock3723846: [Queue]Tid;                                                                
 var Array.Queue.A._length3723884: [Array.Queue.A]int;                                              
 var Queue.head3723846: [Queue]int;                                                                 
 var $recorded.state3723879: int;                                                                   
 var moverPath3723879: MoverPath;                                                                   
 var Queue.head3723884: [Queue]int;                                                                 
 var tmp13723846: int;                                                                              
 var _pc3723856: Phase;                                                                             
 var tmp23723856: int;                                                                              
 var this3723884: Queue;                                                                            
 var elems: Array.Queue.T;                                                                          
 var Array.Queue.T._elems3723884: [Array.Queue.T]([int]int);                                        
 var Array.Queue.A._elems3723884: [Array.Queue.A]([int]int);                                        
 var moverPath3723882: MoverPath;                                                                   
 var _pc3723879: Phase;                                                                             
 var Array.Queue.A._length3723879: [Array.Queue.A]int;                                              
 var Array.Queue.T._length3723856: [Array.Queue.T]int;                                              
 var Array.Queue.T._state3723879: [Array.Queue.T]State;                                             
 var Queue.head3723879: [Queue]int;                                                                 
 var spec: Array.Queue.A;                                                                           
 var Queue.spec3723846: [Queue]Array.Queue.A;                                                       
 var Queue.tail3723884: [Queue]int;                                                                 
 var Array.Queue.A._state3723879: [Array.Queue.A]State;                                             
 var Queue._state3723879: [Queue]State;                                                             
 var Array.Queue.T._elems3723879: [Array.Queue.T]([int]int);                                        
 var Queue.elems3723856: [Queue]Array.Queue.T;                                                      
 var Queue._state3723846: [Queue]State;                                                             
 var Queue.elems3723879: [Queue]Array.Queue.T;                                                      
 var this3723882: Queue;                                                                            
 var Queue._lock3723879: [Queue]Tid;                                                                
 var Queue._lock3723856: [Queue]Tid;                                                                
 var Array.Queue.A._elems3723879: [Array.Queue.A]([int]int);                                        
 var tid3723856: Tid;                                                                               
 var spec3723879: Array.Queue.A;                                                                    
 var tmp1: int;                                                                                     
 var Array.Queue.A._length3723856: [Array.Queue.A]int;                                              
 var mover3723846: Mover;                                                                           
 var Array.Queue.T._state3723846: [Array.Queue.T]State;                                             
 var mover3723856: Mover;                                                                           
 var Array.Queue.A._state3723856: [Array.Queue.A]State;                                             
 var moverPath3723846: MoverPath;                                                                   
 var Array.Queue.T._state3723884: [Array.Queue.T]State;                                             
 var tid3723879: Tid;                                                                               
 var _pc3723882: Phase;                                                                             
 var path3723856: int;                                                                              
 var elems3723882: Array.Queue.T;                                                                   
 var this3723846: Queue;                                                                            
 var Queue.head3723882: [Queue]int;                                                                 
 var Queue.elems3723884: [Queue]Array.Queue.T;                                                      
 var Queue.tail3723856: [Queue]int;                                                                 
 var Queue.spec3723856: [Queue]Array.Queue.A;                                                       
 var Array.Queue.A._state3723882: [Array.Queue.A]State;                                             
 var Array.Queue.T._state3723856: [Array.Queue.T]State;                                             
 var tid3723882: Tid;                                                                               
 var tmp23723884: int;                                                                              
 var spec3723884: Array.Queue.A;                                                                    
 var Array.Queue.A._elems3723856: [Array.Queue.A]([int]int);                                        
 var spec3723882: Array.Queue.A;                                                                    
 var Queue.spec3723882: [Queue]Array.Queue.A;                                                       
 var path3723879: int;                                                                              
 var path3723882: int;                                                                              
 var Queue.spec3723884: [Queue]Array.Queue.A;                                                       
 var tmp13723884: int;                                                                              
 var Array.Queue.T._length3723882: [Array.Queue.T]int;                                              
 var Queue.tail3723882: [Queue]int;                                                                 
 var Queue._state3723856: [Queue]State;                                                             
 var $recorded.state3723882: int;                                                                   
 var tid3723884: Tid;                                                                               
 var Array.Queue.A._length3723882: [Array.Queue.A]int;                                              
 var tmp2: int;                                                                                     
 var tmp23723879: int;                                                                              
 var moverPath3723856: MoverPath;                                                                   
 var Queue.tail3723879: [Queue]int;                                                                 
 var $recorded.state3723856: int;                                                                   
 var Array.Queue.T._length3723884: [Array.Queue.T]int;                                              
 var _pc3723846: Phase;                                                                             
 var Array.Queue.A._state3723884: [Array.Queue.A]State;                                             
 var Array.Queue.A._elems3723882: [Array.Queue.A]([int]int);                                        
 var Array.Queue.T._length3723846: [Array.Queue.T]int;                                              
 var Array.Queue.A._elems3723846: [Array.Queue.A]([int]int);                                        
 var Queue._state3723882: [Queue]State;                                                             
 var Array.Queue.A._length3723846: [Array.Queue.A]int;                                              
 var elems3723884: Array.Queue.T;                                                                   
 var tmp13723879: int;                                                                              
                                                                                                    
 var _pc : Phase;                                                                                   
 _pc := PreCommit;                                                                                  
                                                                                                    
 assert true && leq(m#moverPath(ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)),_R);       // (26.5): Can only have right-mover memory accesses in requires clause
 assert true && leq(m#moverPath(ReadEval.Queue.spec(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)),_R);       // (26.5): Can only have right-mover memory accesses in requires clause
                                                                                                    
                                                                                                    
 // 26.5: assume this.elems == [Queue.T{this}].null;                                                
                                                                                                    
 assume (Queue.elems[this]==Array.Queue.T.null);                                                    
                                                                                                    
 // 26.5: assume this.head == 0;                                                                    
                                                                                                    
 assume (Queue.head[this]==0);                                                                      
                                                                                                    
 // 26.5: assume this.tail == 0;                                                                    
                                                                                                    
 assume (Queue.tail[this]==0);                                                                      
                                                                                                    
 // 26.5: assume this.spec == [Queue.A{this}].null;                                                 
                                                                                                    
 assume (Queue.spec[this]==Array.Queue.A.null);                                                     
                                                                                                    
 // 27.9: int tmp1;                                                                                 
                                                                                                    
                                                                                                    
 // 27.9: tmp1 = 0;                                                                                 
                                                                                                    
 tmp1 := 0;                                                                                         
                                                                                                    
                                                                                                    
 // 27.9: this.head := tmp1;                                                                        
                                                                                                    
                                                                                                    
 moverPath3723846 := WriteEval.Queue.head(tid: Tid,this: Queue,tmp1: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3723846 := m#moverPath(moverPath3723846);                                                     
 path3723846 := p#moverPath(moverPath3723846);                                                      
 assume Queue._state3723846 == Queue._state && Queue.elems3723846 == Queue.elems && Queue.head3723846 == Queue.head && Queue.tail3723846 == Queue.tail && Queue.spec3723846 == Queue.spec && Queue._lock3723846 == Queue._lock && Array.Queue.T._state3723846 == Array.Queue.T._state && Array.Queue.T._elems3723846 == Array.Queue.T._elems && Array.Queue.T._length3723846 == Array.Queue.T._length && Array.Queue.A._state3723846 == Array.Queue.A._state && Array.Queue.A._elems3723846 == Array.Queue.A._elems && Array.Queue.A._length3723846 == Array.Queue.A._length && tmp13723846 == tmp1 && this3723846 == this && tid3723846 == tid && _pc3723846 == _pc;
 assume $recorded.state3723846 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (27.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 _pc := transition(_pc, mover3723846);                                                              
 assert _pc != PhaseError;                                                                                 // (27.9): Reduction failure
 Queue.head[this] := tmp1;                                                                          
                                                                                                    
 // 28.9: int tmp2;                                                                                 
                                                                                                    
                                                                                                    
 // 28.9: tmp2 = 0;                                                                                 
                                                                                                    
 tmp2 := 0;                                                                                         
                                                                                                    
                                                                                                    
 // 28.9: this.tail := tmp2;                                                                        
                                                                                                    
                                                                                                    
 moverPath3723856 := WriteEval.Queue.tail(tid: Tid,this: Queue,tmp2: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3723856 := m#moverPath(moverPath3723856);                                                     
 path3723856 := p#moverPath(moverPath3723856);                                                      
 assume Queue._state3723856 == Queue._state && Queue.elems3723856 == Queue.elems && Queue.head3723856 == Queue.head && Queue.tail3723856 == Queue.tail && Queue.spec3723856 == Queue.spec && Queue._lock3723856 == Queue._lock && Array.Queue.T._state3723856 == Array.Queue.T._state && Array.Queue.T._elems3723856 == Array.Queue.T._elems && Array.Queue.T._length3723856 == Array.Queue.T._length && Array.Queue.A._state3723856 == Array.Queue.A._state && Array.Queue.A._elems3723856 == Array.Queue.A._elems && Array.Queue.A._length3723856 == Array.Queue.A._length && tmp23723856 == tmp2 && tmp13723856 == tmp1 && this3723856 == this && tid3723856 == tid && _pc3723856 == _pc;
 assume $recorded.state3723856 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (28.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 _pc := transition(_pc, mover3723856);                                                              
 assert _pc != PhaseError;                                                                                 // (28.9): Reduction failure
 Queue.tail[this] := tmp2;                                                                          
                                                                                                    
 // 29.9: [Queue.T{this}] elems;                                                                    
                                                                                                    
                                                                                                    
 // 29.9: elems = new [Queue.T{this}](512);                                                         
                                                                                                    
 havoc elems;                                                                                       
 assume isFresh(Array.Queue.T._state[elems]);                                                       
 assume Array.Queue.T._length[elems] == 512;                                                        
 assume Array.Queue.T._this[elems] == this;                                                         
 Array.Queue.T._state[elems] := LOCAL(tid);                                                         
 assume (forall _i : int :: 0 <= _i ==> Array.Queue.T._elems[elems][_i] == 0);                      
                                                                                                    
 // 30.9: [Queue.A{this}] spec;                                                                     
                                                                                                    
                                                                                                    
 // 30.9: spec = new [Queue.A{this}](0);                                                            
                                                                                                    
 havoc spec;                                                                                        
 assume isFresh(Array.Queue.A._state[spec]);                                                        
 assume Array.Queue.A._length[spec] == 0;                                                           
 assume Array.Queue.A._this[spec] == this;                                                          
 Array.Queue.A._state[spec] := LOCAL(tid);                                                          
 assume (forall _i : int :: 0 <= _i ==> Array.Queue.A._elems[spec][_i] == 0);                       
                                                                                                    
 // 31.9: this.elems := elems, this.spec := spec;                                                   
                                                                                                    
 assert _pc == PreCommit;                                                                                  // (31.9): Local Write block must appear pre commit.
                                                                                                    
 // 31.9: this.elems := elems;                                                                      
                                                                                                    
                                                                                                    
 moverPath3723879 := WriteEval.Queue.elems(tid: Tid,this: Queue,elems: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3723879 := m#moverPath(moverPath3723879);                                                     
 path3723879 := p#moverPath(moverPath3723879);                                                      
 assume Queue._state3723879 == Queue._state && Queue.elems3723879 == Queue.elems && Queue.head3723879 == Queue.head && Queue.tail3723879 == Queue.tail && Queue.spec3723879 == Queue.spec && Queue._lock3723879 == Queue._lock && Array.Queue.T._state3723879 == Array.Queue.T._state && Array.Queue.T._elems3723879 == Array.Queue.T._elems && Array.Queue.T._length3723879 == Array.Queue.T._length && Array.Queue.A._state3723879 == Array.Queue.A._state && Array.Queue.A._elems3723879 == Array.Queue.A._elems && Array.Queue.A._length3723879 == Array.Queue.A._length && spec3723879 == spec && elems3723879 == elems && tmp23723879 == tmp2 && tmp13723879 == tmp1 && this3723879 == this && tid3723879 == tid && _pc3723879 == _pc;
 assume $recorded.state3723879 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (31.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3723879);                                                              
 assert _pc != PhaseError;                                                                                 // (31.9): Reduction failure
 assert _pc == PreCommit;                                                                                  // (31.9): Local Write block can only include right-movers.
 Queue.elems[this] := elems;                                                                        
                                                                                                    
 // 31.29: this.spec := spec;                                                                       
                                                                                                    
                                                                                                    
 moverPath3723882 := WriteEval.Queue.spec(tid: Tid,this: Queue,spec: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3723882 := m#moverPath(moverPath3723882);                                                     
 path3723882 := p#moverPath(moverPath3723882);                                                      
 assume Queue._state3723882 == Queue._state && Queue.elems3723882 == Queue.elems && Queue.head3723882 == Queue.head && Queue.tail3723882 == Queue.tail && Queue.spec3723882 == Queue.spec && Queue._lock3723882 == Queue._lock && Array.Queue.T._state3723882 == Array.Queue.T._state && Array.Queue.T._elems3723882 == Array.Queue.T._elems && Array.Queue.T._length3723882 == Array.Queue.T._length && Array.Queue.A._state3723882 == Array.Queue.A._state && Array.Queue.A._elems3723882 == Array.Queue.A._elems && Array.Queue.A._length3723882 == Array.Queue.A._length && spec3723882 == spec && elems3723882 == elems && tmp23723882 == tmp2 && tmp13723882 == tmp1 && this3723882 == this && tid3723882 == tid && _pc3723882 == _pc;
 assume $recorded.state3723882 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (31.29): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3723882);                                                              
 assert _pc != PhaseError;                                                                                 // (31.29): Reduction failure
 assert _pc == PreCommit;                                                                                  // (31.29): Local Write block can only include right-movers.
 Queue.spec[this] := spec;                                                                          
 assert isLocal(Array.Queue.T._state[elems], tid);                                                         // (31.9): Can only have local designators in Local Write block.
 assert isLocal(Array.Queue.A._state[spec], tid);                                                          // (31.29): Can only have local designators in Local Write block.
 Array.Queue.T._state[elems] := SHARED();                                                           
 Queue._state[Array.Queue.T._this[elems]] := SHARED();                                              
 Array.Queue.A._state[spec] := SHARED();                                                            
 Queue._state[Array.Queue.A._this[spec]] := SHARED();                                               
 Queue._state[Array.Queue.T._this[elems]] := SHARED();                                              
 assert isSharedAssignable(Array.Queue.T._state[Queue.elems[Array.Queue.T._this[elems]]]);                 // (31.9): elems became shared, but Array.Queue.T._this[elems].elems may not be shared.
 assert isSharedAssignable(Array.Queue.A._state[Queue.spec[Array.Queue.T._this[elems]]]);                  // (31.9): elems became shared, but Array.Queue.T._this[elems].spec may not be shared.
 Queue._state[Array.Queue.A._this[spec]] := SHARED();                                               
 assert isSharedAssignable(Array.Queue.T._state[Queue.elems[Array.Queue.A._this[spec]]]);                  // (31.29): spec became shared, but Array.Queue.A._this[spec].elems may not be shared.
 assert isSharedAssignable(Array.Queue.A._state[Queue.spec[Array.Queue.A._this[spec]]]);                   // (31.29): spec became shared, but Array.Queue.A._this[spec].spec may not be shared.
                                                                                                    
 // 26.21: // return;                                                                               
                                                                                                    
 assume Queue._state3723884 == Queue._state && Queue.elems3723884 == Queue.elems && Queue.head3723884 == Queue.head && Queue.tail3723884 == Queue.tail && Queue.spec3723884 == Queue.spec && Queue._lock3723884 == Queue._lock && Array.Queue.T._state3723884 == Array.Queue.T._state && Array.Queue.T._elems3723884 == Array.Queue.T._elems && Array.Queue.T._length3723884 == Array.Queue.T._length && Array.Queue.A._state3723884 == Array.Queue.A._state && Array.Queue.A._elems3723884 == Array.Queue.A._elems && Array.Queue.A._length3723884 == Array.Queue.A._length && spec3723884 == spec && elems3723884 == elems && tmp23723884 == tmp2 && tmp13723884 == tmp1 && this3723884 == this && tid3723884 == tid;
 assume $recorded.state3723884 == 1;                                                                
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (26.21): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (26.21): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (26.21): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (26.21): Object invariant may not hold.
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
procedure  Queue.dequeue(tid:Tid, this : Queue)                                                     
returns ($result : int)                                                                             
modifies Queue._state;                                                                              
modifies Queue.elems;                                                                               
modifies Queue.head;                                                                                
modifies Queue.tail;                                                                                
modifies Queue.spec;                                                                                
modifies Queue._lock;                                                                               
modifies Array.Queue.T._state;                                                                      
modifies Array.Queue.T._elems;                                                                      
modifies Array.Queue.A._state;                                                                      
modifies Array.Queue.A._elems;                                                                      
                                                                                                    
requires ValidTid(tid);                                                                                    // (35.5): Bad tid
requires isShared(Queue._state[this]);                                                                     // (35.5): this is not global
                                                                                                    
requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (35.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (35.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (35.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (35.5): Object invariant may not hold.
                                                                                                    
ensures StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (35.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (35.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (35.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (35.5): Object invariant may not hold.
{                                                                                                   
 var Array.Queue.T._length3724039: [Array.Queue.T]int;                                              
 var tmp53723964: int;                                                                              
 var Queue.tail3724039: [Queue]int;                                                                 
 var tmp113723950: Array.Queue.T;                                                                   
 var result: int;                                                                                   
 var Queue._lock3723964: [Queue]Tid;                                                                
 var moverPath3724048: MoverPath;                                                                   
 var Queue.elems3724069: [Queue]Array.Queue.T;                                                      
 var tmp93724058: int;                                                                              
 var Queue._state3723908: [Queue]State;                                                             
 var tmp33724062: bool;                                                                             
 var path3724048: int;                                                                              
 var mover3724058: Mover;                                                                           
 var Array.Queue.A._length3723964: [Array.Queue.A]int;                                              
 var mover3723950: Mover;                                                                           
 var path3723931: int;                                                                              
 var Queue._lock3724079: [Queue]Tid;                                                                
 var Array.Queue.A._elems3724048: [Array.Queue.A]([int]int);                                        
 var $result3723964: int;                                                                           
 var tmp33724039: bool;                                                                             
 var Array.Queue.A._length3723902: [Array.Queue.A]int;                                              
 var tmp43724062: int;                                                                              
 var tmp83723981: int;                                                                              
 var tmp63723950: int;                                                                              
 var tmp123724062: int;                                                                             
 var $result3724048: int;                                                                           
 var Queue.tail3723964: [Queue]int;                                                                 
 var tid3723902: Tid;                                                                               
 var tid3724048: Tid;                                                                               
 var moverPath3723908: MoverPath;                                                                   
 var _pc3723940: Phase;                                                                             
 var Queue.tail3723950: [Queue]int;                                                                 
 var tmp63724069: int;                                                                              
 var Queue.head3723931: [Queue]int;                                                                 
 var _pc3724048: Phase;                                                                             
 var tmp103724039: int;                                                                             
 var this3723931: Queue;                                                                            
 var Array.Queue.A._state3724062: [Array.Queue.A]State;                                             
 var Array.Queue.T._length3723931: [Array.Queue.T]int;                                              
 var Array.Queue.T._state3724039: [Array.Queue.T]State;                                             
 var tmp133723981: int;                                                                             
 var tmp43723950: int;                                                                              
 var Array.Queue.A._state3723964: [Array.Queue.A]State;                                             
 var tmp5: int;                                                                                     
 var tmp123724058: int;                                                                             
 var Queue.spec3723950: [Queue]Array.Queue.A;                                                       
 var tmp43723940: int;                                                                              
 var tmp123724039: int;                                                                             
 var tid3723908: Tid;                                                                               
 var Array.Queue.A._state3724048: [Array.Queue.A]State;                                             
 var Queue.spec3723981: [Queue]Array.Queue.A;                                                       
 var tmp53724039: int;                                                                              
 var $result3723931: int;                                                                           
 var moverPath3723931: MoverPath;                                                                   
 var Array.Queue.A._length3724069: [Array.Queue.A]int;                                              
 var _pc3724039: Phase;                                                                             
 var tmp143723981: Array.Queue.A;                                                                   
 var tmp33724048: bool;                                                                             
 var Queue.tail3724062: [Queue]int;                                                                 
 var path3724039: int;                                                                              
 var mover3723902: Mover;                                                                           
 var tmp143724062: Array.Queue.A;                                                                   
 var moverPath3724039: MoverPath;                                                                   
 var tmp63723908: int;                                                                              
 var Array.Queue.T._length3723902: [Array.Queue.T]int;                                              
 var tmp14: Array.Queue.A;                                                                          
 var Array.Queue.A._elems3724069: [Array.Queue.A]([int]int);                                        
 var tmp93724062: int;                                                                              
 var Queue.elems3723950: [Queue]Array.Queue.T;                                                      
 var result3724039: int;                                                                            
 var $recorded.state3723902: int;                                                                   
 var Array.Queue.T._state3724058: [Array.Queue.T]State;                                             
 var _pc3723931: Phase;                                                                             
 var Array.Queue.A._state3724058: [Array.Queue.A]State;                                             
 var tmp53723981: int;                                                                              
 var tmp43724048: int;                                                                              
 var Array.Queue.A._state3723981: [Array.Queue.A]State;                                             
 var tmp8: int;                                                                                     
 var tmp53724069: int;                                                                              
 var tmp43723964: int;                                                                              
 var Queue._state3723950: [Queue]State;                                                             
 var Queue.tail3724079: [Queue]int;                                                                 
 var tmp143724039: Array.Queue.A;                                                                   
 var mover3723981: Mover;                                                                           
 var Array.Queue.A._elems3723950: [Array.Queue.A]([int]int);                                        
 var tmp11: Array.Queue.T;                                                                          
 var Queue.spec3723931: [Queue]Array.Queue.A;                                                       
 var tmp63724062: int;                                                                              
 var Queue.spec3724079: [Queue]Array.Queue.A;                                                       
 var tmp53723908: int;                                                                              
 var Array.Queue.A._length3724062: [Array.Queue.A]int;                                              
 var Queue._state3724062: [Queue]State;                                                             
 var Queue.elems3724058: [Queue]Array.Queue.T;                                                      
 var Queue._state3723902: [Queue]State;                                                             
 var tmp73723964: Array.Queue.T;                                                                    
 var Queue._state3723964: [Queue]State;                                                             
 var tmp53724058: int;                                                                              
 var _pc3724058: Phase;                                                                             
 var tmp123724048: int;                                                                             
 var tid3724039: Tid;                                                                               
 var tmp33723981: bool;                                                                             
 var tid3723940: Tid;                                                                               
 var Array.Queue.T._length3724079: [Array.Queue.T]int;                                              
 var Array.Queue.T._elems3723950: [Array.Queue.T]([int]int);                                        
 var _pc3724062: Phase;                                                                             
 var tmp113723981: Array.Queue.T;                                                                   
 var $recorded.state3723908: int;                                                                   
 var Queue._lock3724048: [Queue]Tid;                                                                
 var path3724058: int;                                                                              
 var newSpec3724048: Array.Queue.A;                                                                 
 var Array.Queue.A._length3723981: [Array.Queue.A]int;                                              
 var Array.Queue.A._elems3723902: [Array.Queue.A]([int]int);                                        
 var result3724058: int;                                                                            
 var Queue.head3724079: [Queue]int;                                                                 
 var tmp133724062: int;                                                                             
 var _pc3723902: Phase;                                                                             
 var tmp63724058: int;                                                                              
 var this3724069: Queue;                                                                            
 var tmp93723981: int;                                                                              
 var tmp53723950: int;                                                                              
 var Queue._lock3724058: [Queue]Tid;                                                                
 var path3723902: int;                                                                              
 var tmp73724048: Array.Queue.T;                                                                    
 var $recorded.state3724062: int;                                                                   
 var tmp43723981: int;                                                                              
 var Array.Queue.T._elems3724062: [Array.Queue.T]([int]int);                                        
 var Queue.spec3723908: [Queue]Array.Queue.A;                                                       
 var tmp9: int;                                                                                     
 var Queue._lock3724069: [Queue]Tid;                                                                
 var Queue.head3724039: [Queue]int;                                                                 
 var tmp53724062: int;                                                                              
 var Array.Queue.T._elems3723908: [Array.Queue.T]([int]int);                                        
 var tmp73723931: Array.Queue.T;                                                                    
 var tmp143724048: Array.Queue.A;                                                                   
 var _pc3723981: Phase;                                                                             
 var Queue.head3723908: [Queue]int;                                                                 
 var Array.Queue.A._length3724079: [Array.Queue.A]int;                                              
 var tmp53723940: int;                                                                              
 var _pc3724069: Phase;                                                                             
 var Array.Queue.T._length3723964: [Array.Queue.T]int;                                              
 var tid3723964: Tid;                                                                               
 var Array.Queue.T._state3723902: [Array.Queue.T]State;                                             
 var tmp113724039: Array.Queue.T;                                                                   
 var _pc3724079: Phase;                                                                             
 var $recorded.state3724058: int;                                                                   
 var result3723950: int;                                                                            
 var tmp103724058: int;                                                                             
 var Queue.head3723981: [Queue]int;                                                                 
 var tmp73724058: Array.Queue.T;                                                                    
 var Array.Queue.T._state3724048: [Array.Queue.T]State;                                             
 var $recorded.state3723950: int;                                                                   
 var Queue.spec3724069: [Queue]Array.Queue.A;                                                       
 var this3724079: Queue;                                                                            
 var mover3723940: Mover;                                                                           
 var tmp43723931: int;                                                                              
 var tid3724062: Tid;                                                                               
 var tmp83723950: int;                                                                              
 var tmp163724048: int;                                                                             
 var tmp93723964: int;                                                                              
 var Array.Queue.A._length3724048: [Array.Queue.A]int;                                              
 var $result3724069: int;                                                                           
 var tmp133724058: int;                                                                             
 var tmp103723981: int;                                                                             
 var $result3723908: int;                                                                           
 var tmp73723950: Array.Queue.T;                                                                    
 var tmp103724062: int;                                                                             
 var Array.Queue.A._length3723931: [Array.Queue.A]int;                                              
 var Array.Queue.T._elems3723940: [Array.Queue.T]([int]int);                                        
 var tmp33724058: bool;                                                                             
 var Queue._lock3723940: [Queue]Tid;                                                                
 var result3724062: int;                                                                            
 var Array.Queue.A._elems3724062: [Array.Queue.A]([int]int);                                        
 var mover3724048: Mover;                                                                           
 var Array.Queue.A._state3724069: [Array.Queue.A]State;                                             
 var tmp73723940: Array.Queue.T;                                                                    
 var Array.Queue.T._length3723908: [Array.Queue.T]int;                                              
 var Queue.tail3723940: [Queue]int;                                                                 
 var Array.Queue.A._elems3723981: [Array.Queue.A]([int]int);                                        
 var this3723908: Queue;                                                                            
 var Queue.head3724062: [Queue]int;                                                                 
 var Array.Queue.T._elems3724048: [Array.Queue.T]([int]int);                                        
 var tid3724069: Tid;                                                                               
 var Queue._state3724069: [Queue]State;                                                             
 var Queue.spec3723964: [Queue]Array.Queue.A;                                                       
 var Array.Queue.T._state3723950: [Array.Queue.T]State;                                             
 var tmp103723964: int;                                                                             
 var Array.Queue.T._length3723981: [Array.Queue.T]int;                                              
 var path3723908: int;                                                                              
 var tmp63723964: int;                                                                              
 var mover3723964: Mover;                                                                           
 var tmp153724062: int;                                                                             
 var this3723981: Queue;                                                                            
 var tmp83724048: int;                                                                              
 var Array.Queue.T._state3723964: [Array.Queue.T]State;                                             
 var tmp93724039: int;                                                                              
 var moverPath3723964: MoverPath;                                                                   
 var tid3723950: Tid;                                                                               
 var Queue.spec3723902: [Queue]Array.Queue.A;                                                       
 var tmp33723964: bool;                                                                             
 var Queue.tail3724069: [Queue]int;                                                                 
 var $result3723950: int;                                                                           
 var Array.Queue.T._length3724058: [Array.Queue.T]int;                                              
 var tmp83724062: int;                                                                              
 var Queue.spec3723940: [Queue]Array.Queue.A;                                                       
 var Queue._lock3723981: [Queue]Tid;                                                                
 var Array.Queue.T._length3723950: [Array.Queue.T]int;                                              
 var tid3724079: Tid;                                                                               
 var Queue.head3723902: [Queue]int;                                                                 
 var tmp53724048: int;                                                                              
 var $recorded.state3724048: int;                                                                   
 var tmp43723908: int;                                                                              
 var Queue.tail3723981: [Queue]int;                                                                 
 var tmp53723931: int;                                                                              
 var Array.Queue.T._length3723940: [Array.Queue.T]int;                                              
 var moverPath3723950: MoverPath;                                                                   
 var Array.Queue.A._length3724039: [Array.Queue.A]int;                                              
 var tmp113724058: Array.Queue.T;                                                                   
 var Queue.elems3723940: [Queue]Array.Queue.T;                                                      
 var tmp33724069: bool;                                                                             
 var Queue.elems3724062: [Queue]Array.Queue.T;                                                      
 var Queue._lock3723908: [Queue]Tid;                                                                
 var Array.Queue.A._length3723908: [Array.Queue.A]int;                                              
 var tmp83723964: int;                                                                              
 var tmp163724062: int;                                                                             
 var newSpec3724058: Array.Queue.A;                                                                 
 var Array.Queue.A._elems3724058: [Array.Queue.A]([int]int);                                        
 var result3723940: int;                                                                            
 var path3723964: int;                                                                              
 var $result3723981: int;                                                                           
 var Array.Queue.A._length3724058: [Array.Queue.A]int;                                              
 var Queue.elems3723902: [Queue]Array.Queue.T;                                                      
 var tmp53723902: int;                                                                              
 var tmp10: int;                                                                                    
 var tid3723931: Tid;                                                                               
 var Queue.elems3723931: [Queue]Array.Queue.T;                                                      
 var Array.Queue.T._state3723931: [Array.Queue.T]State;                                             
 var tmp43724039: int;                                                                              
 var path3723940: int;                                                                              
 var Array.Queue.T._state3723908: [Array.Queue.T]State;                                             
 var tmp15: int;                                                                                    
 var Array.Queue.T._elems3724039: [Array.Queue.T]([int]int);                                        
 var tmp113724048: Array.Queue.T;                                                                   
 var $result3724058: int;                                                                           
 var tmp63723940: int;                                                                              
 var tmp13: int;                                                                                    
 var Queue.tail3723902: [Queue]int;                                                                 
 var $result3723940: int;                                                                           
 var Array.Queue.T._elems3724079: [Array.Queue.T]([int]int);                                        
 var Array.Queue.T._state3723981: [Array.Queue.T]State;                                             
 var path3723981: int;                                                                              
 var Queue._lock3723902: [Queue]Tid;                                                                
 var Queue.head3724058: [Queue]int;                                                                 
 var Queue._lock3723950: [Queue]Tid;                                                                
 var tmp123723981: int;                                                                             
 var Array.Queue.A._state3724079: [Array.Queue.A]State;                                             
 var tmp63723931: int;                                                                              
 var tid3724058: Tid;                                                                               
 var tmp73724039: Array.Queue.T;                                                                    
 var tmp33723902: bool;                                                                             
 var $recorded.state3724069: int;                                                                   
 var $recorded.state3723981: int;                                                                   
 var Array.Queue.T._length3724069: [Array.Queue.T]int;                                              
 var Queue.elems3724048: [Queue]Array.Queue.T;                                                      
 var Queue.spec3724039: [Queue]Array.Queue.A;                                                       
 var Array.Queue.T._state3724069: [Array.Queue.T]State;                                             
 var Queue.spec3724048: [Queue]Array.Queue.A;                                                       
 var tmp83724058: int;                                                                              
 var this3723950: Queue;                                                                            
 var mover3724039: Mover;                                                                           
 var moverPath3724058: MoverPath;                                                                   
 var tmp73724062: Array.Queue.T;                                                                    
 var newSpec3724062: Array.Queue.A;                                                                 
 var tmp7: Array.Queue.T;                                                                           
 var tmp33723931: bool;                                                                             
 var $recorded.state3723931: int;                                                                   
 var tmp12: int;                                                                                    
 var $recorded.state3724079: int;                                                                   
 var Array.Queue.A._length3723940: [Array.Queue.A]int;                                              
 var Array.Queue.T._elems3723931: [Array.Queue.T]([int]int);                                        
 var Array.Queue.T._length3724048: [Array.Queue.T]int;                                              
 var tmp63723981: int;                                                                              
 var $recorded.state3723964: int;                                                                   
 var Queue.elems3723908: [Queue]Array.Queue.T;                                                      
 var Array.Queue.A._elems3723964: [Array.Queue.A]([int]int);                                        
 var tmp133724039: int;                                                                             
 var tid3723981: Tid;                                                                               
 var tmp43723902: int;                                                                              
 var tmp73723981: Array.Queue.T;                                                                    
 var Array.Queue.T._state3723940: [Array.Queue.T]State;                                             
 var this3724062: Queue;                                                                            
 var Queue.head3723964: [Queue]int;                                                                 
 var mover3723908: Mover;                                                                           
 var tmp3: bool;                                                                                    
 var Queue._state3724039: [Queue]State;                                                             
 var Array.Queue.T._length3724062: [Array.Queue.T]int;                                              
 var Queue._lock3724039: [Queue]Tid;                                                                
 var Queue.spec3724058: [Queue]Array.Queue.A;                                                       
 var newSpec3723981: Array.Queue.A;                                                                 
 var Queue.tail3723931: [Queue]int;                                                                 
 var Array.Queue.T._elems3724069: [Array.Queue.T]([int]int);                                        
 var Queue.elems3723964: [Queue]Array.Queue.T;                                                      
 var Array.Queue.A._elems3723940: [Array.Queue.A]([int]int);                                        
 var Array.Queue.A._state3723908: [Array.Queue.A]State;                                             
 var result3723981: int;                                                                            
 var $result3723902: int;                                                                           
 var Queue.elems3723981: [Queue]Array.Queue.T;                                                      
 var $recorded.state3724039: int;                                                                   
 var Queue._state3723931: [Queue]State;                                                             
 var Array.Queue.A._length3723950: [Array.Queue.A]int;                                              
 var Queue.spec3724062: [Queue]Array.Queue.A;                                                       
 var Array.Queue.T._elems3724058: [Array.Queue.T]([int]int);                                        
 var tmp113723964: Array.Queue.T;                                                                   
 var Queue.tail3723908: [Queue]int;                                                                 
 var Queue._lock3723931: [Queue]Tid;                                                                
 var tmp33723908: bool;                                                                             
 var tmp103724048: int;                                                                             
 var Queue.elems3724039: [Queue]Array.Queue.T;                                                      
 var $result3724079: int;                                                                           
 var Array.Queue.A._state3723931: [Array.Queue.A]State;                                             
 var Queue.head3724048: [Queue]int;                                                                 
 var Array.Queue.A._elems3723931: [Array.Queue.A]([int]int);                                        
 var Queue._lock3724062: [Queue]Tid;                                                                
 var tmp163724058: int;                                                                             
 var $result3724062: int;                                                                           
 var tmp153724058: int;                                                                             
 var moverPath3723940: MoverPath;                                                                   
 var Queue._state3724048: [Queue]State;                                                             
 var Queue._state3723940: [Queue]State;                                                             
 var Array.Queue.A._elems3724079: [Array.Queue.A]([int]int);                                        
 var Array.Queue.T._elems3723981: [Array.Queue.T]([int]int);                                        
 var tmp143724058: Array.Queue.A;                                                                   
 var result3723964: int;                                                                            
 var tmp93723940: int;                                                                              
 var tmp83724039: int;                                                                              
 var this3723964: Queue;                                                                            
 var Queue.head3724069: [Queue]int;                                                                 
 var Array.Queue.T._elems3723902: [Array.Queue.T]([int]int);                                        
 var this3724048: Queue;                                                                            
 var mover3723931: Mover;                                                                           
 var result3724048: int;                                                                            
 var Array.Queue.A._elems3723908: [Array.Queue.A]([int]int);                                        
 var tmp63724048: int;                                                                              
 var this3724039: Queue;                                                                            
 var Array.Queue.A._state3723902: [Array.Queue.A]State;                                             
 var Queue._state3724079: [Queue]State;                                                             
 var tmp153724048: int;                                                                             
 var tmp103723950: int;                                                                             
 var Queue.tail3724048: [Queue]int;                                                                 
 var newSpec3724039: Array.Queue.A;                                                                 
 var newSpec: Array.Queue.A;                                                                        
 var _pc3723908: Phase;                                                                             
 var Array.Queue.T._state3724079: [Array.Queue.T]State;                                             
 var Array.Queue.A._state3723940: [Array.Queue.A]State;                                             
 var Array.Queue.T._elems3723964: [Array.Queue.T]([int]int);                                        
 var tmp133724048: int;                                                                             
 var result3723931: int;                                                                            
 var tmp43724058: int;                                                                              
 var _pc3723950: Phase;                                                                             
 var Queue._state3724058: [Queue]State;                                                             
 var tmp83723940: int;                                                                              
 var this3723940: Queue;                                                                            
 var _pc3723964: Phase;                                                                             
 var Array.Queue.A._elems3724039: [Array.Queue.A]([int]int);                                        
 var tmp33723950: bool;                                                                             
 var tmp33723940: bool;                                                                             
 var $result3724039: int;                                                                           
 var tmp43724069: int;                                                                              
 var this3723902: Queue;                                                                            
 var Array.Queue.A._state3723950: [Array.Queue.A]State;                                             
 var tmp93723950: int;                                                                              
 var moverPath3723902: MoverPath;                                                                   
 var tmp63724039: int;                                                                              
 var tmp93724048: int;                                                                              
 var tmp4: int;                                                                                     
 var Queue.head3723940: [Queue]int;                                                                 
 var tmp16: int;                                                                                    
 var Queue.tail3724058: [Queue]int;                                                                 
 var tmp6: int;                                                                                     
 var Array.Queue.T._state3724062: [Array.Queue.T]State;                                             
 var Queue.head3723950: [Queue]int;                                                                 
 var moverPath3723981: MoverPath;                                                                   
 var tmp113724062: Array.Queue.T;                                                                   
 var this3724058: Queue;                                                                            
 var Queue._state3723981: [Queue]State;                                                             
 var path3723950: int;                                                                              
 var Queue.elems3724079: [Queue]Array.Queue.T;                                                      
 var $recorded.state3723940: int;                                                                   
 var Array.Queue.A._state3724039: [Array.Queue.A]State;                                             
                                                                                                    
 var _pc : Phase;                                                                                   
 _pc := PreCommit;                                                                                  
                                                                                                    
                                                                                                    
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (40.23): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assume Queue._lock[this] == Tid.null;                                                              
 _pc := transition(_pc, _R);                                                                        
 assert _pc != PhaseError;                                                                                 // (40.23): Reduction failure
 Queue._lock[this] := tid;                                                                          
                                                                                                    
 // 41.13: bool tmp3;                                                                               
                                                                                                    
                                                                                                    
 // 41.13: int tmp4;                                                                                
                                                                                                    
                                                                                                    
 // 41.13: int tmp5;                                                                                
                                                                                                    
                                                                                                    
 // 41.13: tmp5 := this.tail;                                                                       
                                                                                                    
                                                                                                    
 moverPath3723902 := ReadEval.Queue.tail(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3723902 := m#moverPath(moverPath3723902);                                                     
 path3723902 := p#moverPath(moverPath3723902);                                                      
 assume Queue._state3723902 == Queue._state && Queue.elems3723902 == Queue.elems && Queue.head3723902 == Queue.head && Queue.tail3723902 == Queue.tail && Queue.spec3723902 == Queue.spec && Queue._lock3723902 == Queue._lock && Array.Queue.T._state3723902 == Array.Queue.T._state && Array.Queue.T._elems3723902 == Array.Queue.T._elems && Array.Queue.T._length3723902 == Array.Queue.T._length && Array.Queue.A._state3723902 == Array.Queue.A._state && Array.Queue.A._elems3723902 == Array.Queue.A._elems && Array.Queue.A._length3723902 == Array.Queue.A._length && tmp53723902 == tmp5 && tmp43723902 == tmp4 && tmp33723902 == tmp3 && $result3723902 == $result && this3723902 == this && tid3723902 == tid && _pc3723902 == _pc;
 assume $recorded.state3723902 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (41.13): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3723902);                                                              
 assert _pc != PhaseError;                                                                                 // (41.13): Reduction failure
 tmp5 := Queue.tail[this];                                                                          
                                                                                                    
 // 41.13: int tmp6;                                                                                
                                                                                                    
                                                                                                    
 // 41.13: tmp6 := this.head;                                                                       
                                                                                                    
                                                                                                    
 moverPath3723908 := ReadEval.Queue.head(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3723908 := m#moverPath(moverPath3723908);                                                     
 path3723908 := p#moverPath(moverPath3723908);                                                      
 assume Queue._state3723908 == Queue._state && Queue.elems3723908 == Queue.elems && Queue.head3723908 == Queue.head && Queue.tail3723908 == Queue.tail && Queue.spec3723908 == Queue.spec && Queue._lock3723908 == Queue._lock && Array.Queue.T._state3723908 == Array.Queue.T._state && Array.Queue.T._elems3723908 == Array.Queue.T._elems && Array.Queue.T._length3723908 == Array.Queue.T._length && Array.Queue.A._state3723908 == Array.Queue.A._state && Array.Queue.A._elems3723908 == Array.Queue.A._elems && Array.Queue.A._length3723908 == Array.Queue.A._length && tmp63723908 == tmp6 && tmp53723908 == tmp5 && tmp43723908 == tmp4 && tmp33723908 == tmp3 && $result3723908 == $result && this3723908 == this && tid3723908 == tid && _pc3723908 == _pc;
 assume $recorded.state3723908 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (41.13): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3723908);                                                              
 assert _pc != PhaseError;                                                                                 // (41.13): Reduction failure
 tmp6 := Queue.head[this];                                                                          
                                                                                                    
 // 41.13: tmp4 = tmp5 - tmp6;                                                                      
                                                                                                    
 tmp4 := (tmp5-tmp6);                                                                               
                                                                                                    
 // 41.13: tmp3 = tmp4 > 0;                                                                         
                                                                                                    
 tmp3 := (tmp4>0);                                                                                  
 if (tmp3 /* lowered ((Queue.tail[this]-Queue.head[this])>0) */) {                                  
                                                                                                    
  // 42.17: int result;                                                                             
                                                                                                    
                                                                                                    
  // 42.17: [Queue.T{this}] tmp7;                                                                   
                                                                                                    
                                                                                                    
  // 42.17: tmp7 := this.elems;                                                                     
                                                                                                    
                                                                                                    
  moverPath3723931 := ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3723931 := m#moverPath(moverPath3723931);                                                    
  path3723931 := p#moverPath(moverPath3723931);                                                     
  assume Queue._state3723931 == Queue._state && Queue.elems3723931 == Queue.elems && Queue.head3723931 == Queue.head && Queue.tail3723931 == Queue.tail && Queue.spec3723931 == Queue.spec && Queue._lock3723931 == Queue._lock && Array.Queue.T._state3723931 == Array.Queue.T._state && Array.Queue.T._elems3723931 == Array.Queue.T._elems && Array.Queue.T._length3723931 == Array.Queue.T._length && Array.Queue.A._state3723931 == Array.Queue.A._state && Array.Queue.A._elems3723931 == Array.Queue.A._elems && Array.Queue.A._length3723931 == Array.Queue.A._length && tmp73723931 == tmp7 && result3723931 == result && tmp63723931 == tmp6 && tmp53723931 == tmp5 && tmp43723931 == tmp4 && tmp33723931 == tmp3 && $result3723931 == $result && this3723931 == this && tid3723931 == tid && _pc3723931 == _pc;
  assume $recorded.state3723931 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (42.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3723931);                                                             
  assert _pc != PhaseError;                                                                                // (42.17): Reduction failure
  tmp7 := Queue.elems[this];                                                                        
                                                                                                    
  // 42.17: int tmp8;                                                                               
                                                                                                    
                                                                                                    
  // 42.17: int tmp9;                                                                               
                                                                                                    
                                                                                                    
  // 42.17: tmp9 := this.head;                                                                      
                                                                                                    
                                                                                                    
  moverPath3723940 := ReadEval.Queue.head(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3723940 := m#moverPath(moverPath3723940);                                                    
  path3723940 := p#moverPath(moverPath3723940);                                                     
  assume Queue._state3723940 == Queue._state && Queue.elems3723940 == Queue.elems && Queue.head3723940 == Queue.head && Queue.tail3723940 == Queue.tail && Queue.spec3723940 == Queue.spec && Queue._lock3723940 == Queue._lock && Array.Queue.T._state3723940 == Array.Queue.T._state && Array.Queue.T._elems3723940 == Array.Queue.T._elems && Array.Queue.T._length3723940 == Array.Queue.T._length && Array.Queue.A._state3723940 == Array.Queue.A._state && Array.Queue.A._elems3723940 == Array.Queue.A._elems && Array.Queue.A._length3723940 == Array.Queue.A._length && tmp93723940 == tmp9 && tmp83723940 == tmp8 && tmp73723940 == tmp7 && result3723940 == result && tmp63723940 == tmp6 && tmp53723940 == tmp5 && tmp43723940 == tmp4 && tmp33723940 == tmp3 && $result3723940 == $result && this3723940 == this && tid3723940 == tid && _pc3723940 == _pc;
  assume $recorded.state3723940 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (42.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3723940);                                                             
  assert _pc != PhaseError;                                                                                // (42.17): Reduction failure
  tmp9 := Queue.head[this];                                                                         
                                                                                                    
  // 42.17: int tmp10;                                                                              
                                                                                                    
                                                                                                    
  // 42.17: [Queue.T{this}] tmp11;                                                                  
                                                                                                    
                                                                                                    
  // 42.17: tmp11 := this.elems;                                                                    
                                                                                                    
                                                                                                    
  moverPath3723950 := ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3723950 := m#moverPath(moverPath3723950);                                                    
  path3723950 := p#moverPath(moverPath3723950);                                                     
  assume Queue._state3723950 == Queue._state && Queue.elems3723950 == Queue.elems && Queue.head3723950 == Queue.head && Queue.tail3723950 == Queue.tail && Queue.spec3723950 == Queue.spec && Queue._lock3723950 == Queue._lock && Array.Queue.T._state3723950 == Array.Queue.T._state && Array.Queue.T._elems3723950 == Array.Queue.T._elems && Array.Queue.T._length3723950 == Array.Queue.T._length && Array.Queue.A._state3723950 == Array.Queue.A._state && Array.Queue.A._elems3723950 == Array.Queue.A._elems && Array.Queue.A._length3723950 == Array.Queue.A._length && tmp113723950 == tmp11 && tmp103723950 == tmp10 && tmp93723950 == tmp9 && tmp83723950 == tmp8 && tmp73723950 == tmp7 && result3723950 == result && tmp63723950 == tmp6 && tmp53723950 == tmp5 && tmp43723950 == tmp4 && tmp33723950 == tmp3 && $result3723950 == $result && this3723950 == this && tid3723950 == tid && _pc3723950 == _pc;
  assume $recorded.state3723950 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (42.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3723950);                                                             
  assert _pc != PhaseError;                                                                                // (42.17): Reduction failure
  tmp11 := Queue.elems[this];                                                                       
                                                                                                    
  // 42.17: tmp10 = tmp11.length;                                                                   
                                                                                                    
  tmp10 := Array.Queue.T._length[tmp11];                                                            
                                                                                                    
  // 42.17: tmp8 = tmp9 % tmp10;                                                                    
                                                                                                    
  tmp8 := MOD(tmp9, tmp10);                                                                         
                                                                                                    
  // 42.17: result := tmp7[tmp8];                                                                   
                                                                                                    
                                                                                                    
  moverPath3723964 := ReadEval.Array.Queue.T(tid: Tid,this: Queue,tmp7: Array.Queue.T,tmp8: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3723964 := m#moverPath(moverPath3723964);                                                    
  path3723964 := p#moverPath(moverPath3723964);                                                     
  assume Queue._state3723964 == Queue._state && Queue.elems3723964 == Queue.elems && Queue.head3723964 == Queue.head && Queue.tail3723964 == Queue.tail && Queue.spec3723964 == Queue.spec && Queue._lock3723964 == Queue._lock && Array.Queue.T._state3723964 == Array.Queue.T._state && Array.Queue.T._elems3723964 == Array.Queue.T._elems && Array.Queue.T._length3723964 == Array.Queue.T._length && Array.Queue.A._state3723964 == Array.Queue.A._state && Array.Queue.A._elems3723964 == Array.Queue.A._elems && Array.Queue.A._length3723964 == Array.Queue.A._length && tmp113723964 == tmp11 && tmp103723964 == tmp10 && tmp93723964 == tmp9 && tmp83723964 == tmp8 && tmp73723964 == tmp7 && result3723964 == result && tmp63723964 == tmp6 && tmp53723964 == tmp5 && tmp43723964 == tmp4 && tmp33723964 == tmp3 && $result3723964 == $result && this3723964 == this && tid3723964 == tid && _pc3723964 == _pc;
  assume $recorded.state3723964 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume tmp7 != Array.Queue.T.null;                                                               
  } else {                                                                                          
   assert tmp7 != Array.Queue.T.null;                                                                      // (42.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  if (_pc == PreCommit) {                                                                           
   assume 0 <= tmp8;                                                                                
  } else {                                                                                          
   assert 0 <= tmp8;                                                                                       // (42.17): index < 0.
  }                                                                                                 
  if (_pc == PreCommit) {                                                                           
   assume tmp8 < Array.Queue.T._length[tmp7];                                                       
  } else {                                                                                          
   assert tmp8 < Array.Queue.T._length[tmp7];                                                              // (42.17): index is >= length.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3723964);                                                             
  assert _pc != PhaseError;                                                                                // (42.17): Reduction failure
  result := Array.Queue.T._elems[tmp7][tmp8];                                                       
                                                                                                    
  // 43.17: [Queue.A{this}] newSpec;                                                                
                                                                                                    
                                                                                                    
  // 43.17: int tmp12;                                                                              
                                                                                                    
                                                                                                    
  // 43.17: int tmp13;                                                                              
                                                                                                    
                                                                                                    
  // 43.17: [Queue.A{this}] tmp14;                                                                  
                                                                                                    
                                                                                                    
  // 43.17: tmp14 := this.spec;                                                                     
                                                                                                    
                                                                                                    
  moverPath3723981 := ReadEval.Queue.spec(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3723981 := m#moverPath(moverPath3723981);                                                    
  path3723981 := p#moverPath(moverPath3723981);                                                     
  assume Queue._state3723981 == Queue._state && Queue.elems3723981 == Queue.elems && Queue.head3723981 == Queue.head && Queue.tail3723981 == Queue.tail && Queue.spec3723981 == Queue.spec && Queue._lock3723981 == Queue._lock && Array.Queue.T._state3723981 == Array.Queue.T._state && Array.Queue.T._elems3723981 == Array.Queue.T._elems && Array.Queue.T._length3723981 == Array.Queue.T._length && Array.Queue.A._state3723981 == Array.Queue.A._state && Array.Queue.A._elems3723981 == Array.Queue.A._elems && Array.Queue.A._length3723981 == Array.Queue.A._length && tmp143723981 == tmp14 && tmp133723981 == tmp13 && tmp123723981 == tmp12 && newSpec3723981 == newSpec && tmp113723981 == tmp11 && tmp103723981 == tmp10 && tmp93723981 == tmp9 && tmp83723981 == tmp8 && tmp73723981 == tmp7 && result3723981 == result && tmp63723981 == tmp6 && tmp53723981 == tmp5 && tmp43723981 == tmp4 && tmp33723981 == tmp3 && $result3723981 == $result && this3723981 == this && tid3723981 == tid && _pc3723981 == _pc;
  assume $recorded.state3723981 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (43.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3723981);                                                             
  assert _pc != PhaseError;                                                                                // (43.17): Reduction failure
  tmp14 := Queue.spec[this];                                                                        
                                                                                                    
  // 43.17: tmp13 = tmp14.length;                                                                   
                                                                                                    
  tmp13 := Array.Queue.A._length[tmp14];                                                            
                                                                                                    
  // 43.17: tmp12 = tmp13 - 1;                                                                      
                                                                                                    
  tmp12 := (tmp13-1);                                                                               
                                                                                                    
  // 43.17: newSpec = new [Queue.A{this}](tmp12);                                                   
                                                                                                    
  havoc newSpec;                                                                                    
  assume isFresh(Array.Queue.A._state[newSpec]);                                                    
  assume Array.Queue.A._length[newSpec] == tmp12;                                                   
  assume Array.Queue.A._this[newSpec] == this;                                                      
  Array.Queue.A._state[newSpec] := LOCAL(tid);                                                      
  assume (forall _i : int :: 0 <= _i ==> Array.Queue.A._elems[newSpec][_i] == 0);                   
                                                                                                    
  // 44.17: assume forall int i ::0 <= i && i < this.tail - (this.head + 1) ==> newSpec[i] == this.spec[i + 1];
                                                                                                    
  assume (forall i: int ::  ((((0<=i)&&(i<(Queue.tail[this]-(Queue.head[this]+1))))==>(Array.Queue.A._elems[newSpec][i]==Array.Queue.A._elems[Queue.spec[this]][(i+1)]))));
                                                                                                    
                                                                                                    
  // 45.17: this.spec := newSpec;                                                                   
                                                                                                    
                                                                                                    
  moverPath3724039 := WriteEval.Queue.spec(tid: Tid,this: Queue,newSpec: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3724039 := m#moverPath(moverPath3724039);                                                    
  path3724039 := p#moverPath(moverPath3724039);                                                     
  assume Queue._state3724039 == Queue._state && Queue.elems3724039 == Queue.elems && Queue.head3724039 == Queue.head && Queue.tail3724039 == Queue.tail && Queue.spec3724039 == Queue.spec && Queue._lock3724039 == Queue._lock && Array.Queue.T._state3724039 == Array.Queue.T._state && Array.Queue.T._elems3724039 == Array.Queue.T._elems && Array.Queue.T._length3724039 == Array.Queue.T._length && Array.Queue.A._state3724039 == Array.Queue.A._state && Array.Queue.A._elems3724039 == Array.Queue.A._elems && Array.Queue.A._length3724039 == Array.Queue.A._length && tmp143724039 == tmp14 && tmp133724039 == tmp13 && tmp123724039 == tmp12 && newSpec3724039 == newSpec && tmp113724039 == tmp11 && tmp103724039 == tmp10 && tmp93724039 == tmp9 && tmp83724039 == tmp8 && tmp73724039 == tmp7 && result3724039 == result && tmp63724039 == tmp6 && tmp53724039 == tmp5 && tmp43724039 == tmp4 && tmp33724039 == tmp3 && $result3724039 == $result && this3724039 == this && tid3724039 == tid && _pc3724039 == _pc;
  assume $recorded.state3724039 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (45.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  _pc := transition(_pc, mover3724039);                                                             
  assert _pc != PhaseError;                                                                                // (45.17): Reduction failure
  Queue.spec[this] := newSpec;                                                                      
  if (isLocal(Array.Queue.A._state[newSpec], tid)) {                                                
   Array.Queue.A._state[newSpec] := SHARED();                                                       
   if (isLocal(Queue._state[Array.Queue.A._this[newSpec]], tid)) {                                  
    Queue._state[Array.Queue.A._this[newSpec]] := SHARED();                                         
    assert isSharedAssignable(Array.Queue.T._state[Queue.elems[Array.Queue.A._this[newSpec]]]);            // (45.17): newSpec became shared, but Array.Queue.A._this[newSpec].elems may not be shared.
    assert isSharedAssignable(Array.Queue.A._state[Queue.spec[Array.Queue.A._this[newSpec]]]);             // (45.17): newSpec became shared, but Array.Queue.A._this[newSpec].spec may not be shared.
   }                                                                                                
  }                                                                                                 
                                                                                                    
                                                                                                    
  // 46.17: int tmp15;                                                                              
                                                                                                    
                                                                                                    
  // 46.17: int tmp16;                                                                              
                                                                                                    
                                                                                                    
  // 46.17: tmp16 := this.head;                                                                     
                                                                                                    
                                                                                                    
  moverPath3724048 := ReadEval.Queue.head(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3724048 := m#moverPath(moverPath3724048);                                                    
  path3724048 := p#moverPath(moverPath3724048);                                                     
  assume Queue._state3724048 == Queue._state && Queue.elems3724048 == Queue.elems && Queue.head3724048 == Queue.head && Queue.tail3724048 == Queue.tail && Queue.spec3724048 == Queue.spec && Queue._lock3724048 == Queue._lock && Array.Queue.T._state3724048 == Array.Queue.T._state && Array.Queue.T._elems3724048 == Array.Queue.T._elems && Array.Queue.T._length3724048 == Array.Queue.T._length && Array.Queue.A._state3724048 == Array.Queue.A._state && Array.Queue.A._elems3724048 == Array.Queue.A._elems && Array.Queue.A._length3724048 == Array.Queue.A._length && tmp163724048 == tmp16 && tmp153724048 == tmp15 && tmp143724048 == tmp14 && tmp133724048 == tmp13 && tmp123724048 == tmp12 && newSpec3724048 == newSpec && tmp113724048 == tmp11 && tmp103724048 == tmp10 && tmp93724048 == tmp9 && tmp83724048 == tmp8 && tmp73724048 == tmp7 && result3724048 == result && tmp63724048 == tmp6 && tmp53724048 == tmp5 && tmp43724048 == tmp4 && tmp33724048 == tmp3 && $result3724048 == $result && this3724048 == this && tid3724048 == tid && _pc3724048 == _pc;
  assume $recorded.state3724048 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (46.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3724048);                                                             
  assert _pc != PhaseError;                                                                                // (46.17): Reduction failure
  tmp16 := Queue.head[this];                                                                        
                                                                                                    
  // 46.17: tmp15 = tmp16 + 1;                                                                      
                                                                                                    
  tmp15 := (tmp16+1);                                                                               
                                                                                                    
                                                                                                    
  // 46.17: this.head := tmp15;                                                                     
                                                                                                    
                                                                                                    
  moverPath3724058 := WriteEval.Queue.head(tid: Tid,this: Queue,tmp15: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3724058 := m#moverPath(moverPath3724058);                                                    
  path3724058 := p#moverPath(moverPath3724058);                                                     
  assume Queue._state3724058 == Queue._state && Queue.elems3724058 == Queue.elems && Queue.head3724058 == Queue.head && Queue.tail3724058 == Queue.tail && Queue.spec3724058 == Queue.spec && Queue._lock3724058 == Queue._lock && Array.Queue.T._state3724058 == Array.Queue.T._state && Array.Queue.T._elems3724058 == Array.Queue.T._elems && Array.Queue.T._length3724058 == Array.Queue.T._length && Array.Queue.A._state3724058 == Array.Queue.A._state && Array.Queue.A._elems3724058 == Array.Queue.A._elems && Array.Queue.A._length3724058 == Array.Queue.A._length && tmp163724058 == tmp16 && tmp153724058 == tmp15 && tmp143724058 == tmp14 && tmp133724058 == tmp13 && tmp123724058 == tmp12 && newSpec3724058 == newSpec && tmp113724058 == tmp11 && tmp103724058 == tmp10 && tmp93724058 == tmp9 && tmp83724058 == tmp8 && tmp73724058 == tmp7 && result3724058 == result && tmp63724058 == tmp6 && tmp53724058 == tmp5 && tmp43724058 == tmp4 && tmp33724058 == tmp3 && $result3724058 == $result && this3724058 == this && tid3724058 == tid && _pc3724058 == _pc;
  assume $recorded.state3724058 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (46.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  _pc := transition(_pc, mover3724058);                                                             
  assert _pc != PhaseError;                                                                                // (46.17): Reduction failure
  Queue.head[this] := tmp15;                                                                        
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (51.9): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  assert Queue._lock[this] == tid;                                                                         // (51.9): lock not held
  _pc := transition(_pc, _L);                                                                       
  assert _pc != PhaseError;                                                                                // (51.9): Reduction failure
  Queue._lock[this] := Tid.null;                                                                    
                                                                                                    
  // 47.17:  return result;                                                                         
                                                                                                    
  assume Queue._state3724062 == Queue._state && Queue.elems3724062 == Queue.elems && Queue.head3724062 == Queue.head && Queue.tail3724062 == Queue.tail && Queue.spec3724062 == Queue.spec && Queue._lock3724062 == Queue._lock && Array.Queue.T._state3724062 == Array.Queue.T._state && Array.Queue.T._elems3724062 == Array.Queue.T._elems && Array.Queue.T._length3724062 == Array.Queue.T._length && Array.Queue.A._state3724062 == Array.Queue.A._state && Array.Queue.A._elems3724062 == Array.Queue.A._elems && Array.Queue.A._length3724062 == Array.Queue.A._length && tmp163724062 == tmp16 && tmp153724062 == tmp15 && tmp143724062 == tmp14 && tmp133724062 == tmp13 && tmp123724062 == tmp12 && newSpec3724062 == newSpec && tmp113724062 == tmp11 && tmp103724062 == tmp10 && tmp93724062 == tmp9 && tmp83724062 == tmp8 && tmp73724062 == tmp7 && result3724062 == result && tmp63724062 == tmp6 && tmp53724062 == tmp5 && tmp43724062 == tmp4 && tmp33724062 == tmp3 && $result3724062 == $result && this3724062 == this && tid3724062 == tid;
  assume $recorded.state3724062 == 1;                                                               
  $result := result;                                                                                
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (47.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (47.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (47.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (47.17): Object invariant may not hold.
  return;                                                                                           
 } else {                                                                                           
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (51.9): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  assert Queue._lock[this] == tid;                                                                         // (51.9): lock not held
  _pc := transition(_pc, _L);                                                                       
  assert _pc != PhaseError;                                                                                // (51.9): Reduction failure
  Queue._lock[this] := Tid.null;                                                                    
                                                                                                    
  // 49.17:  return 0;                                                                              
                                                                                                    
  assume Queue._state3724069 == Queue._state && Queue.elems3724069 == Queue.elems && Queue.head3724069 == Queue.head && Queue.tail3724069 == Queue.tail && Queue.spec3724069 == Queue.spec && Queue._lock3724069 == Queue._lock && Array.Queue.T._state3724069 == Array.Queue.T._state && Array.Queue.T._elems3724069 == Array.Queue.T._elems && Array.Queue.T._length3724069 == Array.Queue.T._length && Array.Queue.A._state3724069 == Array.Queue.A._state && Array.Queue.A._elems3724069 == Array.Queue.A._elems && Array.Queue.A._length3724069 == Array.Queue.A._length && tmp63724069 == tmp6 && tmp53724069 == tmp5 && tmp43724069 == tmp4 && tmp33724069 == tmp3 && $result3724069 == $result && this3724069 == this && tid3724069 == tid;
  assume $recorded.state3724069 == 1;                                                               
  $result := 0;                                                                                     
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (49.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (49.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (49.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (49.17): Object invariant may not hold.
  return;                                                                                           
 }                                                                                                  
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (51.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assert Queue._lock[this] == tid;                                                                          // (51.9): lock not held
 _pc := transition(_pc, _L);                                                                        
 assert _pc != PhaseError;                                                                                 // (51.9): Reduction failure
 Queue._lock[this] := Tid.null;                                                                     
                                                                                                    
 // 39.26: // return -1;                                                                            
                                                                                                    
 assume Queue._state3724079 == Queue._state && Queue.elems3724079 == Queue.elems && Queue.head3724079 == Queue.head && Queue.tail3724079 == Queue.tail && Queue.spec3724079 == Queue.spec && Queue._lock3724079 == Queue._lock && Array.Queue.T._state3724079 == Array.Queue.T._state && Array.Queue.T._elems3724079 == Array.Queue.T._elems && Array.Queue.T._length3724079 == Array.Queue.T._length && Array.Queue.A._state3724079 == Array.Queue.A._state && Array.Queue.A._elems3724079 == Array.Queue.A._elems && Array.Queue.A._length3724079 == Array.Queue.A._length && $result3724079 == $result && this3724079 == this && tid3724079 == tid;
 assume $recorded.state3724079 == 1;                                                                
 $result := -1;                                                                                     
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (39.26): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (39.26): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (39.26): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (39.26): Object invariant may not hold.
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
procedure  Queue.enqueue(tid:Tid, this : Queue, x : int)                                            
modifies Queue._state;                                                                              
modifies Queue.elems;                                                                               
modifies Queue.head;                                                                                
modifies Queue.tail;                                                                                
modifies Queue.spec;                                                                                
modifies Queue._lock;                                                                               
modifies Array.Queue.T._state;                                                                      
modifies Array.Queue.T._elems;                                                                      
modifies Array.Queue.A._state;                                                                      
modifies Array.Queue.A._elems;                                                                      
                                                                                                    
requires ValidTid(tid);                                                                                    // (54.5): Bad tid
requires isShared(Queue._state[this]);                                                                     // (54.5): this is not global
                                                                                                    
requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (54.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (54.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (54.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (54.5): Object invariant may not hold.
                                                                                                    
ensures StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (54.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (54.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (54.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (54.5): Object invariant may not hold.
{                                                                                                   
 var Array.Queue.T._state3724102: [Array.Queue.T]State;                                             
 var path3724144: int;                                                                              
 var path3724154: int;                                                                              
 var tmp303724257: Array.Queue.A;                                                                   
 var tmp303724267: Array.Queue.A;                                                                   
 var Queue.tail3724275: [Queue]int;                                                                 
 var Queue._lock3724135: [Queue]Tid;                                                                
 var tid3724135: Tid;                                                                               
 var _pc3724267: Phase;                                                                             
 var Queue._state3724118: [Queue]State;                                                             
 var Array.Queue.T._state3724135: [Array.Queue.T]State;                                             
 var moverPath3724118: MoverPath;                                                                   
 var path3724267: int;                                                                              
 var $recorded.state3724135: int;                                                                   
 var tmp223724144: Array.Queue.T;                                                                   
 var Queue.elems3724135: [Queue]Array.Queue.T;                                                      
 var tid3724168: Tid;                                                                               
 var Array.Queue.A._elems3724118: [Array.Queue.A]([int]int);                                        
 var newSpec3724185: Array.Queue.A;                                                                 
 var Queue._lock3724096: [Queue]Tid;                                                                
 var this3724118: Queue;                                                                            
 var tmp213724248: int;                                                                             
 var tmp203724185: int;                                                                             
 var tmp253724267: int;                                                                             
 var this3724096: Queue;                                                                            
 var tmp243724144: int;                                                                             
 var tmp23: Array.Queue.T;                                                                          
 var Queue._state3724248: [Queue]State;                                                             
 var tmp243724248: int;                                                                             
 var tmp173724135: bool;                                                                            
 var x3724185: int;                                                                                 
 var newSpec3724267: Array.Queue.A;                                                                 
 var tmp203724154: int;                                                                             
 var this3724135: Queue;                                                                            
 var tmp213724154: int;                                                                             
 var Queue.spec3724168: [Queue]Array.Queue.A;                                                       
 var _pc3724154: Phase;                                                                             
 var tid3724096: Tid;                                                                               
 var tmp203724144: int;                                                                             
 var Queue.tail3724154: [Queue]int;                                                                 
 var $recorded.state3724275: int;                                                                   
 var Array.Queue.A._state3724135: [Array.Queue.A]State;                                             
 var Array.Queue.T._elems3724096: [Array.Queue.T]([int]int);                                        
 var Queue.elems3724267: [Queue]Array.Queue.T;                                                      
 var Queue.elems3724118: [Queue]Array.Queue.T;                                                      
 var mover3724154: Mover;                                                                           
 var tmp213724144: int;                                                                             
 var Array.Queue.A._length3724168: [Array.Queue.A]int;                                              
 var tmp173724267: bool;                                                                            
 var tmp283724257: int;                                                                             
 var tmp223724118: Array.Queue.T;                                                                   
 var tmp233724154: Array.Queue.T;                                                                   
 var tmp183724267: int;                                                                             
 var Array.Queue.T._elems3724135: [Array.Queue.T]([int]int);                                        
 var tmp233724257: Array.Queue.T;                                                                   
 var Queue._lock3724185: [Queue]Tid;                                                                
 var tmp273724267: Array.Queue.T;                                                                   
 var Queue.head3724185: [Queue]int;                                                                 
 var x3724154: int;                                                                                 
 var Queue.elems3724257: [Queue]Array.Queue.T;                                                      
 var Array.Queue.A._state3724257: [Array.Queue.A]State;                                             
 var tmp183724135: int;                                                                             
 var tid3724118: Tid;                                                                               
 var Array.Queue.A._elems3724096: [Array.Queue.A]([int]int);                                        
 var Array.Queue.A._state3724275: [Array.Queue.A]State;                                             
 var Array.Queue.A._state3724168: [Array.Queue.A]State;                                             
 var Queue.tail3724096: [Queue]int;                                                                 
 var Array.Queue.T._length3724102: [Array.Queue.T]int;                                              
 var this3724102: Queue;                                                                            
 var tmp32: int;                                                                                    
 var tmp183724154: int;                                                                             
 var Queue._lock3724267: [Queue]Tid;                                                                
 var tmp243724185: int;                                                                             
 var moverPath3724102: MoverPath;                                                                   
 var Queue.elems3724185: [Queue]Array.Queue.T;                                                      
 var moverPath3724135: MoverPath;                                                                   
 var tmp233724267: Array.Queue.T;                                                                   
 var Array.Queue.T._state3724267: [Array.Queue.T]State;                                             
 var tmp173724102: bool;                                                                            
 var tmp293724267: int;                                                                             
 var $recorded.state3724248: int;                                                                   
 var Array.Queue.T._state3724185: [Array.Queue.T]State;                                             
 var moverPath3724267: MoverPath;                                                                   
 var Queue._state3724154: [Queue]State;                                                             
 var tmp253724248: int;                                                                             
 var Queue.spec3724257: [Queue]Array.Queue.A;                                                       
 var Queue.spec3724154: [Queue]Array.Queue.A;                                                       
 var Array.Queue.A._state3724154: [Array.Queue.A]State;                                             
 var Queue.spec3724267: [Queue]Array.Queue.A;                                                       
 var $recorded.state3724168: int;                                                                   
 var Queue.spec3724135: [Queue]Array.Queue.A;                                                       
 var tid3724257: Tid;                                                                               
 var Array.Queue.T._elems3724154: [Array.Queue.T]([int]int);                                        
 var tmp183724257: int;                                                                             
 var tid3724275: Tid;                                                                               
 var Queue.tail3724118: [Queue]int;                                                                 
 var x3724275: int;                                                                                 
 var Queue._lock3724144: [Queue]Tid;                                                                
 var Array.Queue.T._state3724168: [Array.Queue.T]State;                                             
 var tmp193724102: int;                                                                             
 var moverPath3724154: MoverPath;                                                                   
 var Queue.head3724118: [Queue]int;                                                                 
 var _pc3724144: Phase;                                                                             
 var Queue.head3724102: [Queue]int;                                                                 
 var tmp193724096: int;                                                                             
 var Queue.head3724248: [Queue]int;                                                                 
 var Array.Queue.T._elems3724275: [Array.Queue.T]([int]int);                                        
 var _pc3724257: Phase;                                                                             
 var Array.Queue.T._state3724154: [Array.Queue.T]State;                                             
 var tmp273724257: Array.Queue.T;                                                                   
 var mover3724135: Mover;                                                                           
 var Array.Queue.A._state3724102: [Array.Queue.A]State;                                             
 var tid3724185: Tid;                                                                               
 var tmp223724248: Array.Queue.T;                                                                   
 var newSpec3724248: Array.Queue.A;                                                                 
 var tmp183724144: int;                                                                             
 var Queue.elems3724154: [Queue]Array.Queue.T;                                                      
 var x3724144: int;                                                                                 
 var x3724118: int;                                                                                 
 var _pc3724168: Phase;                                                                             
 var tmp213724257: int;                                                                             
 var $recorded.state3724154: int;                                                                   
 var Array.Queue.A._length3724144: [Array.Queue.A]int;                                              
 var tmp213724168: int;                                                                             
 var Array.Queue.T._elems3724102: [Array.Queue.T]([int]int);                                        
 var Queue.tail3724102: [Queue]int;                                                                 
 var tmp173724185: bool;                                                                            
 var tmp21: int;                                                                                    
 var Queue.spec3724248: [Queue]Array.Queue.A;                                                       
 var Array.Queue.T._length3724248: [Array.Queue.T]int;                                              
 var Queue.tail3724168: [Queue]int;                                                                 
 var tmp193724154: int;                                                                             
 var tmp193724267: int;                                                                             
 var Queue._state3724168: [Queue]State;                                                             
 var tmp193724118: int;                                                                             
 var tmp203724168: int;                                                                             
 var tmp243724257: int;                                                                             
 var tmp193724144: int;                                                                             
 var Queue._state3724275: [Queue]State;                                                             
 var Array.Queue.T._elems3724257: [Array.Queue.T]([int]int);                                        
 var x3724267: int;                                                                                 
 var moverPath3724248: MoverPath;                                                                   
 var tmp223724185: Array.Queue.T;                                                                   
 var $recorded.state3724096: int;                                                                   
 var tmp203724135: int;                                                                             
 var tmp203724248: int;                                                                             
 var _pc3724118: Phase;                                                                             
 var tmp183724102: int;                                                                             
 var tmp223724257: Array.Queue.T;                                                                   
 var tmp273724248: Array.Queue.T;                                                                   
 var tmp293724257: int;                                                                             
 var tmp28: int;                                                                                    
 var Queue.elems3724248: [Queue]Array.Queue.T;                                                      
 var Queue._state3724102: [Queue]State;                                                             
 var Array.Queue.A._length3724118: [Array.Queue.A]int;                                              
 var path3724257: int;                                                                              
 var tmp193724248: int;                                                                             
 var path3724185: int;                                                                              
 var tmp183724248: int;                                                                             
 var tmp273724185: Array.Queue.T;                                                                   
 var tmp233724135: Array.Queue.T;                                                                   
 var tmp213724118: int;                                                                             
 var tmp173724168: bool;                                                                            
 var Array.Queue.T._elems3724168: [Array.Queue.T]([int]int);                                        
 var tmp223724135: Array.Queue.T;                                                                   
 var moverPath3724168: MoverPath;                                                                   
 var Array.Queue.T._length3724096: [Array.Queue.T]int;                                              
 var Queue._state3724185: [Queue]State;                                                             
 var $recorded.state3724267: int;                                                                   
 var Array.Queue.T._state3724275: [Array.Queue.T]State;                                             
 var Queue._lock3724168: [Queue]Tid;                                                                
 var tmp193724135: int;                                                                             
 var Array.Queue.A._length3724248: [Array.Queue.A]int;                                              
 var tmp223724168: Array.Queue.T;                                                                   
 var Queue.tail3724267: [Queue]int;                                                                 
 var tmp173724248: bool;                                                                            
 var tmp293724248: int;                                                                             
 var tmp233724185: Array.Queue.T;                                                                   
 var this3724257: Queue;                                                                            
 var x3724257: int;                                                                                 
 var tmp18: int;                                                                                    
 var Queue.spec3724096: [Queue]Array.Queue.A;                                                       
 var tid3724248: Tid;                                                                               
 var tmp273724154: Array.Queue.T;                                                                   
 var Array.Queue.A._state3724118: [Array.Queue.A]State;                                             
 var Array.Queue.T._state3724248: [Array.Queue.T]State;                                             
 var moverPath3724257: MoverPath;                                                                   
 var tmp203724257: int;                                                                             
 var path3724248: int;                                                                              
 var this3724154: Queue;                                                                            
 var tmp193724257: int;                                                                             
 var tmp183724168: int;                                                                             
 var tmp213724135: int;                                                                             
 var Array.Queue.A._length3724102: [Array.Queue.A]int;                                              
 var _pc3724096: Phase;                                                                             
 var x3724248: int;                                                                                 
 var tmp313724257: int;                                                                             
 var mover3724185: Mover;                                                                           
 var Queue.head3724275: [Queue]int;                                                                 
 var Array.Queue.T._length3724185: [Array.Queue.T]int;                                              
 var x3724168: int;                                                                                 
 var tmp263724168: int;                                                                             
 var tmp223724267: Array.Queue.T;                                                                   
 var tmp253724154: int;                                                                             
 var $recorded.state3724257: int;                                                                   
 var tmp183724096: int;                                                                             
 var path3724102: int;                                                                              
 var Queue.head3724267: [Queue]int;                                                                 
 var Array.Queue.A._elems3724154: [Array.Queue.A]([int]int);                                        
 var Queue.elems3724096: [Queue]Array.Queue.T;                                                      
 var tmp233724248: Array.Queue.T;                                                                   
 var this3724248: Queue;                                                                            
 var Queue._lock3724248: [Queue]Tid;                                                                
 var Array.Queue.A._length3724185: [Array.Queue.A]int;                                              
 var tmp263724267: int;                                                                             
 var $recorded.state3724144: int;                                                                   
 var Queue.tail3724257: [Queue]int;                                                                 
 var Queue.elems3724275: [Queue]Array.Queue.T;                                                      
 var Array.Queue.T._elems3724248: [Array.Queue.T]([int]int);                                        
 var $recorded.state3724185: int;                                                                   
 var moverPath3724144: MoverPath;                                                                   
 var tmp27: Array.Queue.T;                                                                          
 var tmp26: int;                                                                                    
 var tmp173724144: bool;                                                                            
 var moverPath3724096: MoverPath;                                                                   
 var Array.Queue.T._elems3724118: [Array.Queue.T]([int]int);                                        
 var Array.Queue.T._state3724257: [Array.Queue.T]State;                                             
 var tmp173724118: bool;                                                                            
 var Array.Queue.A._length3724135: [Array.Queue.A]int;                                              
 var this3724185: Queue;                                                                            
 var Array.Queue.A._state3724267: [Array.Queue.A]State;                                             
 var tmp213724185: int;                                                                             
 var _pc3724248: Phase;                                                                             
 var tmp30: Array.Queue.A;                                                                          
 var Array.Queue.A._state3724248: [Array.Queue.A]State;                                             
 var Queue._lock3724257: [Queue]Tid;                                                                
 var Array.Queue.A._length3724257: [Array.Queue.A]int;                                              
 var x3724102: int;                                                                                 
 var Array.Queue.A._elems3724135: [Array.Queue.A]([int]int);                                        
 var tmp19: int;                                                                                    
 var Array.Queue.A._length3724096: [Array.Queue.A]int;                                              
 var moverPath3724185: MoverPath;                                                                   
 var tmp183724118: int;                                                                             
 var Array.Queue.T._length3724257: [Array.Queue.T]int;                                              
 var tmp243724154: int;                                                                             
 var tmp233724168: Array.Queue.T;                                                                   
 var tmp173724257: bool;                                                                            
 var Queue.tail3724135: [Queue]int;                                                                 
 var Array.Queue.A._elems3724257: [Array.Queue.A]([int]int);                                        
 var Array.Queue.A._state3724096: [Array.Queue.A]State;                                             
 var Array.Queue.T._length3724118: [Array.Queue.T]int;                                              
 var tmp203724118: int;                                                                             
 var _pc3724275: Phase;                                                                             
 var _pc3724135: Phase;                                                                             
 var Array.Queue.T._length3724168: [Array.Queue.T]int;                                              
 var Array.Queue.T._length3724267: [Array.Queue.T]int;                                              
 var _pc3724185: Phase;                                                                             
 var $recorded.state3724118: int;                                                                   
 var mover3724096: Mover;                                                                           
 var Array.Queue.A._elems3724185: [Array.Queue.A]([int]int);                                        
 var Queue.spec3724275: [Queue]Array.Queue.A;                                                       
 var tmp233724144: Array.Queue.T;                                                                   
 var tmp193724185: int;                                                                             
 var tmp303724185: Array.Queue.A;                                                                   
 var tmp213724267: int;                                                                             
 var Array.Queue.T._state3724144: [Array.Queue.T]State;                                             
 var path3724168: int;                                                                              
 var this3724275: Queue;                                                                            
 var Array.Queue.A._state3724185: [Array.Queue.A]State;                                             
 var tmp263724154: int;                                                                             
 var tmp283724267: int;                                                                             
 var Array.Queue.A._elems3724267: [Array.Queue.A]([int]int);                                        
 var Queue.head3724257: [Queue]int;                                                                 
 var tmp173724096: bool;                                                                            
 var mover3724168: Mover;                                                                           
 var tmp323724257: int;                                                                             
 var Queue.head3724135: [Queue]int;                                                                 
 var Queue.elems3724102: [Queue]Array.Queue.T;                                                      
 var path3724096: int;                                                                              
 var Queue.tail3724185: [Queue]int;                                                                 
 var Array.Queue.T._elems3724267: [Array.Queue.T]([int]int);                                        
 var Array.Queue.T._elems3724185: [Array.Queue.T]([int]int);                                        
 var Array.Queue.T._length3724144: [Array.Queue.T]int;                                              
 var path3724135: int;                                                                              
 var Queue.elems3724144: [Queue]Array.Queue.T;                                                      
 var Queue._lock3724275: [Queue]Tid;                                                                
 var mover3724248: Mover;                                                                           
 var tmp183724185: int;                                                                             
 var Queue._lock3724154: [Queue]Tid;                                                                
 var mover3724102: Mover;                                                                           
 var tmp283724248: int;                                                                             
 var Array.Queue.T._length3724135: [Array.Queue.T]int;                                              
 var tid3724144: Tid;                                                                               
 var tmp20: int;                                                                                    
 var x3724096: int;                                                                                 
 var x3724135: int;                                                                                 
 var tid3724267: Tid;                                                                               
 var tmp263724257: int;                                                                             
 var tmp253724144: int;                                                                             
 var Array.Queue.T._state3724096: [Array.Queue.T]State;                                             
 var tmp263724185: int;                                                                             
 var tmp283724185: int;                                                                             
 var Array.Queue.A._elems3724168: [Array.Queue.A]([int]int);                                        
 var tmp253724168: int;                                                                             
 var mover3724144: Mover;                                                                           
 var Array.Queue.A._length3724275: [Array.Queue.A]int;                                              
 var Array.Queue.T._length3724275: [Array.Queue.T]int;                                              
 var Array.Queue.A._length3724267: [Array.Queue.A]int;                                              
 var tmp24: int;                                                                                    
 var Queue.tail3724144: [Queue]int;                                                                 
 var tmp173724154: bool;                                                                            
 var Queue._lock3724102: [Queue]Tid;                                                                
 var tmp17: bool;                                                                                   
 var Queue._state3724144: [Queue]State;                                                             
 var Queue._state3724267: [Queue]State;                                                             
 var Queue.tail3724248: [Queue]int;                                                                 
 var tmp293724185: int;                                                                             
 var this3724144: Queue;                                                                            
 var Queue._state3724257: [Queue]State;                                                             
 var tmp243724168: int;                                                                             
 var Array.Queue.A._elems3724144: [Array.Queue.A]([int]int);                                        
 var mover3724267: Mover;                                                                           
 var this3724168: Queue;                                                                            
 var tmp223724154: Array.Queue.T;                                                                   
 var Queue._lock3724118: [Queue]Tid;                                                                
 var $recorded.state3724102: int;                                                                   
 var Queue._state3724135: [Queue]State;                                                             
 var tmp22: Array.Queue.T;                                                                          
 var Queue.head3724096: [Queue]int;                                                                 
 var Queue.spec3724144: [Queue]Array.Queue.A;                                                       
 var path3724118: int;                                                                              
 var tid3724102: Tid;                                                                               
 var tmp323724267: int;                                                                             
 var tmp263724248: int;                                                                             
 var tmp313724267: int;                                                                             
 var tmp193724168: int;                                                                             
 var Queue.elems3724168: [Queue]Array.Queue.T;                                                      
 var mover3724118: Mover;                                                                           
 var tid3724154: Tid;                                                                               
 var Queue._state3724096: [Queue]State;                                                             
 var tmp203724267: int;                                                                             
 var Array.Queue.A._elems3724275: [Array.Queue.A]([int]int);                                        
 var tmp25: int;                                                                                    
 var newSpec3724257: Array.Queue.A;                                                                 
 var newSpec: Array.Queue.A;                                                                        
 var this3724267: Queue;                                                                            
 var Queue.head3724144: [Queue]int;                                                                 
 var Queue.head3724168: [Queue]int;                                                                 
 var Array.Queue.T._elems3724144: [Array.Queue.T]([int]int);                                        
 var Array.Queue.A._state3724144: [Array.Queue.A]State;                                             
 var Array.Queue.T._state3724118: [Array.Queue.T]State;                                             
 var Queue.spec3724118: [Queue]Array.Queue.A;                                                       
 var Array.Queue.A._length3724154: [Array.Queue.A]int;                                              
 var tmp243724267: int;                                                                             
 var Array.Queue.T._length3724154: [Array.Queue.T]int;                                              
 var tmp273724168: Array.Queue.T;                                                                   
 var mover3724257: Mover;                                                                           
 var Queue.spec3724185: [Queue]Array.Queue.A;                                                       
 var _pc3724102: Phase;                                                                             
 var tmp29: int;                                                                                    
 var tmp203724102: int;                                                                             
 var tmp31: int;                                                                                    
 var tmp303724248: Array.Queue.A;                                                                   
 var tmp253724257: int;                                                                             
 var Queue.head3724154: [Queue]int;                                                                 
 var Array.Queue.A._elems3724248: [Array.Queue.A]([int]int);                                        
 var Queue.spec3724102: [Queue]Array.Queue.A;                                                       
 var Array.Queue.A._elems3724102: [Array.Queue.A]([int]int);                                        
 var tmp253724185: int;                                                                             
                                                                                                    
 var _pc : Phase;                                                                                   
 _pc := PreCommit;                                                                                  
                                                                                                    
                                                                                                    
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (59.23): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assume Queue._lock[this] == Tid.null;                                                              
 _pc := transition(_pc, _R);                                                                        
 assert _pc != PhaseError;                                                                                 // (59.23): Reduction failure
 Queue._lock[this] := tid;                                                                          
                                                                                                    
 // 60.13: bool tmp17;                                                                              
                                                                                                    
                                                                                                    
 // 60.13: int tmp18;                                                                               
                                                                                                    
                                                                                                    
 // 60.13: int tmp19;                                                                               
                                                                                                    
                                                                                                    
 // 60.13: tmp19 := this.tail;                                                                      
                                                                                                    
                                                                                                    
 moverPath3724096 := ReadEval.Queue.tail(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3724096 := m#moverPath(moverPath3724096);                                                     
 path3724096 := p#moverPath(moverPath3724096);                                                      
 assume Queue._state3724096 == Queue._state && Queue.elems3724096 == Queue.elems && Queue.head3724096 == Queue.head && Queue.tail3724096 == Queue.tail && Queue.spec3724096 == Queue.spec && Queue._lock3724096 == Queue._lock && Array.Queue.T._state3724096 == Array.Queue.T._state && Array.Queue.T._elems3724096 == Array.Queue.T._elems && Array.Queue.T._length3724096 == Array.Queue.T._length && Array.Queue.A._state3724096 == Array.Queue.A._state && Array.Queue.A._elems3724096 == Array.Queue.A._elems && Array.Queue.A._length3724096 == Array.Queue.A._length && tmp193724096 == tmp19 && tmp183724096 == tmp18 && tmp173724096 == tmp17 && x3724096 == x && this3724096 == this && tid3724096 == tid && _pc3724096 == _pc;
 assume $recorded.state3724096 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (60.13): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3724096);                                                              
 assert _pc != PhaseError;                                                                                 // (60.13): Reduction failure
 tmp19 := Queue.tail[this];                                                                         
                                                                                                    
 // 60.13: int tmp20;                                                                               
                                                                                                    
                                                                                                    
 // 60.13: tmp20 := this.head;                                                                      
                                                                                                    
                                                                                                    
 moverPath3724102 := ReadEval.Queue.head(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3724102 := m#moverPath(moverPath3724102);                                                     
 path3724102 := p#moverPath(moverPath3724102);                                                      
 assume Queue._state3724102 == Queue._state && Queue.elems3724102 == Queue.elems && Queue.head3724102 == Queue.head && Queue.tail3724102 == Queue.tail && Queue.spec3724102 == Queue.spec && Queue._lock3724102 == Queue._lock && Array.Queue.T._state3724102 == Array.Queue.T._state && Array.Queue.T._elems3724102 == Array.Queue.T._elems && Array.Queue.T._length3724102 == Array.Queue.T._length && Array.Queue.A._state3724102 == Array.Queue.A._state && Array.Queue.A._elems3724102 == Array.Queue.A._elems && Array.Queue.A._length3724102 == Array.Queue.A._length && tmp203724102 == tmp20 && tmp193724102 == tmp19 && tmp183724102 == tmp18 && tmp173724102 == tmp17 && x3724102 == x && this3724102 == this && tid3724102 == tid && _pc3724102 == _pc;
 assume $recorded.state3724102 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (60.13): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3724102);                                                              
 assert _pc != PhaseError;                                                                                 // (60.13): Reduction failure
 tmp20 := Queue.head[this];                                                                         
                                                                                                    
 // 60.13: tmp18 = tmp19 - tmp20;                                                                   
                                                                                                    
 tmp18 := (tmp19-tmp20);                                                                            
                                                                                                    
 // 60.13: int tmp21;                                                                               
                                                                                                    
                                                                                                    
 // 60.13: [Queue.T{this}] tmp22;                                                                   
                                                                                                    
                                                                                                    
 // 60.13: tmp22 := this.elems;                                                                     
                                                                                                    
                                                                                                    
 moverPath3724118 := ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3724118 := m#moverPath(moverPath3724118);                                                     
 path3724118 := p#moverPath(moverPath3724118);                                                      
 assume Queue._state3724118 == Queue._state && Queue.elems3724118 == Queue.elems && Queue.head3724118 == Queue.head && Queue.tail3724118 == Queue.tail && Queue.spec3724118 == Queue.spec && Queue._lock3724118 == Queue._lock && Array.Queue.T._state3724118 == Array.Queue.T._state && Array.Queue.T._elems3724118 == Array.Queue.T._elems && Array.Queue.T._length3724118 == Array.Queue.T._length && Array.Queue.A._state3724118 == Array.Queue.A._state && Array.Queue.A._elems3724118 == Array.Queue.A._elems && Array.Queue.A._length3724118 == Array.Queue.A._length && tmp223724118 == tmp22 && tmp213724118 == tmp21 && tmp203724118 == tmp20 && tmp193724118 == tmp19 && tmp183724118 == tmp18 && tmp173724118 == tmp17 && x3724118 == x && this3724118 == this && tid3724118 == tid && _pc3724118 == _pc;
 assume $recorded.state3724118 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (60.13): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3724118);                                                              
 assert _pc != PhaseError;                                                                                 // (60.13): Reduction failure
 tmp22 := Queue.elems[this];                                                                        
                                                                                                    
 // 60.13: tmp21 = tmp22.length;                                                                    
                                                                                                    
 tmp21 := Array.Queue.T._length[tmp22];                                                             
                                                                                                    
 // 60.13: tmp17 = tmp18 < tmp21;                                                                   
                                                                                                    
 tmp17 := (tmp18<tmp21);                                                                            
 if (tmp17 /* lowered ((Queue.tail[this]-Queue.head[this])<Array.Queue.T._length[Queue.elems[this]]) */) {
                                                                                                    
  // 61.17: [Queue.T{this}] tmp23;                                                                  
                                                                                                    
                                                                                                    
  // 61.17: tmp23 := this.elems;                                                                    
                                                                                                    
                                                                                                    
  moverPath3724135 := ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3724135 := m#moverPath(moverPath3724135);                                                    
  path3724135 := p#moverPath(moverPath3724135);                                                     
  assume Queue._state3724135 == Queue._state && Queue.elems3724135 == Queue.elems && Queue.head3724135 == Queue.head && Queue.tail3724135 == Queue.tail && Queue.spec3724135 == Queue.spec && Queue._lock3724135 == Queue._lock && Array.Queue.T._state3724135 == Array.Queue.T._state && Array.Queue.T._elems3724135 == Array.Queue.T._elems && Array.Queue.T._length3724135 == Array.Queue.T._length && Array.Queue.A._state3724135 == Array.Queue.A._state && Array.Queue.A._elems3724135 == Array.Queue.A._elems && Array.Queue.A._length3724135 == Array.Queue.A._length && tmp233724135 == tmp23 && tmp223724135 == tmp22 && tmp213724135 == tmp21 && tmp203724135 == tmp20 && tmp193724135 == tmp19 && tmp183724135 == tmp18 && tmp173724135 == tmp17 && x3724135 == x && this3724135 == this && tid3724135 == tid && _pc3724135 == _pc;
  assume $recorded.state3724135 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (61.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3724135);                                                             
  assert _pc != PhaseError;                                                                                // (61.17): Reduction failure
  tmp23 := Queue.elems[this];                                                                       
                                                                                                    
  // 61.17: int tmp24;                                                                              
                                                                                                    
                                                                                                    
  // 61.17: int tmp25;                                                                              
                                                                                                    
                                                                                                    
  // 61.17: tmp25 := this.tail;                                                                     
                                                                                                    
                                                                                                    
  moverPath3724144 := ReadEval.Queue.tail(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3724144 := m#moverPath(moverPath3724144);                                                    
  path3724144 := p#moverPath(moverPath3724144);                                                     
  assume Queue._state3724144 == Queue._state && Queue.elems3724144 == Queue.elems && Queue.head3724144 == Queue.head && Queue.tail3724144 == Queue.tail && Queue.spec3724144 == Queue.spec && Queue._lock3724144 == Queue._lock && Array.Queue.T._state3724144 == Array.Queue.T._state && Array.Queue.T._elems3724144 == Array.Queue.T._elems && Array.Queue.T._length3724144 == Array.Queue.T._length && Array.Queue.A._state3724144 == Array.Queue.A._state && Array.Queue.A._elems3724144 == Array.Queue.A._elems && Array.Queue.A._length3724144 == Array.Queue.A._length && tmp253724144 == tmp25 && tmp243724144 == tmp24 && tmp233724144 == tmp23 && tmp223724144 == tmp22 && tmp213724144 == tmp21 && tmp203724144 == tmp20 && tmp193724144 == tmp19 && tmp183724144 == tmp18 && tmp173724144 == tmp17 && x3724144 == x && this3724144 == this && tid3724144 == tid && _pc3724144 == _pc;
  assume $recorded.state3724144 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (61.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3724144);                                                             
  assert _pc != PhaseError;                                                                                // (61.17): Reduction failure
  tmp25 := Queue.tail[this];                                                                        
                                                                                                    
  // 61.17: int tmp26;                                                                              
                                                                                                    
                                                                                                    
  // 61.17: [Queue.T{this}] tmp27;                                                                  
                                                                                                    
                                                                                                    
  // 61.17: tmp27 := this.elems;                                                                    
                                                                                                    
                                                                                                    
  moverPath3724154 := ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3724154 := m#moverPath(moverPath3724154);                                                    
  path3724154 := p#moverPath(moverPath3724154);                                                     
  assume Queue._state3724154 == Queue._state && Queue.elems3724154 == Queue.elems && Queue.head3724154 == Queue.head && Queue.tail3724154 == Queue.tail && Queue.spec3724154 == Queue.spec && Queue._lock3724154 == Queue._lock && Array.Queue.T._state3724154 == Array.Queue.T._state && Array.Queue.T._elems3724154 == Array.Queue.T._elems && Array.Queue.T._length3724154 == Array.Queue.T._length && Array.Queue.A._state3724154 == Array.Queue.A._state && Array.Queue.A._elems3724154 == Array.Queue.A._elems && Array.Queue.A._length3724154 == Array.Queue.A._length && tmp273724154 == tmp27 && tmp263724154 == tmp26 && tmp253724154 == tmp25 && tmp243724154 == tmp24 && tmp233724154 == tmp23 && tmp223724154 == tmp22 && tmp213724154 == tmp21 && tmp203724154 == tmp20 && tmp193724154 == tmp19 && tmp183724154 == tmp18 && tmp173724154 == tmp17 && x3724154 == x && this3724154 == this && tid3724154 == tid && _pc3724154 == _pc;
  assume $recorded.state3724154 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (61.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3724154);                                                             
  assert _pc != PhaseError;                                                                                // (61.17): Reduction failure
  tmp27 := Queue.elems[this];                                                                       
                                                                                                    
  // 61.17: tmp26 = tmp27.length;                                                                   
                                                                                                    
  tmp26 := Array.Queue.T._length[tmp27];                                                            
                                                                                                    
  // 61.17: tmp24 = tmp25 % tmp26;                                                                  
                                                                                                    
  tmp24 := MOD(tmp25, tmp26);                                                                       
                                                                                                    
  // 61.17: tmp23[tmp24] := x;                                                                      
                                                                                                    
                                                                                                    
  moverPath3724168 := WriteEval.Array.Queue.T(tid: Tid,this: Queue,tmp23: Array.Queue.T,tmp24: int,x: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3724168 := m#moverPath(moverPath3724168);                                                    
  path3724168 := p#moverPath(moverPath3724168);                                                     
  assume Queue._state3724168 == Queue._state && Queue.elems3724168 == Queue.elems && Queue.head3724168 == Queue.head && Queue.tail3724168 == Queue.tail && Queue.spec3724168 == Queue.spec && Queue._lock3724168 == Queue._lock && Array.Queue.T._state3724168 == Array.Queue.T._state && Array.Queue.T._elems3724168 == Array.Queue.T._elems && Array.Queue.T._length3724168 == Array.Queue.T._length && Array.Queue.A._state3724168 == Array.Queue.A._state && Array.Queue.A._elems3724168 == Array.Queue.A._elems && Array.Queue.A._length3724168 == Array.Queue.A._length && tmp273724168 == tmp27 && tmp263724168 == tmp26 && tmp253724168 == tmp25 && tmp243724168 == tmp24 && tmp233724168 == tmp23 && tmp223724168 == tmp22 && tmp213724168 == tmp21 && tmp203724168 == tmp20 && tmp193724168 == tmp19 && tmp183724168 == tmp18 && tmp173724168 == tmp17 && x3724168 == x && this3724168 == this && tid3724168 == tid && _pc3724168 == _pc;
  assume $recorded.state3724168 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume tmp23 != Array.Queue.T.null;                                                              
  } else {                                                                                          
   assert tmp23 != Array.Queue.T.null;                                                                     // (61.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  if (_pc == PreCommit) {                                                                           
   assume 0 <= tmp24;                                                                               
  } else {                                                                                          
   assert 0 <= tmp24;                                                                                      // (61.17): index < 0.
  }                                                                                                 
  if (_pc == PreCommit) {                                                                           
   assume tmp24 < Array.Queue.T._length[tmp23];                                                     
  } else {                                                                                          
   assert tmp24 < Array.Queue.T._length[tmp23];                                                            // (61.17): index is >= length.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3724168);                                                             
  assert _pc != PhaseError;                                                                                // (61.17): Reduction failure
  Array.Queue.T._elems[tmp23][tmp24] := x;                                                          
                                                                                                    
  // 62.21: [Queue.A{this}] newSpec;                                                                
                                                                                                    
                                                                                                    
  // 62.21: int tmp28;                                                                              
                                                                                                    
                                                                                                    
  // 62.21: int tmp29;                                                                              
                                                                                                    
                                                                                                    
  // 62.21: [Queue.A{this}] tmp30;                                                                  
                                                                                                    
                                                                                                    
  // 62.21: tmp30 := this.spec;                                                                     
                                                                                                    
                                                                                                    
  moverPath3724185 := ReadEval.Queue.spec(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3724185 := m#moverPath(moverPath3724185);                                                    
  path3724185 := p#moverPath(moverPath3724185);                                                     
  assume Queue._state3724185 == Queue._state && Queue.elems3724185 == Queue.elems && Queue.head3724185 == Queue.head && Queue.tail3724185 == Queue.tail && Queue.spec3724185 == Queue.spec && Queue._lock3724185 == Queue._lock && Array.Queue.T._state3724185 == Array.Queue.T._state && Array.Queue.T._elems3724185 == Array.Queue.T._elems && Array.Queue.T._length3724185 == Array.Queue.T._length && Array.Queue.A._state3724185 == Array.Queue.A._state && Array.Queue.A._elems3724185 == Array.Queue.A._elems && Array.Queue.A._length3724185 == Array.Queue.A._length && tmp303724185 == tmp30 && tmp293724185 == tmp29 && tmp283724185 == tmp28 && newSpec3724185 == newSpec && tmp273724185 == tmp27 && tmp263724185 == tmp26 && tmp253724185 == tmp25 && tmp243724185 == tmp24 && tmp233724185 == tmp23 && tmp223724185 == tmp22 && tmp213724185 == tmp21 && tmp203724185 == tmp20 && tmp193724185 == tmp19 && tmp183724185 == tmp18 && tmp173724185 == tmp17 && x3724185 == x && this3724185 == this && tid3724185 == tid && _pc3724185 == _pc;
  assume $recorded.state3724185 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (62.21): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3724185);                                                             
  assert _pc != PhaseError;                                                                                // (62.21): Reduction failure
  tmp30 := Queue.spec[this];                                                                        
                                                                                                    
  // 62.21: tmp29 = tmp30.length;                                                                   
                                                                                                    
  tmp29 := Array.Queue.A._length[tmp30];                                                            
                                                                                                    
  // 62.21: tmp28 = tmp29 + 1;                                                                      
                                                                                                    
  tmp28 := (tmp29+1);                                                                               
                                                                                                    
  // 62.21: newSpec = new [Queue.A{this}](tmp28);                                                   
                                                                                                    
  havoc newSpec;                                                                                    
  assume isFresh(Array.Queue.A._state[newSpec]);                                                    
  assume Array.Queue.A._length[newSpec] == tmp28;                                                   
  assume Array.Queue.A._this[newSpec] == this;                                                      
  Array.Queue.A._state[newSpec] := LOCAL(tid);                                                      
  assume (forall _i : int :: 0 <= _i ==> Array.Queue.A._elems[newSpec][_i] == 0);                   
                                                                                                    
  // 63.17: assume forall int i ::0 <= i && i < this.tail - this.head ==> newSpec[i] == this.spec[i];
                                                                                                    
  assume (forall i: int ::  ((((0<=i)&&(i<(Queue.tail[this]-Queue.head[this])))==>(Array.Queue.A._elems[newSpec][i]==Array.Queue.A._elems[Queue.spec[this]][i]))));
                                                                                                    
  // 64.17: assume newSpec[this.tail % this.elems.length] == x;                                     
                                                                                                    
  assume (Array.Queue.A._elems[newSpec][MOD(Queue.tail[this], Array.Queue.T._length[Queue.elems[this]])]==x);
                                                                                                    
                                                                                                    
  // 65.17: this.spec := newSpec;                                                                   
                                                                                                    
                                                                                                    
  moverPath3724248 := WriteEval.Queue.spec(tid: Tid,this: Queue,newSpec: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3724248 := m#moverPath(moverPath3724248);                                                    
  path3724248 := p#moverPath(moverPath3724248);                                                     
  assume Queue._state3724248 == Queue._state && Queue.elems3724248 == Queue.elems && Queue.head3724248 == Queue.head && Queue.tail3724248 == Queue.tail && Queue.spec3724248 == Queue.spec && Queue._lock3724248 == Queue._lock && Array.Queue.T._state3724248 == Array.Queue.T._state && Array.Queue.T._elems3724248 == Array.Queue.T._elems && Array.Queue.T._length3724248 == Array.Queue.T._length && Array.Queue.A._state3724248 == Array.Queue.A._state && Array.Queue.A._elems3724248 == Array.Queue.A._elems && Array.Queue.A._length3724248 == Array.Queue.A._length && tmp303724248 == tmp30 && tmp293724248 == tmp29 && tmp283724248 == tmp28 && newSpec3724248 == newSpec && tmp273724248 == tmp27 && tmp263724248 == tmp26 && tmp253724248 == tmp25 && tmp243724248 == tmp24 && tmp233724248 == tmp23 && tmp223724248 == tmp22 && tmp213724248 == tmp21 && tmp203724248 == tmp20 && tmp193724248 == tmp19 && tmp183724248 == tmp18 && tmp173724248 == tmp17 && x3724248 == x && this3724248 == this && tid3724248 == tid && _pc3724248 == _pc;
  assume $recorded.state3724248 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (65.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  _pc := transition(_pc, mover3724248);                                                             
  assert _pc != PhaseError;                                                                                // (65.17): Reduction failure
  Queue.spec[this] := newSpec;                                                                      
  if (isLocal(Array.Queue.A._state[newSpec], tid)) {                                                
   Array.Queue.A._state[newSpec] := SHARED();                                                       
   if (isLocal(Queue._state[Array.Queue.A._this[newSpec]], tid)) {                                  
    Queue._state[Array.Queue.A._this[newSpec]] := SHARED();                                         
    assert isSharedAssignable(Array.Queue.T._state[Queue.elems[Array.Queue.A._this[newSpec]]]);            // (65.17): newSpec became shared, but Array.Queue.A._this[newSpec].elems may not be shared.
    assert isSharedAssignable(Array.Queue.A._state[Queue.spec[Array.Queue.A._this[newSpec]]]);             // (65.17): newSpec became shared, but Array.Queue.A._this[newSpec].spec may not be shared.
   }                                                                                                
  }                                                                                                 
                                                                                                    
                                                                                                    
  // 66.17: int tmp31;                                                                              
                                                                                                    
                                                                                                    
  // 66.17: int tmp32;                                                                              
                                                                                                    
                                                                                                    
  // 66.17: tmp32 := this.tail;                                                                     
                                                                                                    
                                                                                                    
  moverPath3724257 := ReadEval.Queue.tail(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3724257 := m#moverPath(moverPath3724257);                                                    
  path3724257 := p#moverPath(moverPath3724257);                                                     
  assume Queue._state3724257 == Queue._state && Queue.elems3724257 == Queue.elems && Queue.head3724257 == Queue.head && Queue.tail3724257 == Queue.tail && Queue.spec3724257 == Queue.spec && Queue._lock3724257 == Queue._lock && Array.Queue.T._state3724257 == Array.Queue.T._state && Array.Queue.T._elems3724257 == Array.Queue.T._elems && Array.Queue.T._length3724257 == Array.Queue.T._length && Array.Queue.A._state3724257 == Array.Queue.A._state && Array.Queue.A._elems3724257 == Array.Queue.A._elems && Array.Queue.A._length3724257 == Array.Queue.A._length && tmp323724257 == tmp32 && tmp313724257 == tmp31 && tmp303724257 == tmp30 && tmp293724257 == tmp29 && tmp283724257 == tmp28 && newSpec3724257 == newSpec && tmp273724257 == tmp27 && tmp263724257 == tmp26 && tmp253724257 == tmp25 && tmp243724257 == tmp24 && tmp233724257 == tmp23 && tmp223724257 == tmp22 && tmp213724257 == tmp21 && tmp203724257 == tmp20 && tmp193724257 == tmp19 && tmp183724257 == tmp18 && tmp173724257 == tmp17 && x3724257 == x && this3724257 == this && tid3724257 == tid && _pc3724257 == _pc;
  assume $recorded.state3724257 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (66.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3724257);                                                             
  assert _pc != PhaseError;                                                                                // (66.17): Reduction failure
  tmp32 := Queue.tail[this];                                                                        
                                                                                                    
  // 66.17: tmp31 = tmp32 + 1;                                                                      
                                                                                                    
  tmp31 := (tmp32+1);                                                                               
                                                                                                    
                                                                                                    
  // 66.17: this.tail := tmp31;                                                                     
                                                                                                    
                                                                                                    
  moverPath3724267 := WriteEval.Queue.tail(tid: Tid,this: Queue,tmp31: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3724267 := m#moverPath(moverPath3724267);                                                    
  path3724267 := p#moverPath(moverPath3724267);                                                     
  assume Queue._state3724267 == Queue._state && Queue.elems3724267 == Queue.elems && Queue.head3724267 == Queue.head && Queue.tail3724267 == Queue.tail && Queue.spec3724267 == Queue.spec && Queue._lock3724267 == Queue._lock && Array.Queue.T._state3724267 == Array.Queue.T._state && Array.Queue.T._elems3724267 == Array.Queue.T._elems && Array.Queue.T._length3724267 == Array.Queue.T._length && Array.Queue.A._state3724267 == Array.Queue.A._state && Array.Queue.A._elems3724267 == Array.Queue.A._elems && Array.Queue.A._length3724267 == Array.Queue.A._length && tmp323724267 == tmp32 && tmp313724267 == tmp31 && tmp303724267 == tmp30 && tmp293724267 == tmp29 && tmp283724267 == tmp28 && newSpec3724267 == newSpec && tmp273724267 == tmp27 && tmp263724267 == tmp26 && tmp253724267 == tmp25 && tmp243724267 == tmp24 && tmp233724267 == tmp23 && tmp223724267 == tmp22 && tmp213724267 == tmp21 && tmp203724267 == tmp20 && tmp193724267 == tmp19 && tmp183724267 == tmp18 && tmp173724267 == tmp17 && x3724267 == x && this3724267 == this && tid3724267 == tid && _pc3724267 == _pc;
  assume $recorded.state3724267 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (66.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  _pc := transition(_pc, mover3724267);                                                             
  assert _pc != PhaseError;                                                                                // (66.17): Reduction failure
  Queue.tail[this] := tmp31;                                                                        
 } else {                                                                                           
 }                                                                                                  
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (68.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assert Queue._lock[this] == tid;                                                                          // (68.9): lock not held
 _pc := transition(_pc, _L);                                                                        
 assert _pc != PhaseError;                                                                                 // (68.9): Reduction failure
 Queue._lock[this] := Tid.null;                                                                     
                                                                                                    
 // 58.32: // return;                                                                               
                                                                                                    
 assume Queue._state3724275 == Queue._state && Queue.elems3724275 == Queue.elems && Queue.head3724275 == Queue.head && Queue.tail3724275 == Queue.tail && Queue.spec3724275 == Queue.spec && Queue._lock3724275 == Queue._lock && Array.Queue.T._state3724275 == Array.Queue.T._state && Array.Queue.T._elems3724275 == Array.Queue.T._elems && Array.Queue.T._length3724275 == Array.Queue.T._length && Array.Queue.A._state3724275 == Array.Queue.A._state && Array.Queue.A._elems3724275 == Array.Queue.A._elems && Array.Queue.A._length3724275 == Array.Queue.A._length && x3724275 == x && this3724275 == this && tid3724275 == tid;
 assume $recorded.state3724275 == 1;                                                                
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (58.32): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (58.32): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (58.32): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (58.32): Object invariant may not hold.
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
/*** Array Array.Queue.T ***/                                                                       
                                                                                                    
type Array.Queue.T;                                                                                 
const unique Array.Queue.T.null: Array.Queue.T;                                                     
var Array.Queue.T._state: [Array.Queue.T]State;                                                     
                                                                                                    
const Array.Queue.T._this : [Array.Queue.T]Queue;                                                   
const Array.Queue.T._length : [Array.Queue.T]int;                                                   
var Array.Queue.T._elems  : [Array.Queue.T]([int]int);                                              
                                                                                                    
axiom (forall $this : Array.Queue.T :: Array.Queue.T._length[$this] >= 0);                          
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
// Array.Queue.T: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),Cond(Holds(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E())))),false,List())
                                                                                                    
function {:inline} ReadEval.Array.Queue.T(tid: Tid,this : Queue,athis : Array.Queue.T,index : int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
// Array.Queue.T: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),Cond(Holds(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E())))),false,List())
                                                                                                    
function {:inline} WriteEval.Array.Queue.T(tid: Tid,this : Queue,athis : Array.Queue.T,index : int,newValue: int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
                                                                                                    
/*** Array Array.Queue.A ***/                                                                       
                                                                                                    
type Array.Queue.A;                                                                                 
const unique Array.Queue.A.null: Array.Queue.A;                                                     
var Array.Queue.A._state: [Array.Queue.A]State;                                                     
                                                                                                    
const Array.Queue.A._this : [Array.Queue.A]Queue;                                                   
const Array.Queue.A._length : [Array.Queue.A]int;                                                   
var Array.Queue.A._elems  : [Array.Queue.A]([int]int);                                              
                                                                                                    
axiom (forall $this : Array.Queue.A :: Array.Queue.A._length[$this] >= 0);                          
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
// Array.Queue.A: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),Cond(VarAccess(isRead),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E())))),false,List())
                                                                                                    
function {:inline} ReadEval.Array.Queue.A(tid: Tid,this : Queue,athis : Array.Queue.A,index : int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
// Array.Queue.A: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),Cond(VarAccess(isRead),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E())))),false,List())
                                                                                                    
function {:inline} WriteEval.Array.Queue.A(tid: Tid,this : Queue,athis : Array.Queue.A,index : int,newValue: int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// Globals                                                                                        
                                                                                                    
                                                                                                    
//// State Invariant                                                                                
                                                                                                    
 function {:inline} StateInvariant(Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
  true &&                                                                                           
  (forall _i: Queue  :: _i == Queue.null <==> isNull(Queue._state[_i])) &&                          
  (forall _i: Array.Queue.T  :: _i == Array.Queue.T.null <==> isNull(Array.Queue.T._state[_i])) &&  
  (forall _i: Array.Queue.A  :: _i == Array.Queue.A.null <==> isNull(Array.Queue.A._state[_i])) &&  
  (forall _t: Tid, _i: Array.Queue.T  :: ValidTid(_t) && isAccessible(Array.Queue.T._state[_i], _t) ==> isAccessible(Queue._state[Array.Queue.T._this[_i]], _t)) &&
  (forall _t: Tid, _i: Array.Queue.A  :: ValidTid(_t) && isAccessible(Array.Queue.A._state[_i], _t) ==> isAccessible(Queue._state[Array.Queue.A._this[_i]], _t)) &&
  (forall _i: Queue :: { Array.Queue.T._state[Queue.elems[_i]] } (isShared(Queue._state[_i]) ==> isSharedAssignable(Array.Queue.T._state[Queue.elems[_i]]))) &&
  (forall _i: Queue :: { Array.Queue.T._state[Queue.elems[_i]] } (forall _t: Tid :: (ValidTid(_t) && isLocal(Queue._state[_i],_t) ==> isLocalAssignable(Array.Queue.T._state[Queue.elems[_i]], _t)))) &&
  (forall _i: Queue :: { Queue.elems[_i] } Array.Queue.T._this[Queue.elems[_i]] == _i) &&           
  (forall _i: Queue :: { Array.Queue.A._state[Queue.spec[_i]] } (isShared(Queue._state[_i]) ==> isSharedAssignable(Array.Queue.A._state[Queue.spec[_i]]))) &&
  (forall _i: Queue :: { Array.Queue.A._state[Queue.spec[_i]] } (forall _t: Tid :: (ValidTid(_t) && isLocal(Queue._state[_i],_t) ==> isLocalAssignable(Array.Queue.A._state[Queue.spec[_i]], _t)))) &&
  (forall _i: Queue :: { Queue.spec[_i] } Array.Queue.A._this[Queue.spec[_i]] == _i) &&             
  _trigger(0) &&                                                                                    
  _trigger(1) &&                                                                                    
  _trigger(2) &&                                                                                    
  _trigger(3)                                                                                       
 }                                                                                                  
//// Spec Checks                                                                                    
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.elems[x] := v;                                                                               
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.elems(u: Tid,x: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (8.5): Queue.elems failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.elems[x] := v;                                                                               
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Queue.elems(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (8.5): Queue.elems failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Queue.T;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.elems[x];                                                                        
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Queue.elems[x] := havocValue;                                                                      
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.elems(u: Tid,x: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (8.5): Queue.elems failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Array.Queue.T;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.elems[x];                                                                        
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Queue.elems(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (8.5): Queue.elems failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,x: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (8.5): Queue.elems failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Queue.T;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Queue.elems[x];                                                                        
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Queue.elems[x] := havocValue;                                                                      
 _writeByU := WriteEval.Queue.elems(u: Tid,x: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (8.5): Queue.elems failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)         
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.head[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.head(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (10.5): Queue.head failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)          
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.head[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Queue.head(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (10.5): Queue.head failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)          
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.head[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Queue.head[x] := havocValue;                                                                       
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.head(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (10.5): Queue.head failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)           
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.head[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Queue.head(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (10.5): Queue.head failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)               
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (10.5): Queue.head failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)                
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Queue.head[x];                                                                         
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Queue.head[x] := havocValue;                                                                       
 _writeByU := WriteEval.Queue.head(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (10.5): Queue.head failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)         
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.tail[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.tail(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (11.5): Queue.tail failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)          
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.tail[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Queue.tail(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (11.5): Queue.tail failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)          
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.tail[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Queue.tail[x] := havocValue;                                                                       
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.tail(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (11.5): Queue.tail failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)           
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.tail[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Queue.tail(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (11.5): Queue.tail failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)               
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (11.5): Queue.tail failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)                
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Queue.tail[x];                                                                         
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Queue.tail[x] := havocValue;                                                                       
 _writeByU := WriteEval.Queue.tail(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (11.5): Queue.tail failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.spec[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.spec(u: Tid,x: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (19.5): Queue.spec failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.spec[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Queue.spec(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (19.5): Queue.spec failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Queue.A;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.spec[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Queue.spec[x] := havocValue;                                                                       
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.spec(u: Tid,x: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (19.5): Queue.spec failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Array.Queue.A;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.spec[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Queue.spec(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (19.5): Queue.spec failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,x: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (19.5): Queue.spec failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Queue.A;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Queue.spec[x];                                                                         
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Queue.spec[x] := havocValue;                                                                       
 _writeByU := WriteEval.Queue.spec(u: Tid,x: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (19.5): Queue.spec failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Queue.T._elems[x][i] := v;                                                                   
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (6.5): Array Array.Queue.T failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Queue.T._elems[x][i] := v;                                                                   
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (6.5): Array Array.Queue.T failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Array.Queue.T._elems[x][i];                                                            
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Array.Queue.T._elems[x][i] := havocValue;                                                          
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (6.5): Array Array.Queue.T failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Array.Queue.T._elems[x][i];                                                            
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (6.5): Array Array.Queue.T failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (6.5): Array Array.Queue.T failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Array.Queue.T._elems[x][i];                                                            
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Array.Queue.T._elems[x][i] := havocValue;                                                          
 _writeByU := WriteEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (6.5): Array Array.Queue.T failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Queue.A._elems[x][i] := v;                                                                   
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (18.5): Array Array.Queue.A failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Queue.A._elems[x][i] := v;                                                                   
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (18.5): Array Array.Queue.A failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Array.Queue.A._elems[x][i];                                                            
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Array.Queue.A._elems[x][i] := havocValue;                                                          
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (18.5): Array Array.Queue.A failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Array.Queue.A._elems[x][i];                                                            
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (18.5): Array Array.Queue.A failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (18.5): Array Array.Queue.A failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Array.Queue.A._elems[x][i];                                                            
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Array.Queue.A._elems[x][i] := havocValue;                                                          
 _writeByU := WriteEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (18.5): Array Array.Queue.A failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Queue.head(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Queue.head(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Queue.head(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Queue.head(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Queue.head(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Queue.tail(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Queue.tail(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Queue.tail(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Queue.tail(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Queue.tail(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Queue.spec(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Queue.spec(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Queue.spec(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Queue.spec(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Queue.spec(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Queue.elems(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Queue.elems(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Queue.elems(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Queue.elems(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Queue.elems(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Queue.head(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Queue.head(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Queue.head(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Queue.head(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Queue.head(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Queue.tail(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Queue.tail(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Queue.tail(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Queue.tail(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Queue.tail(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
procedure Yield(tid: Tid);                                                                          
requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
requires ValidTid(tid);                                                                             
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
modifies Queue._state;                                                                              
modifies Queue.elems;                                                                               
modifies Queue.head;                                                                                
modifies Queue.tail;                                                                                
modifies Queue.spec;                                                                                
modifies Queue._lock;                                                                               
modifies Array.Queue.T._state;                                                                      
modifies Array.Queue.T._elems;                                                                      
modifies Array.Queue.A._state;                                                                      
modifies Array.Queue.A._elems;                                                                      
ensures StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
ensures Y(tid , old(Queue._state), old(Queue.elems), old(Queue.head), old(Queue.tail), old(Queue.spec), old(Queue._lock), old(Array.Queue.T._state), old(Array.Queue.T._elems), old(Array.Queue.T._length), old(Array.Queue.A._state), old(Array.Queue.A._elems), old(Array.Queue.A._length) , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
                                                                                                    
// Queue.elems:                                                                                     
                                                                                                    
function {:inline} Y_Queue.elems(tid : Tid, this: Queue, newValue: Array.Queue.T , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
 ((isAccessible(Queue._state[this], tid) && leq(m#moverPath(ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Queue.elems[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Queue.elems.Subsumes.W(tid : Tid, u : Tid, this: Queue, newValue: Array.Queue.T , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume isAccessible(Queue._state[this], u);                                                        
 assume !isError(m#moverPath(WriteEval.Queue.elems(u: Tid,this: Queue,newValue: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.elems(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.elems.Reflexive(tid : Tid, this: Queue , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.elems(tid, this, Queue.elems[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.elems.Transitive(tid : Tid, this: Queue, newValue : Array.Queue.T , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (8.24): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (8.24): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (8.24): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (8.24): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var newValue_pre: Array.Queue.T;                                                                    
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var newValue_post: Array.Queue.T;                                                                   
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Queue.elems(tid, this, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Queue.elems(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Queue.head:                                                                                      
                                                                                                    
function {:inline} Y_Queue.head(tid : Tid, this: Queue, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
 ((isAccessible(Queue._state[this], tid) && leq(m#moverPath(ReadEval.Queue.head(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Queue.head[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Queue.head.Subsumes.W(tid : Tid, u : Tid, this: Queue, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume isAccessible(Queue._state[this], u);                                                        
 assume !isError(m#moverPath(WriteEval.Queue.head(u: Tid,this: Queue,newValue: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.head(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.head.Reflexive(tid : Tid, this: Queue , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.head(tid, this, Queue.head[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.head.Transitive(tid : Tid, this: Queue, newValue : int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (10.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (10.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (10.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (10.32): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var newValue_pre: int;                                                                              
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var newValue_post: int;                                                                             
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Queue.head(tid, this, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Queue.head(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Queue.tail:                                                                                      
                                                                                                    
function {:inline} Y_Queue.tail(tid : Tid, this: Queue, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
 ((isAccessible(Queue._state[this], tid) && leq(m#moverPath(ReadEval.Queue.tail(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Queue.tail[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Queue.tail.Subsumes.W(tid : Tid, u : Tid, this: Queue, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume isAccessible(Queue._state[this], u);                                                        
 assume !isError(m#moverPath(WriteEval.Queue.tail(u: Tid,this: Queue,newValue: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.tail(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.tail.Reflexive(tid : Tid, this: Queue , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.tail(tid, this, Queue.tail[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.tail.Transitive(tid : Tid, this: Queue, newValue : int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (11.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (11.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (11.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (11.32): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var newValue_pre: int;                                                                              
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var newValue_post: int;                                                                             
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Queue.tail(tid, this, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Queue.tail(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Queue.spec:                                                                                      
                                                                                                    
function {:inline} Y_Queue.spec(tid : Tid, this: Queue, newValue: Array.Queue.A , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
 ((isAccessible(Queue._state[this], tid) && leq(m#moverPath(ReadEval.Queue.spec(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Queue.spec[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Queue.spec.Subsumes.W(tid : Tid, u : Tid, this: Queue, newValue: Array.Queue.A , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume isAccessible(Queue._state[this], u);                                                        
 assume !isError(m#moverPath(WriteEval.Queue.spec(u: Tid,this: Queue,newValue: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.spec(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.spec.Reflexive(tid : Tid, this: Queue , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.spec(tid, this, Queue.spec[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.spec.Transitive(tid : Tid, this: Queue, newValue : Array.Queue.A , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (19.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (19.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (19.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (19.32): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var newValue_pre: Array.Queue.A;                                                                    
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var newValue_post: Array.Queue.A;                                                                   
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Queue.spec(tid, this, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Queue.spec(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Queue._lock:                                                                                     
                                                                                                    
function {:inline} Y_Queue._lock(tid : Tid, this: Queue, newValue: Tid , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
 ((isAccessible(Queue._state[this], tid) && leq(m#moverPath(ReadEval.Queue._lock(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Queue._lock[this] == newValue))
 &&(((Queue._lock[this]==tid)==(newValue==tid)))                                                    
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Queue._lock.Subsumes.W(tid : Tid, u : Tid, this: Queue, newValue: Tid , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume isAccessible(Queue._state[this], u);                                                        
 assume !isError(m#moverPath(WriteEval.Queue._lock(u: Tid,this: Queue,newValue: Tid,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
 assume leq(m#moverPath(ReadEval.Queue._lock(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _N);
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue._lock(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue._lock.Reflexive(tid : Tid, this: Queue , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue._lock(tid, this, Queue._lock[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue._lock.Transitive(tid : Tid, this: Queue, newValue : Tid , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (3.1): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (3.1): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (3.1): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (3.1): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var newValue_pre: Tid;                                                                              
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var newValue_post: Tid;                                                                             
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Queue._lock(tid, this, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Queue._lock(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Array.Queue.T:                                                                                   
                                                                                                    
function {:inline} Y_Array.Queue.T(tid : Tid, athis: Array.Queue.T, index: int, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
(var this := Array.Queue.T._this[athis];                                                            
 ((isAccessible(Array.Queue.T._state[athis], tid) && leq(m#moverPath(ReadEval.Array.Queue.T(tid: Tid,Array.Queue.T._this[athis]: Queue,athis: Array.Queue.T,index: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Array.Queue.T._elems[athis][index] == newValue))
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.T.Subsumes.W(tid : Tid, u : Tid, this: Queue, athis: Array.Queue.T, index: int, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
 requires this == Array.Queue.T._this[athis];                                                       
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var athis_yield: Array.Queue.T;                                                                     
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var index_yield: int;                                                                               
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Array.Queue.T._state[athis], u);                                               
 assume !isError(m#moverPath(WriteEval.Array.Queue.T(u: Tid,Array.Queue.T._this[athis]: Queue,athis: Array.Queue.T,index: int,newValue: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Queue.T(tid, athis, index, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.T.Reflexive(tid : Tid, this: Queue, athis: Array.Queue.T, index: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires this == Array.Queue.T._this[athis];                                                       
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var athis_yield: Array.Queue.T;                                                                     
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var index_yield: int;                                                                               
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Array.Queue.T._state[athis], tid);                                             
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Queue.T(tid, athis, index, Array.Queue.T._elems[athis][index] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.T.Transitive(tid : Tid, this: Queue, athis: Array.Queue.T, index: int, newValue : int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (6.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (6.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (6.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (6.28): Object invariant may not hold.
                                                                                                    
 requires this == Array.Queue.T._this[athis];                                                       
 requires ValidTid(tid);                                                                            
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var index_pre: int;                                                                                 
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var athis_pre: Array.Queue.T;                                                                       
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var athis_post: Array.Queue.T;                                                                      
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var index_post: int;                                                                                
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && athis_pre == athis && index_pre == index && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && athis_post == athis && index_post == index && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assume isAccessible(Array.Queue.T._state[athis], tid);                                             
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Array.Queue.T(tid, athis, index, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assert Y_Array.Queue.T(tid, athis, index, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Array.Queue.A:                                                                                   
                                                                                                    
function {:inline} Y_Array.Queue.A(tid : Tid, athis: Array.Queue.A, index: int, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
(var this := Array.Queue.A._this[athis];                                                            
 ((isAccessible(Array.Queue.A._state[athis], tid) && leq(m#moverPath(ReadEval.Array.Queue.A(tid: Tid,Array.Queue.A._this[athis]: Queue,athis: Array.Queue.A,index: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Array.Queue.A._elems[athis][index] == newValue))
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.A.Subsumes.W(tid : Tid, u : Tid, this: Queue, athis: Array.Queue.A, index: int, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
 requires this == Array.Queue.A._this[athis];                                                       
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var athis_yield: Array.Queue.A;                                                                     
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var index_yield: int;                                                                               
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Array.Queue.A._state[athis], u);                                               
 assume !isError(m#moverPath(WriteEval.Array.Queue.A(u: Tid,Array.Queue.A._this[athis]: Queue,athis: Array.Queue.A,index: int,newValue: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Queue.A(tid, athis, index, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.A.Reflexive(tid : Tid, this: Queue, athis: Array.Queue.A, index: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires this == Array.Queue.A._this[athis];                                                       
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var athis_yield: Array.Queue.A;                                                                     
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var index_yield: int;                                                                               
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Array.Queue.A._state[athis], tid);                                             
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Queue.A(tid, athis, index, Array.Queue.A._elems[athis][index] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.A.Transitive(tid : Tid, this: Queue, athis: Array.Queue.A, index: int, newValue : int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717290(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (18.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717298(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (18.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717310(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (18.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3717348(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (18.28): Object invariant may not hold.
                                                                                                    
 requires this == Array.Queue.A._this[athis];                                                       
 requires ValidTid(tid);                                                                            
{                                                                                                   
var athis_pre: Array.Queue.A;                                                                       
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var index_pre: int;                                                                                 
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var index_post: int;                                                                                
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var athis_post: Array.Queue.A;                                                                      
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && athis_pre == athis && index_pre == index && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && athis_post == athis && index_post == index && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assume isAccessible(Array.Queue.A._state[athis], tid);                                             
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Array.Queue.A(tid, athis, index, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assert Y_Array.Queue.A(tid, athis, index, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
                                                                                                    
function {:inline} Y(tid : Tid , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int): bool
{                                                                                                   
 (forall this: Queue :: Y_Queue.elems(tid : Tid, this, Queue.elems_p[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall this: Queue :: Y_Queue.head(tid : Tid, this, Queue.head_p[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall this: Queue :: Y_Queue.tail(tid : Tid, this, Queue.tail_p[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall this: Queue :: Y_Queue.spec(tid : Tid, this, Queue.spec_p[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall this: Queue :: Y_Queue._lock(tid : Tid, this, Queue._lock_p[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall athis: Array.Queue.T, index: int :: Y_Array.Queue.T(tid : Tid, athis, index, Array.Queue.T._elems_p[athis][index] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall athis: Array.Queue.A, index: int :: Y_Array.Queue.A(tid : Tid, athis, index, Array.Queue.A._elems_p[athis][index] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall _i : Queue :: isShared(Queue._state[_i]) ==> isShared(Queue._state_p[_i]))              
 && (forall _i : Queue :: isLocal(Queue._state[_i], tid) <==> isLocal(Queue._state_p[_i], tid))     
 && (forall _i : Array.Queue.T :: isShared(Array.Queue.T._state[_i]) ==> isShared(Array.Queue.T._state_p[_i]))
 && (forall _i : Array.Queue.T :: Array.Queue.T._length[_i] == Array.Queue.T._length_p[_i])         
 && (forall _i : Array.Queue.T :: isLocal(Array.Queue.T._state[_i], tid) <==> isLocal(Array.Queue.T._state_p[_i], tid))
 && (forall _i : Array.Queue.A :: isShared(Array.Queue.A._state[_i]) ==> isShared(Array.Queue.A._state_p[_i]))
 && (forall _i : Array.Queue.A :: Array.Queue.A._length[_i] == Array.Queue.A._length_p[_i])         
 && (forall _i : Array.Queue.A :: isLocal(Array.Queue.A._state[_i], tid) <==> isLocal(Array.Queue.A._state_p[_i], tid))
                                                                                                    
}                                                                                                   
                                                                                                    
                                                                                                    
// 1192.1-1497.2: (Method:26.5)
// 1206.1-1206.24: (26.5): Bad tid
// 1214.1-1214.368: (26.5): Object invariant may not hold.
// 1215.1-1215.368: (26.5): Object invariant may not hold.
// 1216.1-1216.368: (26.5): Object invariant may not hold.
// 1217.1-1217.368: (26.5): Object invariant may not hold.
// 1220.1-1220.358: (26.5): Object invariant may not hold.
// 1221.1-1221.358: (26.5): Object invariant may not hold.
// 1222.1-1222.358: (26.5): Object invariant may not hold.
// 1223.1-1223.358: (26.5): Object invariant may not hold.
// 1340.1-1340.279: (26.5): Can only have right-mover memory accesses in requires clause
// 1341.1-1341.278: (26.5): Can only have right-mover memory accesses in requires clause
// 1343.2-1346.49: (class anchor.sink.Assume:26.5)
// 1347.2-1350.31: (class anchor.sink.Assume:26.5)
// 1351.2-1354.31: (class anchor.sink.Assume:26.5)
// 1355.2-1358.48: (class anchor.sink.Assume:26.5)
// 1359.2-1361.2: (class anchor.sink.VarDeclStmt:27.9)
// 1362.2-1365.12: (class anchor.sink.Assign:27.9)
// 1367.2-1383.27: (class anchor.sink.Write:27.9)
// 1379.1-1379.29: (27.9): Cannot have potential null deference in left-mover part.
// 1382.1-1382.27: (27.9): Reduction failure
// 1384.2-1386.2: (class anchor.sink.VarDeclStmt:28.9)
// 1387.2-1390.12: (class anchor.sink.Assign:28.9)
// 1392.2-1408.27: (class anchor.sink.Write:28.9)
// 1404.1-1404.29: (28.9): Cannot have potential null deference in left-mover part.
// 1407.1-1407.27: (28.9): Reduction failure
// 1409.2-1411.2: (class anchor.sink.VarDeclStmt:29.9)
// 1412.2-1420.79: (class anchor.sink.AAlloc:29.9)
// 1421.2-1423.2: (class anchor.sink.VarDeclStmt:30.9)
// 1424.2-1432.78: (class anchor.sink.AAlloc:30.9)
// 1433.2-1486.89: (class anchor.sink.LocalWrites:31.9)
// 1436.1-1436.26: (31.9): Local Write block must appear pre commit.
// 1437.2-1455.29: (class anchor.sink.Write:31.9)
// 1449.1-1449.29: (31.9): Cannot have potential null deference in left-mover part.
// 1453.1-1453.27: (31.9): Reduction failure
// 1454.1-1454.26: (31.9): Local Write block can only include right-movers.
// 1456.2-1474.27: (class anchor.sink.Write:31.29)
// 1468.1-1468.29: (31.29): Cannot have potential null deference in left-mover part.
// 1472.1-1472.27: (31.29): Reduction failure
// 1473.1-1473.26: (31.29): Local Write block can only include right-movers.
// 1475.1-1475.51: (31.9): Can only have local designators in Local Write block.
// 1476.1-1476.50: (31.29): Can only have local designators in Local Write block.
// 1482.1-1482.91: (31.9): elems became shared, but Array.Queue.T._this[elems].elems may not be shared.
// 1483.1-1483.90: (31.9): elems became shared, but Array.Queue.T._this[elems].spec may not be shared.
// 1485.1-1485.90: (31.29): spec became shared, but Array.Queue.A._this[spec].elems may not be shared.
// 1486.1-1486.89: (31.29): spec became shared, but Array.Queue.A._this[spec].spec may not be shared.
// 1487.2-1496.9: (class anchor.sink.Return:26.21)
// 1492.1-1492.358: (26.21): Object invariant may not hold.
// 1493.1-1493.358: (26.21): Object invariant may not hold.
// 1494.1-1494.358: (26.21): Object invariant may not hold.
// 1495.1-1495.358: (26.21): Object invariant may not hold.
// 1498.1-2281.2: (Method:35.5)
// 1513.1-1513.24: (35.5): Bad tid
// 1514.1-1514.39: (35.5): this is not global
// 1517.1-1517.359: (35.5): Object invariant may not hold.
// 1518.1-1518.359: (35.5): Object invariant may not hold.
// 1519.1-1519.359: (35.5): Object invariant may not hold.
// 1520.1-1520.359: (35.5): Object invariant may not hold.
// 1523.1-1523.358: (35.5): Object invariant may not hold.
// 1524.1-1524.358: (35.5): Object invariant may not hold.
// 1525.1-1525.358: (35.5): Object invariant may not hold.
// 1526.1-1526.358: (35.5): Object invariant may not hold.
// 1924.1-1924.29: (40.23): Cannot have potential null deference in left-mover part.
// 1928.1-1928.27: (40.23): Reduction failure
// 1930.2-1932.2: (class anchor.sink.VarDeclStmt:41.13)
// 1933.2-1935.2: (class anchor.sink.VarDeclStmt:41.13)
// 1936.2-1938.2: (class anchor.sink.VarDeclStmt:41.13)
// 1939.2-1956.27: (class anchor.sink.Read:41.13)
// 1951.1-1951.29: (41.13): Cannot have potential null deference in left-mover part.
// 1955.1-1955.27: (41.13): Reduction failure
// 1957.2-1959.2: (class anchor.sink.VarDeclStmt:41.13)
// 1960.2-1977.27: (class anchor.sink.Read:41.13)
// 1972.1-1972.29: (41.13): Cannot have potential null deference in left-mover part.
// 1976.1-1976.27: (41.13): Reduction failure
// 1978.2-1981.22: (class anchor.sink.Assign:41.13)
// 1982.2-1985.19: (class anchor.sink.Assign:41.13)
// 1987.3-1989.3: (class anchor.sink.VarDeclStmt:42.17)
// 1990.3-1992.3: (class anchor.sink.VarDeclStmt:42.17)
// 1993.3-2010.29: (class anchor.sink.Read:42.17)
// 2005.1-2005.30: (42.17): Cannot have potential null deference in left-mover part.
// 2009.1-2009.28: (42.17): Reduction failure
// 2011.3-2013.3: (class anchor.sink.VarDeclStmt:42.17)
// 2014.3-2016.3: (class anchor.sink.VarDeclStmt:42.17)
// 2017.3-2034.28: (class anchor.sink.Read:42.17)
// 2029.1-2029.30: (42.17): Cannot have potential null deference in left-mover part.
// 2033.1-2033.28: (42.17): Reduction failure
// 2035.3-2037.3: (class anchor.sink.VarDeclStmt:42.17)
// 2038.3-2040.3: (class anchor.sink.VarDeclStmt:42.17)
// 2041.3-2058.30: (class anchor.sink.Read:42.17)
// 2053.1-2053.30: (42.17): Cannot have potential null deference in left-mover part.
// 2057.1-2057.28: (42.17): Reduction failure
// 2059.3-2062.41: (class anchor.sink.Assign:42.17)
// 2063.3-2066.28: (class anchor.sink.Assign:42.17)
// 2067.3-2094.46: (class anchor.sink.ARead:42.17)
// 2079.1-2079.38: (42.17): Cannot have potential null deference in left-mover part.
// 2084.1-2084.21: (42.17): index < 0.
// 2089.1-2089.46: (42.17): index is >= length.
// 2093.1-2093.28: (42.17): Reduction failure
// 2095.3-2097.3: (class anchor.sink.VarDeclStmt:43.17)
// 2098.3-2100.3: (class anchor.sink.VarDeclStmt:43.17)
// 2101.3-2103.3: (class anchor.sink.VarDeclStmt:43.17)
// 2104.3-2106.3: (class anchor.sink.VarDeclStmt:43.17)
// 2107.3-2124.29: (class anchor.sink.Read:43.17)
// 2119.1-2119.30: (43.17): Cannot have potential null deference in left-mover part.
// 2123.1-2123.28: (43.17): Reduction failure
// 2125.3-2128.41: (class anchor.sink.Assign:43.17)
// 2129.3-2132.22: (class anchor.sink.Assign:43.17)
// 2133.3-2141.82: (class anchor.sink.AAlloc:43.17)
// 2142.3-2145.172: (class anchor.sink.Assume:44.17)
// 2147.3-2172.3: (class anchor.sink.Write:45.17)
// 2159.1-2159.30: (45.17): Cannot have potential null deference in left-mover part.
// 2162.1-2162.28: (45.17): Reduction failure
// 2168.1-2168.96: (45.17): newSpec became shared, but Array.Queue.A._this[newSpec].elems may not be shared.
// 2169.1-2169.95: (45.17): newSpec became shared, but Array.Queue.A._this[newSpec].spec may not be shared.
// 2173.3-2175.3: (class anchor.sink.VarDeclStmt:46.17)
// 2176.3-2178.3: (class anchor.sink.VarDeclStmt:46.17)
// 2179.3-2196.29: (class anchor.sink.Read:46.17)
// 2191.1-2191.30: (46.17): Cannot have potential null deference in left-mover part.
// 2195.1-2195.28: (46.17): Reduction failure
// 2197.3-2200.22: (class anchor.sink.Assign:46.17)
// 2202.3-2218.29: (class anchor.sink.Write:46.17)
// 2214.1-2214.30: (46.17): Cannot have potential null deference in left-mover part.
// 2217.1-2217.28: (46.17): Reduction failure
// 2222.1-2222.30: (51.9): Cannot have potential null deference in left-mover part.
// 2224.1-2224.35: (51.9): lock not held
// 2226.1-2226.28: (51.9): Reduction failure
// 2228.3-2238.10: (class anchor.sink.Return:47.17)
// 2234.1-2234.359: (47.17): Object invariant may not hold.
// 2235.1-2235.359: (47.17): Object invariant may not hold.
// 2236.1-2236.359: (47.17): Object invariant may not hold.
// 2237.1-2237.359: (47.17): Object invariant may not hold.
// 2243.1-2243.30: (51.9): Cannot have potential null deference in left-mover part.
// 2245.1-2245.35: (51.9): lock not held
// 2247.1-2247.28: (51.9): Reduction failure
// 2249.3-2259.10: (class anchor.sink.Return:49.17)
// 2255.1-2255.359: (49.17): Object invariant may not hold.
// 2256.1-2256.359: (49.17): Object invariant may not hold.
// 2257.1-2257.359: (49.17): Object invariant may not hold.
// 2258.1-2258.359: (49.17): Object invariant may not hold.
// 2264.1-2264.29: (51.9): Cannot have potential null deference in left-mover part.
// 2266.1-2266.34: (51.9): lock not held
// 2268.1-2268.27: (51.9): Reduction failure
// 2270.2-2280.9: (class anchor.sink.Return:39.26)
// 2276.1-2276.358: (39.26): Object invariant may not hold.
// 2277.1-2277.358: (39.26): Object invariant may not hold.
// 2278.1-2278.358: (39.26): Object invariant may not hold.
// 2279.1-2279.358: (39.26): Object invariant may not hold.
// 2282.1-3033.2: (Method:54.5)
// 2296.1-2296.24: (54.5): Bad tid
// 2297.1-2297.39: (54.5): this is not global
// 2300.1-2300.359: (54.5): Object invariant may not hold.
// 2301.1-2301.359: (54.5): Object invariant may not hold.
// 2302.1-2302.359: (54.5): Object invariant may not hold.
// 2303.1-2303.359: (54.5): Object invariant may not hold.
// 2306.1-2306.358: (54.5): Object invariant may not hold.
// 2307.1-2307.358: (54.5): Object invariant may not hold.
// 2308.1-2308.358: (54.5): Object invariant may not hold.
// 2309.1-2309.358: (54.5): Object invariant may not hold.
// 2688.1-2688.29: (59.23): Cannot have potential null deference in left-mover part.
// 2692.1-2692.27: (59.23): Reduction failure
// 2694.2-2696.2: (class anchor.sink.VarDeclStmt:60.13)
// 2697.2-2699.2: (class anchor.sink.VarDeclStmt:60.13)
// 2700.2-2702.2: (class anchor.sink.VarDeclStmt:60.13)
// 2703.2-2720.28: (class anchor.sink.Read:60.13)
// 2715.1-2715.29: (60.13): Cannot have potential null deference in left-mover part.
// 2719.1-2719.27: (60.13): Reduction failure
// 2721.2-2723.2: (class anchor.sink.VarDeclStmt:60.13)
// 2724.2-2741.28: (class anchor.sink.Read:60.13)
// 2736.1-2736.29: (60.13): Cannot have potential null deference in left-mover part.
// 2740.1-2740.27: (60.13): Reduction failure
// 2742.2-2745.25: (class anchor.sink.Assign:60.13)
// 2746.2-2748.2: (class anchor.sink.VarDeclStmt:60.13)
// 2749.2-2751.2: (class anchor.sink.VarDeclStmt:60.13)
// 2752.2-2769.29: (class anchor.sink.Read:60.13)
// 2764.1-2764.29: (60.13): Cannot have potential null deference in left-mover part.
// 2768.1-2768.27: (60.13): Reduction failure
// 2770.2-2773.40: (class anchor.sink.Assign:60.13)
// 2774.2-2777.25: (class anchor.sink.Assign:60.13)
// 2779.3-2781.3: (class anchor.sink.VarDeclStmt:61.17)
// 2782.3-2799.30: (class anchor.sink.Read:61.17)
// 2794.1-2794.30: (61.17): Cannot have potential null deference in left-mover part.
// 2798.1-2798.28: (61.17): Reduction failure
// 2800.3-2802.3: (class anchor.sink.VarDeclStmt:61.17)
// 2803.3-2805.3: (class anchor.sink.VarDeclStmt:61.17)
// 2806.3-2823.29: (class anchor.sink.Read:61.17)
// 2818.1-2818.30: (61.17): Cannot have potential null deference in left-mover part.
// 2822.1-2822.28: (61.17): Reduction failure
// 2824.3-2826.3: (class anchor.sink.VarDeclStmt:61.17)
// 2827.3-2829.3: (class anchor.sink.VarDeclStmt:61.17)
// 2830.3-2847.30: (class anchor.sink.Read:61.17)
// 2842.1-2842.30: (61.17): Cannot have potential null deference in left-mover part.
// 2846.1-2846.28: (61.17): Reduction failure
// 2848.3-2851.41: (class anchor.sink.Assign:61.17)
// 2852.3-2855.30: (class anchor.sink.Assign:61.17)
// 2856.3-2883.43: (class anchor.sink.AWrite:61.17)
// 2868.1-2868.39: (61.17): Cannot have potential null deference in left-mover part.
// 2873.1-2873.22: (61.17): index < 0.
// 2878.1-2878.48: (61.17): index is >= length.
// 2882.1-2882.28: (61.17): Reduction failure
// 2884.3-2886.3: (class anchor.sink.VarDeclStmt:62.21)
// 2887.3-2889.3: (class anchor.sink.VarDeclStmt:62.21)
// 2890.3-2892.3: (class anchor.sink.VarDeclStmt:62.21)
// 2893.3-2895.3: (class anchor.sink.VarDeclStmt:62.21)
// 2896.3-2913.29: (class anchor.sink.Read:62.21)
// 2908.1-2908.30: (62.21): Cannot have potential null deference in left-mover part.
// 2912.1-2912.28: (62.21): Reduction failure
// 2914.3-2917.41: (class anchor.sink.Assign:62.21)
// 2918.3-2921.22: (class anchor.sink.Assign:62.21)
// 2922.3-2930.82: (class anchor.sink.AAlloc:62.21)
// 2931.3-2934.164: (class anchor.sink.Assume:63.17)
// 2935.3-2938.110: (class anchor.sink.Assume:64.17)
// 2940.3-2965.3: (class anchor.sink.Write:65.17)
// 2952.1-2952.30: (65.17): Cannot have potential null deference in left-mover part.
// 2955.1-2955.28: (65.17): Reduction failure
// 2961.1-2961.96: (65.17): newSpec became shared, but Array.Queue.A._this[newSpec].elems may not be shared.
// 2962.1-2962.95: (65.17): newSpec became shared, but Array.Queue.A._this[newSpec].spec may not be shared.
// 2966.3-2968.3: (class anchor.sink.VarDeclStmt:66.17)
// 2969.3-2971.3: (class anchor.sink.VarDeclStmt:66.17)
// 2972.3-2989.29: (class anchor.sink.Read:66.17)
// 2984.1-2984.30: (66.17): Cannot have potential null deference in left-mover part.
// 2988.1-2988.28: (66.17): Reduction failure
// 2990.3-2993.22: (class anchor.sink.Assign:66.17)
// 2995.3-3011.29: (class anchor.sink.Write:66.17)
// 3007.1-3007.30: (66.17): Cannot have potential null deference in left-mover part.
// 3010.1-3010.28: (66.17): Reduction failure
// 3017.1-3017.29: (68.9): Cannot have potential null deference in left-mover part.
// 3019.1-3019.34: (68.9): lock not held
// 3021.1-3021.27: (68.9): Reduction failure
// 3023.2-3032.9: (class anchor.sink.Return:58.32)
// 3028.1-3028.358: (58.32): Object invariant may not hold.
// 3029.1-3029.358: (58.32): Object invariant may not hold.
// 3030.1-3030.358: (58.32): Object invariant may not hold.
// 3031.1-3031.358: (58.32): Object invariant may not hold.
// 3219.1-3219.34: (8.5): Queue.elems failed Write-Write Right-Mover Check
// 3272.1-3272.30: (8.5): Queue.elems failed Write-Read Right-Mover Check
// 3329.1-3329.34: (8.5): Queue.elems failed Write-Write Left-Mover Check
// 3383.1-3383.30: (8.5): Queue.elems failed Write-Read Left-Mover Check
// 3434.1-3434.34: (8.5): Queue.elems failed Read-Write Right-Mover Check
// 3488.1-3488.34: (8.5): Queue.elems failed Read-Write Left-Mover Check
// 3541.1-3541.34: (10.5): Queue.head failed Write-Write Right-Mover Check
// 3594.1-3594.30: (10.5): Queue.head failed Write-Read Right-Mover Check
// 3651.1-3651.34: (10.5): Queue.head failed Write-Write Left-Mover Check
// 3705.1-3705.30: (10.5): Queue.head failed Write-Read Left-Mover Check
// 3756.1-3756.34: (10.5): Queue.head failed Read-Write Right-Mover Check
// 3810.1-3810.34: (10.5): Queue.head failed Read-Write Left-Mover Check
// 3863.1-3863.34: (11.5): Queue.tail failed Write-Write Right-Mover Check
// 3916.1-3916.30: (11.5): Queue.tail failed Write-Read Right-Mover Check
// 3973.1-3973.34: (11.5): Queue.tail failed Write-Write Left-Mover Check
// 4027.1-4027.30: (11.5): Queue.tail failed Write-Read Left-Mover Check
// 4078.1-4078.34: (11.5): Queue.tail failed Read-Write Right-Mover Check
// 4132.1-4132.34: (11.5): Queue.tail failed Read-Write Left-Mover Check
// 4185.1-4185.34: (19.5): Queue.spec failed Write-Write Right-Mover Check
// 4238.1-4238.30: (19.5): Queue.spec failed Write-Read Right-Mover Check
// 4295.1-4295.34: (19.5): Queue.spec failed Write-Write Left-Mover Check
// 4349.1-4349.30: (19.5): Queue.spec failed Write-Read Left-Mover Check
// 4400.1-4400.34: (19.5): Queue.spec failed Read-Write Right-Mover Check
// 4454.1-4454.34: (19.5): Queue.spec failed Read-Write Left-Mover Check
// 4511.1-4511.34: (6.5): Array Array.Queue.T failed Write-Write Right-Mover Check
// 4568.1-4568.30: (6.5): Array Array.Queue.T failed Write-Read Right-Mover Check
// 4629.1-4629.34: (6.5): Array Array.Queue.T failed Write-Write Left-Mover Check
// 4687.1-4687.30: (6.5): Array Array.Queue.T failed Write-Read Left-Mover Check
// 4742.1-4742.34: (6.5): Array Array.Queue.T failed Read-Write Right-Mover Check
// 4800.1-4800.34: (6.5): Array Array.Queue.T failed Read-Write Left-Mover Check
// 4857.1-4857.34: (18.5): Array Array.Queue.A failed Write-Write Right-Mover Check
// 4914.1-4914.30: (18.5): Array Array.Queue.A failed Write-Read Right-Mover Check
// 4975.1-4975.34: (18.5): Array Array.Queue.A failed Write-Write Left-Mover Check
// 5033.1-5033.30: (18.5): Array Array.Queue.A failed Write-Read Left-Mover Check
// 5088.1-5088.34: (18.5): Array Array.Queue.A failed Read-Write Right-Mover Check
// 5146.1-5146.34: (18.5): Array Array.Queue.A failed Read-Write Left-Mover Check
// 5233.1-5233.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.1)
// 5234.1-5234.101: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.2)
// 5235.1-5235.158: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.3)
// 5355.1-5355.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case C)
// 5480.1-5480.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case D)
// 5481.1-5481.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case R)
// 5568.1-5568.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case F)
// 5569.1-5569.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case H)
// 5570.1-5570.146: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case I)
// 5656.1-5656.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case J)
// 5657.1-5657.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case K)
// 5658.1-5658.99: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case L)
// 5746.1-5746.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.1)
// 5747.1-5747.101: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.2)
// 5748.1-5748.158: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.3)
// 5868.1-5868.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case C)
// 5993.1-5993.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case D)
// 5994.1-5994.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case R)
// 6081.1-6081.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case F)
// 6082.1-6082.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case H)
// 6083.1-6083.146: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case I)
// 6169.1-6169.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case J)
// 6170.1-6170.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case K)
// 6171.1-6171.99: (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case L)
// 6259.1-6259.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.1)
// 6260.1-6260.101: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.2)
// 6261.1-6261.158: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.3)
// 6381.1-6381.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case C)
// 6506.1-6506.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case D)
// 6507.1-6507.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case R)
// 6594.1-6594.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case F)
// 6595.1-6595.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case H)
// 6596.1-6596.146: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case I)
// 6682.1-6682.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case J)
// 6683.1-6683.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case K)
// 6684.1-6684.99: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case L)
// 6772.1-6772.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.1)
// 6773.1-6773.101: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.2)
// 6774.1-6774.158: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.3)
// 6894.1-6894.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case C)
// 7019.1-7019.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case D)
// 7020.1-7020.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case R)
// 7107.1-7107.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case F)
// 7108.1-7108.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case H)
// 7109.1-7109.146: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case I)
// 7195.1-7195.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case J)
// 7196.1-7196.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case K)
// 7197.1-7197.99: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case L)
// 7290.1-7290.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.1)
// 7291.1-7291.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.2)
// 7292.1-7292.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.3)
// 7419.1-7419.140: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 7551.1-7551.144: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 7552.1-7552.144: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 7644.1-7644.136: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 7645.1-7645.136: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 7646.1-7646.144: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 7737.1-7737.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case J)
// 7738.1-7738.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case K)
// 7739.1-7739.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case L)
// 7832.1-7832.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.1)
// 7833.1-7833.101: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.2)
// 7834.1-7834.156: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.3)
// 7961.1-7961.140: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 8093.1-8093.144: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 8094.1-8094.144: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 8186.1-8186.136: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 8187.1-8187.136: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 8188.1-8188.144: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 8279.1-8279.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case J)
// 8280.1-8280.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case K)
// 8281.1-8281.99: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case L)
// 8369.1-8369.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.1)
// 8370.1-8370.101: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.2)
// 8371.1-8371.158: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.3)
// 8491.1-8491.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case C)
// 8616.1-8616.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case D)
// 8617.1-8617.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case R)
// 8704.1-8704.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case F)
// 8705.1-8705.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case H)
// 8706.1-8706.146: (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case I)
// 8792.1-8792.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case J)
// 8793.1-8793.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case K)
// 8794.1-8794.99: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case L)
// 8882.1-8882.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.1)
// 8883.1-8883.101: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.2)
// 8884.1-8884.158: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.3)
// 9004.1-9004.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case C)
// 9129.1-9129.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case D)
// 9130.1-9130.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case R)
// 9217.1-9217.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case F)
// 9218.1-9218.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case H)
// 9219.1-9219.146: (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case I)
// 9305.1-9305.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case J)
// 9306.1-9306.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case K)
// 9307.1-9307.99: (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case L)
// 9395.1-9395.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.1)
// 9396.1-9396.101: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.2)
// 9397.1-9397.158: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.3)
// 9517.1-9517.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case C)
// 9642.1-9642.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case D)
// 9643.1-9643.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case R)
// 9730.1-9730.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case F)
// 9731.1-9731.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case H)
// 9732.1-9732.146: (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case I)
// 9818.1-9818.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case J)
// 9819.1-9819.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case K)
// 9820.1-9820.99: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case L)
// 9908.1-9908.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.1)
// 9909.1-9909.101: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.2)
// 9910.1-9910.158: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.3)
// 10030.1-10030.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case C)
// 10155.1-10155.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case D)
// 10156.1-10156.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case R)
// 10243.1-10243.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case F)
// 10244.1-10244.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case H)
// 10245.1-10245.146: (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case I)
// 10331.1-10331.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case J)
// 10332.1-10332.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case K)
// 10333.1-10333.99: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case L)
// 10426.1-10426.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.1)
// 10427.1-10427.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.2)
// 10428.1-10428.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.3)
// 10555.1-10555.140: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 10687.1-10687.144: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 10688.1-10688.144: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 10780.1-10780.136: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 10781.1-10781.136: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 10782.1-10782.144: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 10873.1-10873.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case J)
// 10874.1-10874.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case K)
// 10875.1-10875.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case L)
// 10968.1-10968.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.1)
// 10969.1-10969.101: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.2)
// 10970.1-10970.156: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.3)
// 11097.1-11097.140: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 11229.1-11229.144: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 11230.1-11230.144: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 11322.1-11322.136: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 11323.1-11323.136: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 11324.1-11324.144: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 11415.1-11415.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case J)
// 11416.1-11416.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case K)
// 11417.1-11417.99: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case L)
// 11505.1-11505.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.1)
// 11506.1-11506.101: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.2)
// 11507.1-11507.158: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.3)
// 11627.1-11627.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case C)
// 11752.1-11752.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case D)
// 11753.1-11753.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case R)
// 11840.1-11840.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case F)
// 11841.1-11841.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case H)
// 11842.1-11842.146: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case I)
// 11928.1-11928.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case J)
// 11929.1-11929.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case K)
// 11930.1-11930.99: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case L)
// 12018.1-12018.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.1)
// 12019.1-12019.101: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.2)
// 12020.1-12020.158: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.3)
// 12140.1-12140.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case C)
// 12265.1-12265.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case D)
// 12266.1-12266.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case R)
// 12353.1-12353.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case F)
// 12354.1-12354.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case H)
// 12355.1-12355.146: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case I)
// 12441.1-12441.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case J)
// 12442.1-12442.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case K)
// 12443.1-12443.99: (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case L)
// 12531.1-12531.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.1)
// 12532.1-12532.101: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.2)
// 12533.1-12533.158: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.3)
// 12653.1-12653.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case C)
// 12778.1-12778.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case D)
// 12779.1-12779.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case R)
// 12866.1-12866.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case F)
// 12867.1-12867.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case H)
// 12868.1-12868.146: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case I)
// 12954.1-12954.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case J)
// 12955.1-12955.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case K)
// 12956.1-12956.99: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case L)
// 13044.1-13044.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.1)
// 13045.1-13045.101: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.2)
// 13046.1-13046.158: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.3)
// 13166.1-13166.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case C)
// 13291.1-13291.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case D)
// 13292.1-13292.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case R)
// 13379.1-13379.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case F)
// 13380.1-13380.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case H)
// 13381.1-13381.146: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case I)
// 13467.1-13467.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case J)
// 13468.1-13468.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case K)
// 13469.1-13469.99: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case L)
// 13562.1-13562.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.1)
// 13563.1-13563.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.2)
// 13564.1-13564.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.3)
// 13691.1-13691.140: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 13823.1-13823.144: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 13824.1-13824.144: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 13916.1-13916.136: (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 13917.1-13917.136: (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 13918.1-13918.144: (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 14009.1-14009.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case J)
// 14010.1-14010.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case K)
// 14011.1-14011.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case L)
// 14104.1-14104.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.1)
// 14105.1-14105.101: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.2)
// 14106.1-14106.156: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.3)
// 14233.1-14233.140: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 14365.1-14365.144: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 14366.1-14366.144: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 14458.1-14458.136: (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 14459.1-14459.136: (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 14460.1-14460.144: (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 14551.1-14551.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case J)
// 14552.1-14552.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case K)
// 14553.1-14553.99: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case L)
// 14641.1-14641.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.1)
// 14642.1-14642.101: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.2)
// 14643.1-14643.158: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.3)
// 14763.1-14763.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case C)
// 14888.1-14888.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case D)
// 14889.1-14889.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case R)
// 14976.1-14976.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case F)
// 14977.1-14977.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case H)
// 14978.1-14978.146: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case I)
// 15064.1-15064.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case J)
// 15065.1-15065.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case K)
// 15066.1-15066.99: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case L)
// 15154.1-15154.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.1)
// 15155.1-15155.101: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.2)
// 15156.1-15156.158: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.3)
// 15276.1-15276.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case C)
// 15401.1-15401.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case D)
// 15402.1-15402.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case R)
// 15489.1-15489.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case F)
// 15490.1-15490.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case H)
// 15491.1-15491.146: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case I)
// 15577.1-15577.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case J)
// 15578.1-15578.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case K)
// 15579.1-15579.99: (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case L)
// 15667.1-15667.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.1)
// 15668.1-15668.101: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.2)
// 15669.1-15669.158: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.3)
// 15789.1-15789.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case C)
// 15914.1-15914.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case D)
// 15915.1-15915.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case R)
// 16002.1-16002.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case F)
// 16003.1-16003.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case H)
// 16004.1-16004.146: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case I)
// 16090.1-16090.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case J)
// 16091.1-16091.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case K)
// 16092.1-16092.99: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case L)
// 16180.1-16180.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.1)
// 16181.1-16181.101: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.2)
// 16182.1-16182.158: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.3)
// 16302.1-16302.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case C)
// 16427.1-16427.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case D)
// 16428.1-16428.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case R)
// 16515.1-16515.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case F)
// 16516.1-16516.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case H)
// 16517.1-16517.146: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case I)
// 16603.1-16603.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case J)
// 16604.1-16604.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case K)
// 16605.1-16605.99: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case L)
// 16698.1-16698.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.1)
// 16699.1-16699.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.2)
// 16700.1-16700.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.3)
// 16827.1-16827.140: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 16959.1-16959.144: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 16960.1-16960.144: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 17052.1-17052.136: (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 17053.1-17053.136: (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 17054.1-17054.144: (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 17145.1-17145.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case J)
// 17146.1-17146.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case K)
// 17147.1-17147.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case L)
// 17240.1-17240.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.1)
// 17241.1-17241.101: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.2)
// 17242.1-17242.156: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.3)
// 17369.1-17369.140: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 17501.1-17501.144: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 17502.1-17502.144: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 17594.1-17594.136: (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 17595.1-17595.136: (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 17596.1-17596.144: (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 17687.1-17687.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case J)
// 17688.1-17688.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case K)
// 17689.1-17689.99: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case L)
// 17782.1-17782.140: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 17783.1-17783.101: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 17784.1-17784.156: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 17911.1-17911.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case C)
// 18043.1-18043.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case D)
// 18044.1-18044.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case R)
// 18136.1-18136.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case F)
// 18137.1-18137.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case H)
// 18138.1-18138.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case I)
// 18229.1-18229.136: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 18230.1-18230.136: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 18231.1-18231.99: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 18324.1-18324.140: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 18325.1-18325.101: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 18326.1-18326.156: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 18453.1-18453.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case C)
// 18585.1-18585.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case D)
// 18586.1-18586.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case R)
// 18678.1-18678.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case F)
// 18679.1-18679.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case H)
// 18680.1-18680.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case I)
// 18771.1-18771.136: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 18772.1-18772.136: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 18773.1-18773.99: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 18866.1-18866.140: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 18867.1-18867.101: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 18868.1-18868.156: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 18995.1-18995.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case C)
// 19127.1-19127.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case D)
// 19128.1-19128.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case R)
// 19220.1-19220.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case F)
// 19221.1-19221.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case H)
// 19222.1-19222.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case I)
// 19313.1-19313.136: (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 19314.1-19314.136: (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 19315.1-19315.99: (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 19408.1-19408.140: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 19409.1-19409.101: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 19410.1-19410.156: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 19537.1-19537.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case C)
// 19669.1-19669.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case D)
// 19670.1-19670.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case R)
// 19762.1-19762.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case F)
// 19763.1-19763.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case H)
// 19764.1-19764.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case I)
// 19855.1-19855.136: (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 19856.1-19856.136: (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 19857.1-19857.99: (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 19955.1-19955.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 19956.1-19956.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 19957.1-19957.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 20091.1-20091.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 20230.1-20230.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 20231.1-20231.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 20328.1-20328.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 20329.1-20329.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 20330.1-20330.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 20426.1-20426.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 20427.1-20427.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 20428.1-20428.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 20526.1-20526.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 20527.1-20527.101: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 20528.1-20528.156: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 20662.1-20662.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 20801.1-20801.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 20802.1-20802.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 20899.1-20899.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 20900.1-20900.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 20901.1-20901.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 20997.1-20997.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 20998.1-20998.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 20999.1-20999.99: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 21092.1-21092.140: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 21093.1-21093.101: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 21094.1-21094.156: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 21221.1-21221.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case C)
// 21353.1-21353.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case D)
// 21354.1-21354.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case R)
// 21446.1-21446.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case F)
// 21447.1-21447.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case H)
// 21448.1-21448.144: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case I)
// 21539.1-21539.136: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 21540.1-21540.136: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 21541.1-21541.99: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 21634.1-21634.140: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 21635.1-21635.101: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 21636.1-21636.156: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 21763.1-21763.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case C)
// 21895.1-21895.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case D)
// 21896.1-21896.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case R)
// 21988.1-21988.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case F)
// 21989.1-21989.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case H)
// 21990.1-21990.144: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case I)
// 22081.1-22081.136: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 22082.1-22082.136: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 22083.1-22083.99: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 22176.1-22176.140: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 22177.1-22177.101: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 22178.1-22178.156: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 22305.1-22305.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case C)
// 22437.1-22437.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case D)
// 22438.1-22438.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case R)
// 22530.1-22530.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case F)
// 22531.1-22531.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case H)
// 22532.1-22532.144: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case I)
// 22623.1-22623.136: (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 22624.1-22624.136: (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 22625.1-22625.99: (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 22718.1-22718.140: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 22719.1-22719.101: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 22720.1-22720.156: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 22847.1-22847.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case C)
// 22979.1-22979.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case D)
// 22980.1-22980.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case R)
// 23072.1-23072.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case F)
// 23073.1-23073.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case H)
// 23074.1-23074.144: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case I)
// 23165.1-23165.136: (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 23166.1-23166.136: (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 23167.1-23167.99: (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 23265.1-23265.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 23266.1-23266.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 23267.1-23267.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 23401.1-23401.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 23540.1-23540.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 23541.1-23541.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 23638.1-23638.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 23639.1-23639.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 23640.1-23640.144: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 23736.1-23736.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 23737.1-23737.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 23738.1-23738.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 23836.1-23836.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 23837.1-23837.101: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 23838.1-23838.156: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 23972.1-23972.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 24111.1-24111.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 24112.1-24112.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 24209.1-24209.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 24210.1-24210.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 24211.1-24211.144: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 24307.1-24307.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 24308.1-24308.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 24309.1-24309.99: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 24316.1-24316.359: (<undefined position>): Object invariant may not hold.
// 24317.1-24317.359: (<undefined position>): Object invariant may not hold.
// 24318.1-24318.359: (<undefined position>): Object invariant may not hold.
// 24319.1-24319.359: (<undefined position>): Object invariant may not hold.
// 24332.1-24332.358: (<undefined position>): Object invariant may not hold.
// 24333.1-24333.358: (<undefined position>): Object invariant may not hold.
// 24334.1-24334.358: (<undefined position>): Object invariant may not hold.
// 24335.1-24335.358: (<undefined position>): Object invariant may not hold.
// 24349.1-24375.2: (8.24): yields_as clause for Queue.elems is not valid
// 24380.1-24403.2: (8.24): yields_as clause for Queue.elems is not reflexive
// 24409.1-24409.359: (8.24): Object invariant may not hold.
// 24410.1-24410.359: (8.24): Object invariant may not hold.
// 24411.1-24411.359: (8.24): Object invariant may not hold.
// 24412.1-24412.359: (8.24): Object invariant may not hold.
// 24413.1-24459.2: (8.24): yields_as clause for Queue.elems is not transitive
// 24472.1-24498.2: (10.32): yields_as clause for Queue.head is not valid
// 24503.1-24526.2: (10.32): yields_as clause for Queue.head is not reflexive
// 24532.1-24532.359: (10.32): Object invariant may not hold.
// 24533.1-24533.359: (10.32): Object invariant may not hold.
// 24534.1-24534.359: (10.32): Object invariant may not hold.
// 24535.1-24535.359: (10.32): Object invariant may not hold.
// 24536.1-24582.2: (10.32): yields_as clause for Queue.head is not transitive
// 24595.1-24621.2: (11.32): yields_as clause for Queue.tail is not valid
// 24626.1-24649.2: (11.32): yields_as clause for Queue.tail is not reflexive
// 24655.1-24655.359: (11.32): Object invariant may not hold.
// 24656.1-24656.359: (11.32): Object invariant may not hold.
// 24657.1-24657.359: (11.32): Object invariant may not hold.
// 24658.1-24658.359: (11.32): Object invariant may not hold.
// 24659.1-24705.2: (11.32): yields_as clause for Queue.tail is not transitive
// 24718.1-24744.2: (19.32): yields_as clause for Queue.spec is not valid
// 24749.1-24772.2: (19.32): yields_as clause for Queue.spec is not reflexive
// 24778.1-24778.359: (19.32): Object invariant may not hold.
// 24779.1-24779.359: (19.32): Object invariant may not hold.
// 24780.1-24780.359: (19.32): Object invariant may not hold.
// 24781.1-24781.359: (19.32): Object invariant may not hold.
// 24782.1-24828.2: (19.32): yields_as clause for Queue.spec is not transitive
// 24842.1-24868.2: (7.32): yields_as clause for Queue._lock is not valid
// 24873.1-24896.2: (7.32): yields_as clause for Queue._lock is not reflexive
// 24902.1-24902.359: (3.1): Object invariant may not hold.
// 24903.1-24903.359: (3.1): Object invariant may not hold.
// 24904.1-24904.359: (3.1): Object invariant may not hold.
// 24905.1-24905.359: (3.1): Object invariant may not hold.
// 24906.1-24952.2: (7.32): yields_as clause for Queue._lock is not transitive
// 24962.1-24994.2: (6.28): yields_as clause for Array.Queue.T is not valid
// 24995.1-25024.2: (6.28): yields_as clause for Array.Queue.T is not reflexive
// 25029.1-25029.359: (6.28): Object invariant may not hold.
// 25030.1-25030.359: (6.28): Object invariant may not hold.
// 25031.1-25031.359: (6.28): Object invariant may not hold.
// 25032.1-25032.359: (6.28): Object invariant may not hold.
// 25033.1-25083.2: (6.28): yields_as clause for Array.Queue.T is not transitive
// 25093.1-25125.2: (18.28): yields_as clause for Array.Queue.A is not valid
// 25126.1-25155.2: (18.28): yields_as clause for Array.Queue.A is not reflexive
// 25160.1-25160.359: (18.28): Object invariant may not hold.
// 25161.1-25161.359: (18.28): Object invariant may not hold.
// 25162.1-25162.359: (18.28): Object invariant may not hold.
// 25163.1-25163.359: (18.28): Object invariant may not hold.
// 25164.1-25214.2: (18.28): yields_as clause for Array.Queue.A is not transitive
