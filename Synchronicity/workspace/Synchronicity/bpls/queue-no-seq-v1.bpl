                                                                                                    
 /*                                                                                                 
                                                                                                    
 /home/artifact/Synchronicity/workspace/Synchronicity/tests/queue-no-seq-v1.anchor:                 
                                                                                                    
 AST:                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
    class Queue {                                                                                   
      array T = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E]                                                                  
                                                                                                    
      array A = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E]                                                                            
                                                                                                    
       [Queue.T{this}] elems isLocal(this, tid)                                                     
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
      volatile int head isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile int tail isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile [Queue.A{this}] spec isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      invariant  0 <= this.head && this.head <= this.tail && this.tail <= this.elems.length;        
      invariant  this.elems.length == 512;                                                          
      invariant  this.spec.length == this.tail - this.head;                                         
      invariant  forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == this.elems[this.head + i];
                                                                                                    
      requires this.elems == [Queue.T{this}].null;                                                  
      requires this.spec == [Queue.A{this}].null;                                                   
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void init() {                                                                          
        assume this.elems == [Queue.T{this}].null;                                                  
        assume this.head == 0;                                                                      
        assume this.tail == 0;                                                                      
        assume this.spec == [Queue.A{this}].null;                                                   
        {                                                                                           
          int tmp1;                                                                                 
          tmp1 = 0;                                                                                 
          this.head := tmp1;                                                                        
          int tmp2;                                                                                 
          tmp2 = 0;                                                                                 
          this.tail := tmp2;                                                                        
          [Queue.T{this}] elems;                                                                    
          elems = new [Queue.T{this}](512);                                                         
          [Queue.A{this}] spec;                                                                     
          spec = new [Queue.A{this}](0);                                                            
          this.elems := elems, this.spec := spec;                                                   
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public int dequeue() {                                                                        
        synchronized (this) {                                                                       
          bool tmp3;                                                                                
          int tmp4;                                                                                 
          int tmp5;                                                                                 
          tmp5 := this.tail;                                                                        
          int tmp6;                                                                                 
          tmp6 := this.head;                                                                        
          tmp4 = tmp5 - tmp6;                                                                       
          tmp3 = tmp4 > 0;                                                                          
          if (tmp3 /* == this.tail - this.head > 0 */) {                                            
            int result;                                                                             
            [Queue.T{this}] tmp7;                                                                   
            tmp7 := this.elems;                                                                     
            int tmp8;                                                                               
            tmp8 := this.head;                                                                      
            result := tmp7[tmp8];                                                                   
            [Queue.A{this}] newSpec;                                                                
            int tmp9;                                                                               
            int tmp10;                                                                              
            [Queue.A{this}] tmp11;                                                                  
            tmp11 := this.spec;                                                                     
            tmp10 = tmp11.length;                                                                   
            tmp9 = tmp10 - 1;                                                                       
            newSpec = new [Queue.A{this}](tmp9);                                                    
            assume forall int i ::0 <= i && i < this.tail - (this.head + 1) ==> newSpec[i] == this.spec[i + 1];
            int tmp12;                                                                              
            tmp12 = 0;                                                                              
            int tmp13;                                                                              
            tmp13 := newSpec[tmp12];                                                                
            [Queue.A{this}] tmp14;                                                                  
            tmp14 := this.spec;                                                                     
            int tmp15;                                                                              
            tmp15 = 1;                                                                              
            int tmp16;                                                                              
            tmp16 := tmp14[tmp15];                                                                  
            assert tmp13 == tmp16;                                                                  
            int tmp17;                                                                              
            int tmp18;                                                                              
            tmp18 := this.head;                                                                     
            tmp17 = tmp18 + 1;                                                                      
            this.head := tmp17;                                                                     
            this.spec := newSpec;                                                                   
             return result;                                                                         
          } else {                                                                                  
             return 0;                                                                              
          }                                                                                         
        }                                                                                           
        // return -1;                                                                               
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Explicit:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Queue {                                                                                   
      array T = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E]                                                                  
                                                                                                    
      array A = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E]                                                                            
                                                                                                    
       [Queue.T{this}] elems isLocal(this, tid)                                                     
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
      volatile int head isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile int tail isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile [Queue.A{this}] spec isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
      invariant  0 <= this.head && this.head <= this.tail && this.tail <= this.elems.length;        
      invariant  this.elems.length == 512;                                                          
      invariant  this.spec.length == this.tail - this.head;                                         
      invariant  forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == this.elems[this.head + i];
                                                                                                    
      requires this.elems == [Queue.T{this}].null;                                                  
      requires this.spec == [Queue.A{this}].null;                                                   
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void init() {                                                                          
        assume this.elems == [Queue.T{this}].null;                                                  
        assume this.head == 0;                                                                      
        assume this.tail == 0;                                                                      
        assume this.spec == [Queue.A{this}].null;                                                   
        {                                                                                           
          int tmp1;                                                                                 
          tmp1 = 0;                                                                                 
          this.head := tmp1;                                                                        
          int tmp2;                                                                                 
          tmp2 = 0;                                                                                 
          this.tail := tmp2;                                                                        
          [Queue.T{this}] elems;                                                                    
          elems = new [Queue.T{this}](512);                                                         
          [Queue.A{this}] spec;                                                                     
          spec = new [Queue.A{this}](0);                                                            
          this.elems := elems, this.spec := spec;                                                   
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public int dequeue() {                                                                        
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            bool tmp3;                                                                              
            int tmp4;                                                                               
            int tmp5;                                                                               
            tmp5 := this.tail;                                                                      
            int tmp6;                                                                               
            tmp6 := this.head;                                                                      
            tmp4 = tmp5 - tmp6;                                                                     
            tmp3 = tmp4 > 0;                                                                        
            if (tmp3 /* == this.tail - this.head > 0 */) {                                          
              int result;                                                                           
              [Queue.T{this}] tmp7;                                                                 
              tmp7 := this.elems;                                                                   
              int tmp8;                                                                             
              tmp8 := this.head;                                                                    
              result := tmp7[tmp8];                                                                 
              [Queue.A{this}] newSpec;                                                              
              int tmp9;                                                                             
              int tmp10;                                                                            
              [Queue.A{this}] tmp11;                                                                
              tmp11 := this.spec;                                                                   
              tmp10 = tmp11.length;                                                                 
              tmp9 = tmp10 - 1;                                                                     
              newSpec = new [Queue.A{this}](tmp9);                                                  
              assume forall int i ::0 <= i && i < this.tail - (this.head + 1) ==> newSpec[i] == this.spec[i + 1];
              int tmp12;                                                                            
              tmp12 = 0;                                                                            
              int tmp13;                                                                            
              tmp13 := newSpec[tmp12];                                                              
              [Queue.A{this}] tmp14;                                                                
              tmp14 := this.spec;                                                                   
              int tmp15;                                                                            
              tmp15 = 1;                                                                            
              int tmp16;                                                                            
              tmp16 := tmp14[tmp15];                                                                
              assert tmp13 == tmp16;                                                                
              int tmp17;                                                                            
              int tmp18;                                                                            
              tmp18 := this.head;                                                                   
              tmp17 = tmp18 + 1;                                                                    
              this.head := tmp17;                                                                   
              this.spec := newSpec;                                                                 
              {                                                                                     
                release(this);                                                                      
                 return result;                                                                     
              }                                                                                     
            } else {                                                                                
              {                                                                                     
                release(this);                                                                      
                 return 0;                                                                          
              }                                                                                     
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return -1;                                                                             
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Inlined:                                                                                           
                                                                                                    
                                                                                                    
                                                                                                    
    class Queue {                                                                                   
      array T = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E]                                                                  
                                                                                                    
      array A = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E]                                                                            
                                                                                                    
       [Queue.T{this}] elems isLocal(this, tid)                                                     
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
      volatile int head isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile int tail isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile [Queue.A{this}] spec isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
      invariant  0 <= this.head && this.head <= this.tail && this.tail <= this.elems.length;        
      invariant  this.elems.length == 512;                                                          
      invariant  this.spec.length == this.tail - this.head;                                         
      invariant  forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == this.elems[this.head + i];
                                                                                                    
      requires this.elems == [Queue.T{this}].null;                                                  
      requires this.spec == [Queue.A{this}].null;                                                   
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void init() {                                                                          
        assume this.elems == [Queue.T{this}].null;                                                  
        assume this.head == 0;                                                                      
        assume this.tail == 0;                                                                      
        assume this.spec == [Queue.A{this}].null;                                                   
        {                                                                                           
          int tmp1;                                                                                 
          tmp1 = 0;                                                                                 
          this.head := tmp1;                                                                        
          int tmp2;                                                                                 
          tmp2 = 0;                                                                                 
          this.tail := tmp2;                                                                        
          [Queue.T{this}] elems;                                                                    
          elems = new [Queue.T{this}](512);                                                         
          [Queue.A{this}] spec;                                                                     
          spec = new [Queue.A{this}](0);                                                            
          this.elems := elems, this.spec := spec;                                                   
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public int dequeue() {                                                                        
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            bool tmp3;                                                                              
            int tmp4;                                                                               
            int tmp5;                                                                               
            tmp5 := this.tail;                                                                      
            int tmp6;                                                                               
            tmp6 := this.head;                                                                      
            tmp4 = tmp5 - tmp6;                                                                     
            tmp3 = tmp4 > 0;                                                                        
            if (tmp3 /* == this.tail - this.head > 0 */) {                                          
              int result;                                                                           
              [Queue.T{this}] tmp7;                                                                 
              tmp7 := this.elems;                                                                   
              int tmp8;                                                                             
              tmp8 := this.head;                                                                    
              result := tmp7[tmp8];                                                                 
              [Queue.A{this}] newSpec;                                                              
              int tmp9;                                                                             
              int tmp10;                                                                            
              [Queue.A{this}] tmp11;                                                                
              tmp11 := this.spec;                                                                   
              tmp10 = tmp11.length;                                                                 
              tmp9 = tmp10 - 1;                                                                     
              newSpec = new [Queue.A{this}](tmp9);                                                  
              assume forall int i ::0 <= i && i < this.tail - (this.head + 1) ==> newSpec[i] == this.spec[i + 1];
              int tmp12;                                                                            
              tmp12 = 0;                                                                            
              int tmp13;                                                                            
              tmp13 := newSpec[tmp12];                                                              
              [Queue.A{this}] tmp14;                                                                
              tmp14 := this.spec;                                                                   
              int tmp15;                                                                            
              tmp15 = 1;                                                                            
              int tmp16;                                                                            
              tmp16 := tmp14[tmp15];                                                                
              assert tmp13 == tmp16;                                                                
              int tmp17;                                                                            
              int tmp18;                                                                            
              tmp18 := this.head;                                                                   
              tmp17 = tmp18 + 1;                                                                    
              this.head := tmp17;                                                                   
              this.spec := newSpec;                                                                 
              {                                                                                     
                release(this);                                                                      
                 return result;                                                                     
              }                                                                                     
            } else {                                                                                
              {                                                                                     
                release(this);                                                                      
                 return 0;                                                                          
              }                                                                                     
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return -1;                                                                             
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Prepared:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Queue {                                                                                   
      array T = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E]                                                                  
                                                                                                    
      array A = int[isLocal(this, tid)                                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E]                                                                            
                                                                                                    
       [Queue.T{this}] elems isLocal(this, tid)                                                     
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
      volatile int head isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile int tail isLocal(this, tid)                                                          
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
      volatile [Queue.A{this}] spec isLocal(this, tid)                                              
       ? isLocal(this, tid) ? B : E                                                                 
       : holds(this, tid) ? B : E                                                                   
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
      invariant  0 <= this.head && this.head <= this.tail && this.tail <= this.elems.length;        
      invariant  this.elems.length == 512;                                                          
      invariant  this.spec.length == this.tail - this.head;                                         
      invariant  forall int i ::0 <= i && i < this.spec.length ==> this.spec[i] == this.elems[this.head + i];
                                                                                                    
      requires this.elems == [Queue.T{this}].null;                                                  
      requires this.spec == [Queue.A{this}].null;                                                   
      {                                                                                             
                                                                                                    
      }                                                                                             
      public void init() {                                                                          
        assume this.elems == [Queue.T{this}].null;                                                  
        assume this.head == 0;                                                                      
        assume this.tail == 0;                                                                      
        assume this.spec == [Queue.A{this}].null;                                                   
        {                                                                                           
          int tmp1;                                                                                 
          tmp1 = 0;                                                                                 
          this.head := tmp1;                                                                        
          int tmp2;                                                                                 
          tmp2 = 0;                                                                                 
          this.tail := tmp2;                                                                        
          [Queue.T{this}] elems;                                                                    
          elems = new [Queue.T{this}](512);                                                         
          [Queue.A{this}] spec;                                                                     
          spec = new [Queue.A{this}](0);                                                            
          this.elems := elems, this.spec := spec;                                                   
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
      {                                                                                             
                                                                                                    
      }                                                                                             
      public int dequeue() {                                                                        
        {                                                                                           
          acquire(this);                                                                            
          {                                                                                         
            bool tmp3;                                                                              
            int tmp4;                                                                               
            int tmp5;                                                                               
            tmp5 := this.tail;                                                                      
            int tmp6;                                                                               
            tmp6 := this.head;                                                                      
            tmp4 = tmp5 - tmp6;                                                                     
            tmp3 = tmp4 > 0;                                                                        
            if (tmp3 /* == this.tail - this.head > 0 */) {                                          
              int result;                                                                           
              [Queue.T{this}] tmp7;                                                                 
              tmp7 := this.elems;                                                                   
              int tmp8;                                                                             
              tmp8 := this.head;                                                                    
              result := tmp7[tmp8];                                                                 
              [Queue.A{this}] newSpec;                                                              
              int tmp9;                                                                             
              int tmp10;                                                                            
              [Queue.A{this}] tmp11;                                                                
              tmp11 := this.spec;                                                                   
              tmp10 = tmp11.length;                                                                 
              tmp9 = tmp10 - 1;                                                                     
              newSpec = new [Queue.A{this}](tmp9);                                                  
              assume forall int i ::0 <= i && i < this.tail - (this.head + 1) ==> newSpec[i] == this.spec[i + 1];
              int tmp12;                                                                            
              tmp12 = 0;                                                                            
              int tmp13;                                                                            
              tmp13 := newSpec[tmp12];                                                              
              [Queue.A{this}] tmp14;                                                                
              tmp14 := this.spec;                                                                   
              int tmp15;                                                                            
              tmp15 = 1;                                                                            
              int tmp16;                                                                            
              tmp16 := tmp14[tmp15];                                                                
              assert tmp13 == tmp16;                                                                
              int tmp17;                                                                            
              int tmp18;                                                                            
              tmp18 := this.head;                                                                   
              tmp17 = tmp18 + 1;                                                                    
              this.head := tmp17;                                                                   
              this.spec := newSpec;                                                                 
              {                                                                                     
                release(this);                                                                      
                 return result;                                                                     
              }                                                                                     
            } else {                                                                                
              {                                                                                     
                release(this);                                                                      
                 return 0;                                                                          
              }                                                                                     
            }                                                                                       
          }                                                                                         
          release(this);                                                                            
        }                                                                                           
        {                                                                                           
          // return -1;                                                                             
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
 */                                                                                                 
                                                                                                    
//// Background                                                                                     
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * Tid                                                                                              
 */                                                                                                 
 type Tid = int;  // make int so you can iterate over Tids                                          
 const unique Tid.null: Tid;                                                                        
 axiom Tid.null == -1;                                                                              
                                                                                                    
 function {:inline} ValidTid(tid : Tid): bool {                                                     
  tid != Tid.null && tid >= 0                                                                       
 }                                                                                                  
                                                                                                    
 type{:datatype} State;                                                                             
 function{:constructor} NULL(): State;                                                              
 function{:constructor} FRESH(): State;                                                             
 function{:constructor} LOCAL(t: Tid): State;                                                       
 function{:constructor} SHARED(): State;                                                            
                                                                                                    
 function {:inline} isNull(state: State) : bool {                                                   
  state == NULL()                                                                                   
 }                                                                                                  
                                                                                                    
 function {:inline} isFresh(state: State) : bool {                                                  
  state == FRESH()                                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} isShared(state: State) : bool {                                                 
  state == SHARED()                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocal(state: State, t: Tid) : bool {                                          
  state == LOCAL(t)                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocalAssignable(state: State, t: Tid) : bool {                                
  state == LOCAL(t) || state == SHARED() || state == NULL()                                         
 }                                                                                                  
                                                                                                    
 function {:inline} isSharedAssignable(state: State) : bool {                                       
  state == SHARED() || state == NULL()                                                              
 }                                                                                                  
                                                                                                    
 function {:inline} isAccessible(state: State, t: Tid) : bool {                                     
  state == LOCAL(t) || state == SHARED()                                                            
 }                                                                                                  
                                                                                                    
 function {:inline} isAllocated(state: State) : bool {                                              
  !isFresh(state) && !isNull(state)                                                                 
 }                                                                                                  
                                                                                                    
                                                                                                    
 function MOD(x:int, y:int): int;                                                                   
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * For triggers                                                                                     
 */                                                                                                 
 function {:inline false} _trigger(i: int): bool {  true  }                                         
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 type Phase;                                                                                        
 const unique PreCommit : Phase;                                                                    
 const unique PostCommit : Phase;                                                                   
 const unique PhaseError : Phase;                                                                   
                                                                                                    
 function {:inline} transition(p: Phase, m: Mover): Phase {                                         
  if (m == _B) then                                                                                 
   p                                                                                                
  else if (m == _R) then                                                                            
   if (p == PreCommit) then                                                                         
    PreCommit                                                                                       
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _L) then                                                                            
   if (p == PostCommit) then                                                                        
    PostCommit                                                                                      
   else if (p == PreCommit) then                                                                    
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _N) then                                                                            
   if (p == PreCommit) then                                                                         
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else                                                                                              
   PhaseError // m == E or m == I                                                                   
 }                                                                                                  
                                                                                                    
                                                                                                    
 type Mover;                                                                                        
 const unique _B : Mover;                                                                           
 const unique _R : Mover;                                                                           
 const unique _L : Mover;                                                                           
 const unique _N : Mover;                                                                           
 const unique _E : Mover;                                                                           
                                                                                                    
 axiom (forall m : Mover :: m == _B || m == _R || m == _L || m == _N || m == _E);                   
                                                                                                    
 function {:inline} leq(m1: Mover, m2: Mover) : bool {                                              
  if (m1 == _B) then                                                                                
   true                                                                                             
  else if (m1 == _R) then                                                                           
   m2 == _R || m2 == _N || m2 == _E                                                                 
  else if (m1 == _L) then                                                                           
   m2 == _L || m2 == _N || m2 == _E                                                                 
  else if (m1 == _N) then                                                                           
   m2 == _N || m2 == _E                                                                             
  else if (m1 == _E) then                                                                           
   m2 == _E                                                                                         
  else                                                                                              
   false // should never happen...                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} lt(m1: Mover, m2: Mover) : bool { m1 != m2 && leq(m1, m2) }                     
                                                                                                    
 function {:inline} isError(m : Mover) : bool {                                                     
  m == _E                                                                                           
 }                                                                                                  
                                                                                                    
 function {:inline} eqOrError(m : Mover, n : Mover) : bool {                                        
  m == n || m == _E                                                                                 
 }                                                                                                  
                                                                                                    
 type{:datatype} MoverPath;                                                                         
 function{:constructor} moverPath(m:Mover, p:int):MoverPath;                                        
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// axioms                                                                                         
                                                                                                    
                                                                                                    
//// classes                                                                                        
                                                                                                    
                                                                                                    
/*** Class Decl Queue ***/                                                                          
                                                                                                    
type Queue;                                                                                         
const unique Queue.null: Queue;                                                                     
var Queue._state: [Queue]State;                                                                     
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var Queue.elems: [Queue]Array.Queue.T;                                                              
                                                                                                    
function {:inline} ReadEval.Queue.elems(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Array.Queue.T.null;                                                               
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Queue.elems(tid: Tid,this : Queue,newValue: Array.Queue.T,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Queue.head: [Queue]int;                                                                         
                                                                                                    
function {:inline} ReadEval.Queue.head(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Queue.head(tid: Tid,this : Queue,newValue: int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Queue.tail: [Queue]int;                                                                         
                                                                                                    
function {:inline} ReadEval.Queue.tail(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Queue.tail(tid: Tid,this : Queue,newValue: int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Queue.spec: [Queue]Array.Queue.A;                                                               
                                                                                                    
function {:inline} ReadEval.Queue.spec(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Array.Queue.A.null;                                                               
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Queue.spec(tid: Tid,this : Queue,newValue: Array.Queue.A,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Queue._lock: [Queue]Tid;                                                                        
                                                                                                    
function {:inline} ReadEval.Queue._lock(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Queue._lock[this]==tid)) then                                                               
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Queue._lock[this]==Tid.null)&&(newValue==tid))) then                                       
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Queue._lock[this]==tid)&&(newValue==Tid.null))) then                                      
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Queue._lock(tid: Tid,this : Queue,newValue: Tid,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Queue._lock[this]==tid)) then                                                               
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Queue._lock[this]==Tid.null)&&(newValue==tid))) then                                       
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Queue._lock[this]==tid)&&(newValue==Tid.null))) then                                      
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
function {:inline} Invariant.Queue.3663563(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
 (((0<=Queue.head[this])&&(Queue.head[this]<=Queue.tail[this]))&&(Queue.tail[this]<=Array.Queue.T._length[Queue.elems[this]]))
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Queue.3663571(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
 (Array.Queue.T._length[Queue.elems[this]]==512)                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Queue.3663583(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
 (Array.Queue.A._length[Queue.spec[this]]==(Queue.tail[this]-Queue.head[this]))                     
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Queue.3663616(tid: Tid,this : Queue,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
 (forall i: int ::  ((((0<=i)&&(i<Array.Queue.A._length[Queue.spec[this]]))==>(Array.Queue.A._elems[Queue.spec[this]][i]==Array.Queue.T._elems[Queue.elems[this]][(Queue.head[this]+i)]))))
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
procedure  Queue.init(tid:Tid, this : Queue)                                                        
modifies Queue._state;                                                                              
modifies Queue.elems;                                                                               
modifies Queue.head;                                                                                
modifies Queue.tail;                                                                                
modifies Queue.spec;                                                                                
modifies Queue._lock;                                                                               
modifies Array.Queue.T._state;                                                                      
modifies Array.Queue.T._elems;                                                                      
modifies Array.Queue.A._state;                                                                      
modifies Array.Queue.A._elems;                                                                      
                                                                                                    
requires ValidTid(tid);                                                                                    // (27.5): Bad tid
requires isLocal(Queue._state[this], tid);                                                          
                                                                                                    
requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
requires (Queue.elems[this]==Array.Queue.T.null);                                                   
                                                                                                    
requires (Queue.spec[this]==Array.Queue.A.null);                                                    
                                                                                                    
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && _this != this ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (27.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && _this != this ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (27.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && _this != this ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (27.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && _this != this ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (27.5): Object invariant may not hold.
                                                                                                    
ensures StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (27.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (27.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (27.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (27.5): Object invariant may not hold.
{                                                                                                   
 var Queue.tail3669666: [Queue]int;                                                                 
 var Queue._lock3669692: [Queue]Tid;                                                                
 var Queue.elems3669692: [Queue]Array.Queue.T;                                                      
 var path3669692: int;                                                                              
 var _pc3669666: Phase;                                                                             
 var spec3669694: Array.Queue.A;                                                                    
 var this3669694: Queue;                                                                            
 var Queue.head3669656: [Queue]int;                                                                 
 var Queue.head3669694: [Queue]int;                                                                 
 var Array.Queue.T._state3669656: [Array.Queue.T]State;                                             
 var Queue.head3669692: [Queue]int;                                                                 
 var $recorded.state3669689: int;                                                                   
 var Array.Queue.T._state3669692: [Array.Queue.T]State;                                             
 var Array.Queue.A._length3669692: [Array.Queue.A]int;                                              
 var tmp13669689: int;                                                                              
 var _pc3669656: Phase;                                                                             
 var tmp13669694: int;                                                                              
 var Array.Queue.T._length3669689: [Array.Queue.T]int;                                              
 var $recorded.state3669694: int;                                                                   
 var Array.Queue.T._length3669656: [Array.Queue.T]int;                                              
 var Queue._lock3669694: [Queue]Tid;                                                                
 var Array.Queue.A._length3669666: [Array.Queue.A]int;                                              
 var Queue._lock3669656: [Queue]Tid;                                                                
 var Queue._state3669656: [Queue]State;                                                             
 var tmp13669692: int;                                                                              
 var _pc3669689: Phase;                                                                             
 var Array.Queue.T._state3669689: [Array.Queue.T]State;                                             
 var tmp23669692: int;                                                                              
 var Array.Queue.T._length3669666: [Array.Queue.T]int;                                              
 var this3669656: Queue;                                                                            
 var Array.Queue.A._elems3669666: [Array.Queue.A]([int]int);                                        
 var path3669666: int;                                                                              
 var tid3669692: Tid;                                                                               
 var spec3669689: Array.Queue.A;                                                                    
 var Array.Queue.A._elems3669694: [Array.Queue.A]([int]int);                                        
 var elems3669689: Array.Queue.T;                                                                   
 var Array.Queue.A._elems3669692: [Array.Queue.A]([int]int);                                        
 var Array.Queue.T._elems3669692: [Array.Queue.T]([int]int);                                        
 var tmp13669666: int;                                                                              
 var _pc3669692: Phase;                                                                             
 var Queue._state3669666: [Queue]State;                                                             
 var Array.Queue.T._elems3669666: [Array.Queue.T]([int]int);                                        
 var this3669692: Queue;                                                                            
 var $recorded.state3669692: int;                                                                   
 var mover3669689: Mover;                                                                           
 var Array.Queue.T._elems3669694: [Array.Queue.T]([int]int);                                        
 var Queue.spec3669656: [Queue]Array.Queue.A;                                                       
 var Queue.spec3669666: [Queue]Array.Queue.A;                                                       
 var tmp23669666: int;                                                                              
 var path3669689: int;                                                                              
 var Queue.tail3669692: [Queue]int;                                                                 
 var elems3669694: Array.Queue.T;                                                                   
 var elems: Array.Queue.T;                                                                          
 var Queue._lock3669689: [Queue]Tid;                                                                
 var Array.Queue.T._elems3669656: [Array.Queue.T]([int]int);                                        
 var tid3669689: Tid;                                                                               
 var spec: Array.Queue.A;                                                                           
 var Queue.tail3669694: [Queue]int;                                                                 
 var moverPath3669656: MoverPath;                                                                   
 var Queue.head3669689: [Queue]int;                                                                 
 var Array.Queue.A._length3669689: [Array.Queue.A]int;                                              
 var Array.Queue.T._elems3669689: [Array.Queue.T]([int]int);                                        
 var Array.Queue.A._elems3669656: [Array.Queue.A]([int]int);                                        
 var this3669689: Queue;                                                                            
 var tmp13669656: int;                                                                              
 var Queue.elems3669689: [Queue]Array.Queue.T;                                                      
 var tmp1: int;                                                                                     
 var Array.Queue.A._length3669656: [Array.Queue.A]int;                                              
 var Array.Queue.A._state3669656: [Array.Queue.A]State;                                             
 var Queue._lock3669666: [Queue]Tid;                                                                
 var Queue._state3669694: [Queue]State;                                                             
 var Queue.elems3669694: [Queue]Array.Queue.T;                                                      
 var this3669666: Queue;                                                                            
 var mover3669666: Mover;                                                                           
 var spec3669692: Array.Queue.A;                                                                    
 var Queue.head3669666: [Queue]int;                                                                 
 var Queue._state3669689: [Queue]State;                                                             
 var Array.Queue.A._elems3669689: [Array.Queue.A]([int]int);                                        
 var Array.Queue.T._state3669694: [Array.Queue.T]State;                                             
 var tid3669666: Tid;                                                                               
 var moverPath3669666: MoverPath;                                                                   
 var Queue.spec3669692: [Queue]Array.Queue.A;                                                       
 var _pc3669694: Phase;                                                                             
 var Array.Queue.A._state3669692: [Array.Queue.A]State;                                             
 var tmp23669689: int;                                                                              
 var Queue.tail3669656: [Queue]int;                                                                 
 var moverPath3669689: MoverPath;                                                                   
 var moverPath3669692: MoverPath;                                                                   
 var elems3669692: Array.Queue.T;                                                                   
 var Array.Queue.T._length3669694: [Array.Queue.T]int;                                              
 var Array.Queue.A._state3669694: [Array.Queue.A]State;                                             
 var Array.Queue.A._state3669689: [Array.Queue.A]State;                                             
 var mover3669656: Mover;                                                                           
 var Array.Queue.T._length3669692: [Array.Queue.T]int;                                              
 var Array.Queue.T._state3669666: [Array.Queue.T]State;                                             
 var $recorded.state3669666: int;                                                                   
 var tmp2: int;                                                                                     
 var Array.Queue.A._length3669694: [Array.Queue.A]int;                                              
 var tmp23669694: int;                                                                              
 var $recorded.state3669656: int;                                                                   
 var Queue.tail3669689: [Queue]int;                                                                 
 var tid3669694: Tid;                                                                               
 var Queue._state3669692: [Queue]State;                                                             
 var Array.Queue.A._state3669666: [Array.Queue.A]State;                                             
 var Queue.elems3669666: [Queue]Array.Queue.T;                                                      
 var Queue.spec3669689: [Queue]Array.Queue.A;                                                       
 var tid3669656: Tid;                                                                               
 var mover3669692: Mover;                                                                           
 var Queue.elems3669656: [Queue]Array.Queue.T;                                                      
 var Queue.spec3669694: [Queue]Array.Queue.A;                                                       
 var path3669656: int;                                                                              
                                                                                                    
 var _pc : Phase;                                                                                   
 _pc := PreCommit;                                                                                  
                                                                                                    
 assert true && leq(m#moverPath(ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)),_R);       // (27.5): Can only have right-mover memory accesses in requires clause
 assert true && leq(m#moverPath(ReadEval.Queue.spec(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)),_R);       // (27.5): Can only have right-mover memory accesses in requires clause
                                                                                                    
                                                                                                    
 // 27.5: assume this.elems == [Queue.T{this}].null;                                                
                                                                                                    
 assume (Queue.elems[this]==Array.Queue.T.null);                                                    
                                                                                                    
 // 27.5: assume this.head == 0;                                                                    
                                                                                                    
 assume (Queue.head[this]==0);                                                                      
                                                                                                    
 // 27.5: assume this.tail == 0;                                                                    
                                                                                                    
 assume (Queue.tail[this]==0);                                                                      
                                                                                                    
 // 27.5: assume this.spec == [Queue.A{this}].null;                                                 
                                                                                                    
 assume (Queue.spec[this]==Array.Queue.A.null);                                                     
                                                                                                    
 // 28.9: int tmp1;                                                                                 
                                                                                                    
                                                                                                    
 // 28.9: tmp1 = 0;                                                                                 
                                                                                                    
 tmp1 := 0;                                                                                         
                                                                                                    
                                                                                                    
 // 28.9: this.head := tmp1;                                                                        
                                                                                                    
                                                                                                    
 moverPath3669656 := WriteEval.Queue.head(tid: Tid,this: Queue,tmp1: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3669656 := m#moverPath(moverPath3669656);                                                     
 path3669656 := p#moverPath(moverPath3669656);                                                      
 assume Queue._state3669656 == Queue._state && Queue.elems3669656 == Queue.elems && Queue.head3669656 == Queue.head && Queue.tail3669656 == Queue.tail && Queue.spec3669656 == Queue.spec && Queue._lock3669656 == Queue._lock && Array.Queue.T._state3669656 == Array.Queue.T._state && Array.Queue.T._elems3669656 == Array.Queue.T._elems && Array.Queue.T._length3669656 == Array.Queue.T._length && Array.Queue.A._state3669656 == Array.Queue.A._state && Array.Queue.A._elems3669656 == Array.Queue.A._elems && Array.Queue.A._length3669656 == Array.Queue.A._length && tmp13669656 == tmp1 && this3669656 == this && tid3669656 == tid && _pc3669656 == _pc;
 assume $recorded.state3669656 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (28.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 _pc := transition(_pc, mover3669656);                                                              
 assert _pc != PhaseError;                                                                                 // (28.9): Reduction failure
 Queue.head[this] := tmp1;                                                                          
                                                                                                    
 // 29.9: int tmp2;                                                                                 
                                                                                                    
                                                                                                    
 // 29.9: tmp2 = 0;                                                                                 
                                                                                                    
 tmp2 := 0;                                                                                         
                                                                                                    
                                                                                                    
 // 29.9: this.tail := tmp2;                                                                        
                                                                                                    
                                                                                                    
 moverPath3669666 := WriteEval.Queue.tail(tid: Tid,this: Queue,tmp2: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3669666 := m#moverPath(moverPath3669666);                                                     
 path3669666 := p#moverPath(moverPath3669666);                                                      
 assume Queue._state3669666 == Queue._state && Queue.elems3669666 == Queue.elems && Queue.head3669666 == Queue.head && Queue.tail3669666 == Queue.tail && Queue.spec3669666 == Queue.spec && Queue._lock3669666 == Queue._lock && Array.Queue.T._state3669666 == Array.Queue.T._state && Array.Queue.T._elems3669666 == Array.Queue.T._elems && Array.Queue.T._length3669666 == Array.Queue.T._length && Array.Queue.A._state3669666 == Array.Queue.A._state && Array.Queue.A._elems3669666 == Array.Queue.A._elems && Array.Queue.A._length3669666 == Array.Queue.A._length && tmp23669666 == tmp2 && tmp13669666 == tmp1 && this3669666 == this && tid3669666 == tid && _pc3669666 == _pc;
 assume $recorded.state3669666 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (29.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 _pc := transition(_pc, mover3669666);                                                              
 assert _pc != PhaseError;                                                                                 // (29.9): Reduction failure
 Queue.tail[this] := tmp2;                                                                          
                                                                                                    
 // 30.9: [Queue.T{this}] elems;                                                                    
                                                                                                    
                                                                                                    
 // 30.9: elems = new [Queue.T{this}](512);                                                         
                                                                                                    
 havoc elems;                                                                                       
 assume isFresh(Array.Queue.T._state[elems]);                                                       
 assume Array.Queue.T._length[elems] == 512;                                                        
 assume Array.Queue.T._this[elems] == this;                                                         
 Array.Queue.T._state[elems] := LOCAL(tid);                                                         
 assume (forall _i : int :: 0 <= _i ==> Array.Queue.T._elems[elems][_i] == 0);                      
                                                                                                    
 // 31.9: [Queue.A{this}] spec;                                                                     
                                                                                                    
                                                                                                    
 // 31.9: spec = new [Queue.A{this}](0);                                                            
                                                                                                    
 havoc spec;                                                                                        
 assume isFresh(Array.Queue.A._state[spec]);                                                        
 assume Array.Queue.A._length[spec] == 0;                                                           
 assume Array.Queue.A._this[spec] == this;                                                          
 Array.Queue.A._state[spec] := LOCAL(tid);                                                          
 assume (forall _i : int :: 0 <= _i ==> Array.Queue.A._elems[spec][_i] == 0);                       
                                                                                                    
 // 32.9: this.elems := elems, this.spec := spec;                                                   
                                                                                                    
 assert _pc == PreCommit;                                                                                  // (32.9): Local Write block must appear pre commit.
                                                                                                    
 // 32.9: this.elems := elems;                                                                      
                                                                                                    
                                                                                                    
 moverPath3669689 := WriteEval.Queue.elems(tid: Tid,this: Queue,elems: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3669689 := m#moverPath(moverPath3669689);                                                     
 path3669689 := p#moverPath(moverPath3669689);                                                      
 assume Queue._state3669689 == Queue._state && Queue.elems3669689 == Queue.elems && Queue.head3669689 == Queue.head && Queue.tail3669689 == Queue.tail && Queue.spec3669689 == Queue.spec && Queue._lock3669689 == Queue._lock && Array.Queue.T._state3669689 == Array.Queue.T._state && Array.Queue.T._elems3669689 == Array.Queue.T._elems && Array.Queue.T._length3669689 == Array.Queue.T._length && Array.Queue.A._state3669689 == Array.Queue.A._state && Array.Queue.A._elems3669689 == Array.Queue.A._elems && Array.Queue.A._length3669689 == Array.Queue.A._length && spec3669689 == spec && elems3669689 == elems && tmp23669689 == tmp2 && tmp13669689 == tmp1 && this3669689 == this && tid3669689 == tid && _pc3669689 == _pc;
 assume $recorded.state3669689 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (32.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3669689);                                                              
 assert _pc != PhaseError;                                                                                 // (32.9): Reduction failure
 assert _pc == PreCommit;                                                                                  // (32.9): Local Write block can only include right-movers.
 Queue.elems[this] := elems;                                                                        
                                                                                                    
 // 32.29: this.spec := spec;                                                                       
                                                                                                    
                                                                                                    
 moverPath3669692 := WriteEval.Queue.spec(tid: Tid,this: Queue,spec: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3669692 := m#moverPath(moverPath3669692);                                                     
 path3669692 := p#moverPath(moverPath3669692);                                                      
 assume Queue._state3669692 == Queue._state && Queue.elems3669692 == Queue.elems && Queue.head3669692 == Queue.head && Queue.tail3669692 == Queue.tail && Queue.spec3669692 == Queue.spec && Queue._lock3669692 == Queue._lock && Array.Queue.T._state3669692 == Array.Queue.T._state && Array.Queue.T._elems3669692 == Array.Queue.T._elems && Array.Queue.T._length3669692 == Array.Queue.T._length && Array.Queue.A._state3669692 == Array.Queue.A._state && Array.Queue.A._elems3669692 == Array.Queue.A._elems && Array.Queue.A._length3669692 == Array.Queue.A._length && spec3669692 == spec && elems3669692 == elems && tmp23669692 == tmp2 && tmp13669692 == tmp1 && this3669692 == this && tid3669692 == tid && _pc3669692 == _pc;
 assume $recorded.state3669692 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (32.29): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3669692);                                                              
 assert _pc != PhaseError;                                                                                 // (32.29): Reduction failure
 assert _pc == PreCommit;                                                                                  // (32.29): Local Write block can only include right-movers.
 Queue.spec[this] := spec;                                                                          
 assert isLocal(Array.Queue.T._state[elems], tid);                                                         // (32.9): Can only have local designators in Local Write block.
 assert isLocal(Array.Queue.A._state[spec], tid);                                                          // (32.29): Can only have local designators in Local Write block.
 Array.Queue.T._state[elems] := SHARED();                                                           
 Queue._state[Array.Queue.T._this[elems]] := SHARED();                                              
 Array.Queue.A._state[spec] := SHARED();                                                            
 Queue._state[Array.Queue.A._this[spec]] := SHARED();                                               
 Queue._state[Array.Queue.T._this[elems]] := SHARED();                                              
 assert isSharedAssignable(Array.Queue.T._state[Queue.elems[Array.Queue.T._this[elems]]]);                 // (32.9): elems became shared, but Array.Queue.T._this[elems].elems may not be shared.
 assert isSharedAssignable(Array.Queue.A._state[Queue.spec[Array.Queue.T._this[elems]]]);                  // (32.9): elems became shared, but Array.Queue.T._this[elems].spec may not be shared.
 Queue._state[Array.Queue.A._this[spec]] := SHARED();                                               
 assert isSharedAssignable(Array.Queue.T._state[Queue.elems[Array.Queue.A._this[spec]]]);                  // (32.29): spec became shared, but Array.Queue.A._this[spec].elems may not be shared.
 assert isSharedAssignable(Array.Queue.A._state[Queue.spec[Array.Queue.A._this[spec]]]);                   // (32.29): spec became shared, but Array.Queue.A._this[spec].spec may not be shared.
                                                                                                    
 // 27.21: // return;                                                                               
                                                                                                    
 assume Queue._state3669694 == Queue._state && Queue.elems3669694 == Queue.elems && Queue.head3669694 == Queue.head && Queue.tail3669694 == Queue.tail && Queue.spec3669694 == Queue.spec && Queue._lock3669694 == Queue._lock && Array.Queue.T._state3669694 == Array.Queue.T._state && Array.Queue.T._elems3669694 == Array.Queue.T._elems && Array.Queue.T._length3669694 == Array.Queue.T._length && Array.Queue.A._state3669694 == Array.Queue.A._state && Array.Queue.A._elems3669694 == Array.Queue.A._elems && Array.Queue.A._length3669694 == Array.Queue.A._length && spec3669694 == spec && elems3669694 == elems && tmp23669694 == tmp2 && tmp13669694 == tmp1 && this3669694 == this && tid3669694 == tid;
 assume $recorded.state3669694 == 1;                                                                
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (27.21): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (27.21): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (27.21): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (27.21): Object invariant may not hold.
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
procedure  Queue.dequeue(tid:Tid, this : Queue)                                                     
returns ($result : int)                                                                             
modifies Queue._state;                                                                              
modifies Queue.elems;                                                                               
modifies Queue.head;                                                                                
modifies Queue.tail;                                                                                
modifies Queue.spec;                                                                                
modifies Queue._lock;                                                                               
modifies Array.Queue.T._state;                                                                      
modifies Array.Queue.T._elems;                                                                      
modifies Array.Queue.A._state;                                                                      
modifies Array.Queue.A._elems;                                                                      
                                                                                                    
requires ValidTid(tid);                                                                                    // (36.5): Bad tid
requires isShared(Queue._state[this]);                                                                     // (36.5): this is not global
                                                                                                    
requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (36.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (36.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (36.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (36.5): Object invariant may not hold.
                                                                                                    
ensures StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (36.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (36.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (36.5): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (36.5): Object invariant may not hold.
{                                                                                                   
 var tmp33669885: bool;                                                                             
 var tid3669896: Tid;                                                                               
 var tmp63669882: int;                                                                              
 var this3669741: Queue;                                                                            
 var Array.Queue.T._elems3669882: [Array.Queue.T]([int]int);                                        
 var result: int;                                                                                   
 var path3669768: int;                                                                              
 var tmp53669882: int;                                                                              
 var tmp153669863: int;                                                                             
 var $result3669712: int;                                                                           
 var tmp133669872: int;                                                                             
 var tmp183669889: int;                                                                             
 var Array.Queue.T._elems3669863: [Array.Queue.T]([int]int);                                        
 var path3669718: int;                                                                              
 var Array.Queue.T._length3669889: [Array.Queue.T]int;                                              
 var newSpec3669768: Array.Queue.A;                                                                 
 var tmp43669844: int;                                                                              
 var tmp17: int;                                                                                    
 var tmp133669882: int;                                                                             
 var Array.Queue.T._elems3669747: [Array.Queue.T]([int]int);                                        
 var path3669741: int;                                                                              
 var Queue._state3669844: [Queue]State;                                                             
 var $result3669858: int;                                                                           
 var tmp103669863: int;                                                                             
 var path3669858: int;                                                                              
 var Array.Queue.T._length3669863: [Array.Queue.T]int;                                              
 var tid3669889: Tid;                                                                               
 var tmp153669858: int;                                                                             
 var Array.Queue.T._state3669837: [Array.Queue.T]State;                                             
 var Queue._state3669751: [Queue]State;                                                             
 var $recorded.state3669896: int;                                                                   
 var mover3669751: Mover;                                                                           
 var newSpec3669837: Array.Queue.A;                                                                 
 var tmp103669844: int;                                                                             
 var tmp83669837: int;                                                                              
 var Array.Queue.T._elems3669896: [Array.Queue.T]([int]int);                                        
 var tmp163669885: int;                                                                             
 var Queue.elems3669872: [Queue]Array.Queue.T;                                                      
 var tmp73669747: Array.Queue.T;                                                                    
 var tmp153669885: int;                                                                             
 var tmp93669844: int;                                                                              
 var Array.Queue.T._length3669858: [Array.Queue.T]int;                                              
 var tmp43669858: int;                                                                              
 var tid3669718: Tid;                                                                               
 var tmp73669863: Array.Queue.T;                                                                    
 var tmp83669885: int;                                                                              
 var this3669896: Queue;                                                                            
 var Queue._lock3669896: [Queue]Tid;                                                                
 var path3669712: int;                                                                              
 var Array.Queue.A._length3669741: [Array.Queue.A]int;                                              
 var tmp5: int;                                                                                     
 var Queue.head3669906: [Queue]int;                                                                 
 var Array.Queue.A._length3669872: [Array.Queue.A]int;                                              
 var Array.Queue.A._length3669858: [Array.Queue.A]int;                                              
 var moverPath3669872: MoverPath;                                                                   
 var Array.Queue.T._state3669906: [Array.Queue.T]State;                                             
 var _pc3669885: Phase;                                                                             
 var Queue._state3669768: [Queue]State;                                                             
 var $result3669885: int;                                                                           
 var tmp143669872: Array.Queue.A;                                                                   
 var tmp43669882: int;                                                                              
 var mover3669844: Mover;                                                                           
 var Array.Queue.A._length3669747: [Array.Queue.A]int;                                              
 var tmp33669718: bool;                                                                             
 var result3669863: int;                                                                            
 var Queue.spec3669889: [Queue]Array.Queue.A;                                                       
 var moverPath3669718: MoverPath;                                                                   
 var result3669844: int;                                                                            
 var _pc3669718: Phase;                                                                             
 var Array.Queue.A._elems3669889: [Array.Queue.A]([int]int);                                        
 var tmp163669872: int;                                                                             
 var tmp143669882: Array.Queue.A;                                                                   
 var this3669751: Queue;                                                                            
 var tmp113669882: Array.Queue.A;                                                                   
 var Array.Queue.T._state3669889: [Array.Queue.T]State;                                             
 var Array.Queue.T._state3669718: [Array.Queue.T]State;                                             
 var Array.Queue.T._length3669906: [Array.Queue.T]int;                                              
 var Array.Queue.A._length3669863: [Array.Queue.A]int;                                              
 var result3669768: int;                                                                            
 var _pc3669858: Phase;                                                                             
 var tmp93669837: int;                                                                              
 var Queue._lock3669885: [Queue]Tid;                                                                
 var $recorded.state3669889: int;                                                                   
 var tmp123669837: int;                                                                             
 var path3669844: int;                                                                              
 var Queue.elems3669768: [Queue]Array.Queue.T;                                                      
 var Array.Queue.T._elems3669858: [Array.Queue.T]([int]int);                                        
 var moverPath3669712: MoverPath;                                                                   
 var Array.Queue.A._state3669858: [Array.Queue.A]State;                                             
 var tmp14: Array.Queue.A;                                                                          
 var Queue.tail3669889: [Queue]int;                                                                 
 var tmp153669872: int;                                                                             
 var Array.Queue.T._length3669751: [Array.Queue.T]int;                                              
 var Array.Queue.T._elems3669837: [Array.Queue.T]([int]int);                                        
 var result3669889: int;                                                                            
 var tmp43669718: int;                                                                              
 var Queue._state3669896: [Queue]State;                                                             
 var tmp11: Array.Queue.A;                                                                          
 var Queue._lock3669718: [Queue]Tid;                                                                
 var Queue.tail3669885: [Queue]int;                                                                 
 var Array.Queue.T._length3669882: [Array.Queue.T]int;                                              
 var Queue._state3669889: [Queue]State;                                                             
 var tmp8: int;                                                                                     
 var $recorded.state3669885: int;                                                                   
 var tmp113669844: Array.Queue.A;                                                                   
 var Queue.head3669768: [Queue]int;                                                                 
 var tmp53669837: int;                                                                              
 var Queue.spec3669747: [Queue]Array.Queue.A;                                                       
 var Queue._state3669718: [Queue]State;                                                             
 var Array.Queue.T._state3669747: [Array.Queue.T]State;                                             
 var moverPath3669882: MoverPath;                                                                   
 var result3669872: int;                                                                            
 var Array.Queue.A._length3669885: [Array.Queue.A]int;                                              
 var $result3669768: int;                                                                           
 var Queue.spec3669718: [Queue]Array.Queue.A;                                                       
 var tmp143669863: Array.Queue.A;                                                                   
 var Array.Queue.A._state3669885: [Array.Queue.A]State;                                             
 var Array.Queue.A._elems3669844: [Array.Queue.A]([int]int);                                        
 var Queue.elems3669747: [Queue]Array.Queue.T;                                                      
 var _pc3669837: Phase;                                                                             
 var Array.Queue.A._state3669882: [Array.Queue.A]State;                                             
 var moverPath3669751: MoverPath;                                                                   
 var this3669747: Queue;                                                                            
 var Array.Queue.T._length3669747: [Array.Queue.T]int;                                              
 var Queue.tail3669741: [Queue]int;                                                                 
 var mover3669837: Mover;                                                                           
 var tmp123669882: int;                                                                             
 var Array.Queue.T._length3669712: [Array.Queue.T]int;                                              
 var $recorded.state3669872: int;                                                                   
 var Array.Queue.T._elems3669712: [Array.Queue.T]([int]int);                                        
 var Queue.head3669889: [Queue]int;                                                                 
 var Queue._state3669906: [Queue]State;                                                             
 var Array.Queue.A._elems3669863: [Array.Queue.A]([int]int);                                        
 var Queue.tail3669896: [Queue]int;                                                                 
 var tmp73669837: Array.Queue.T;                                                                    
 var Array.Queue.A._state3669768: [Array.Queue.A]State;                                             
 var tmp133669837: int;                                                                             
 var Array.Queue.A._state3669718: [Array.Queue.A]State;                                             
 var tmp63669889: int;                                                                              
 var tmp83669751: int;                                                                              
 var tmp93669882: int;                                                                              
 var Queue.elems3669882: [Queue]Array.Queue.T;                                                      
 var Queue._state3669741: [Queue]State;                                                             
 var Queue.spec3669858: [Queue]Array.Queue.A;                                                       
 var tid3669768: Tid;                                                                               
 var Array.Queue.A._state3669712: [Array.Queue.A]State;                                             
 var tmp133669863: int;                                                                             
 var Queue.spec3669751: [Queue]Array.Queue.A;                                                       
 var $recorded.state3669768: int;                                                                   
 var Queue.spec3669863: [Queue]Array.Queue.A;                                                       
 var Array.Queue.T._elems3669872: [Array.Queue.T]([int]int);                                        
 var moverPath3669741: MoverPath;                                                                   
 var Queue.tail3669882: [Queue]int;                                                                 
 var this3669906: Queue;                                                                            
 var tmp43669863: int;                                                                              
 var Queue.elems3669858: [Queue]Array.Queue.T;                                                      
 var Queue._state3669712: [Queue]State;                                                             
 var $recorded.state3669747: int;                                                                   
 var tid3669882: Tid;                                                                               
 var tmp9: int;                                                                                     
 var tmp113669872: Array.Queue.A;                                                                   
 var Array.Queue.T._length3669885: [Array.Queue.T]int;                                              
 var tmp73669872: Array.Queue.T;                                                                    
 var mover3669768: Mover;                                                                           
 var Queue._state3669885: [Queue]State;                                                             
 var Queue._lock3669768: [Queue]Tid;                                                                
 var Array.Queue.A._elems3669837: [Array.Queue.A]([int]int);                                        
 var tmp53669712: int;                                                                              
 var Queue._state3669863: [Queue]State;                                                             
 var Array.Queue.T._state3669885: [Array.Queue.T]State;                                             
 var tid3669844: Tid;                                                                               
 var Array.Queue.A._length3669768: [Array.Queue.A]int;                                              
 var Queue.spec3669885: [Queue]Array.Queue.A;                                                       
 var Queue.head3669885: [Queue]int;                                                                 
 var tmp63669863: int;                                                                              
 var Queue.head3669863: [Queue]int;                                                                 
 var $result3669889: int;                                                                           
 var tmp123669858: int;                                                                             
 var tmp103669885: int;                                                                             
 var Queue.head3669741: [Queue]int;                                                                 
 var tmp83669882: int;                                                                              
 var tmp53669896: int;                                                                              
 var Array.Queue.A._elems3669896: [Array.Queue.A]([int]int);                                        
 var Array.Queue.A._elems3669718: [Array.Queue.A]([int]int);                                        
 var path3669872: int;                                                                              
 var Queue.spec3669768: [Queue]Array.Queue.A;                                                       
 var $result3669872: int;                                                                           
 var tid3669741: Tid;                                                                               
 var Array.Queue.A._state3669844: [Array.Queue.A]State;                                             
 var tmp63669896: int;                                                                              
 var tmp133669889: int;                                                                             
 var Queue._lock3669858: [Queue]Tid;                                                                
 var Queue._lock3669863: [Queue]Tid;                                                                
 var tmp183669885: int;                                                                             
 var Array.Queue.A._elems3669741: [Array.Queue.A]([int]int);                                        
 var Queue.tail3669906: [Queue]int;                                                                 
 var tid3669747: Tid;                                                                               
 var tmp123669844: int;                                                                             
 var tmp93669858: int;                                                                              
 var newSpec3669885: Array.Queue.A;                                                                 
 var this3669889: Queue;                                                                            
 var tmp133669844: int;                                                                             
 var tmp143669885: Array.Queue.A;                                                                   
 var this3669882: Queue;                                                                            
 var tmp133669858: int;                                                                             
 var tmp63669768: int;                                                                              
 var tmp153669882: int;                                                                             
 var Array.Queue.T._state3669712: [Array.Queue.T]State;                                             
 var tmp163669863: int;                                                                             
 var mover3669741: Mover;                                                                           
 var Queue.spec3669844: [Queue]Array.Queue.A;                                                       
 var tmp53669844: int;                                                                              
 var _pc3669906: Phase;                                                                             
 var tmp123669889: int;                                                                             
 var Queue._lock3669712: [Queue]Tid;                                                                
 var Queue.spec3669896: [Queue]Array.Queue.A;                                                       
 var Array.Queue.T._state3669882: [Array.Queue.T]State;                                             
 var $result3669896: int;                                                                           
 var Queue.head3669747: [Queue]int;                                                                 
 var tmp33669741: bool;                                                                             
 var Queue._state3669882: [Queue]State;                                                             
 var moverPath3669885: MoverPath;                                                                   
 var $recorded.state3669863: int;                                                                   
 var Queue._state3669837: [Queue]State;                                                             
 var Array.Queue.A._state3669837: [Array.Queue.A]State;                                             
 var tmp43669896: int;                                                                              
 var Queue._state3669747: [Queue]State;                                                             
 var tmp73669889: Array.Queue.T;                                                                    
 var tmp143669889: Array.Queue.A;                                                                   
 var _pc3669863: Phase;                                                                             
 var moverPath3669768: MoverPath;                                                                   
 var Queue._lock3669906: [Queue]Tid;                                                                
 var Array.Queue.A._elems3669712: [Array.Queue.A]([int]int);                                        
 var tmp73669885: Array.Queue.T;                                                                    
 var tmp63669837: int;                                                                              
 var tmp33669896: bool;                                                                             
 var Queue._lock3669751: [Queue]Tid;                                                                
 var $result3669747: int;                                                                           
 var Queue.head3669882: [Queue]int;                                                                 
 var $result3669863: int;                                                                           
 var Array.Queue.A._state3669747: [Array.Queue.A]State;                                             
 var tmp33669858: bool;                                                                             
 var tmp43669885: int;                                                                              
 var _pc3669768: Phase;                                                                             
 var tmp113669863: Array.Queue.A;                                                                   
 var tid3669751: Tid;                                                                               
 var tmp53669858: int;                                                                              
 var Queue._lock3669872: [Queue]Tid;                                                                
 var Queue.head3669718: [Queue]int;                                                                 
 var tmp113669889: Array.Queue.A;                                                                   
 var Array.Queue.A._elems3669906: [Array.Queue.A]([int]int);                                        
 var Array.Queue.A._state3669751: [Array.Queue.A]State;                                             
 var Array.Queue.T._state3669751: [Array.Queue.T]State;                                             
 var tid3669858: Tid;                                                                               
 var tmp18: int;                                                                                    
 var Array.Queue.T._state3669872: [Array.Queue.T]State;                                             
 var Array.Queue.A._elems3669885: [Array.Queue.A]([int]int);                                        
 var _pc3669882: Phase;                                                                             
 var Array.Queue.T._elems3669751: [Array.Queue.T]([int]int);                                        
 var Queue.spec3669906: [Queue]Array.Queue.A;                                                       
 var result3669751: int;                                                                            
 var Queue.tail3669858: [Queue]int;                                                                 
 var mover3669872: Mover;                                                                           
 var $recorded.state3669844: int;                                                                   
 var $recorded.state3669882: int;                                                                   
 var Array.Queue.T._elems3669889: [Array.Queue.T]([int]int);                                        
 var moverPath3669837: MoverPath;                                                                   
 var Array.Queue.T._length3669741: [Array.Queue.T]int;                                              
 var Queue._state3669872: [Queue]State;                                                             
 var $result3669844: int;                                                                           
 var tid3669837: Tid;                                                                               
 var newSpec3669863: Array.Queue.A;                                                                 
 var tmp33669882: bool;                                                                             
 var Array.Queue.T._elems3669768: [Array.Queue.T]([int]int);                                        
 var tmp93669872: int;                                                                              
 var tmp103669889: int;                                                                             
 var Queue.head3669751: [Queue]int;                                                                 
 var Array.Queue.A._length3669889: [Array.Queue.A]int;                                              
 var Array.Queue.A._elems3669768: [Array.Queue.A]([int]int);                                        
 var result3669858: int;                                                                            
 var tmp53669741: int;                                                                              
 var Queue.spec3669741: [Queue]Array.Queue.A;                                                       
 var tmp113669885: Array.Queue.A;                                                                   
 var tmp53669863: int;                                                                              
 var this3669768: Queue;                                                                            
 var Array.Queue.T._length3669844: [Array.Queue.T]int;                                              
 var Array.Queue.A._state3669896: [Array.Queue.A]State;                                             
 var _pc3669872: Phase;                                                                             
 var Array.Queue.A._length3669896: [Array.Queue.A]int;                                              
 var tmp33669889: bool;                                                                             
 var tmp123669863: int;                                                                             
 var Array.Queue.T._length3669896: [Array.Queue.T]int;                                              
 var Array.Queue.A._elems3669882: [Array.Queue.A]([int]int);                                        
 var tmp73669751: Array.Queue.T;                                                                    
 var tmp33669712: bool;                                                                             
 var tmp53669872: int;                                                                              
 var Array.Queue.A._state3669889: [Array.Queue.A]State;                                             
 var tmp163669889: int;                                                                             
 var tmp173669872: int;                                                                             
 var newSpec3669872: Array.Queue.A;                                                                 
 var tmp93669768: int;                                                                              
 var tmp10: int;                                                                                    
 var tmp33669863: bool;                                                                             
 var _pc3669747: Phase;                                                                             
 var tmp15: int;                                                                                    
 var Queue.tail3669718: [Queue]int;                                                                 
 var Queue.head3669858: [Queue]int;                                                                 
 var newSpec3669882: Array.Queue.A;                                                                 
 var tmp13: int;                                                                                    
 var Array.Queue.T._state3669896: [Array.Queue.T]State;                                             
 var tid3669906: Tid;                                                                               
 var moverPath3669747: MoverPath;                                                                   
 var tmp93669889: int;                                                                              
 var tid3669872: Tid;                                                                               
 var $result3669718: int;                                                                           
 var Queue.head3669837: [Queue]int;                                                                 
 var Queue.head3669872: [Queue]int;                                                                 
 var tmp143669844: Array.Queue.A;                                                                   
 var mover3669747: Mover;                                                                           
 var tmp183669872: int;                                                                             
 var $result3669741: int;                                                                           
 var _pc3669741: Phase;                                                                             
 var Array.Queue.A._length3669718: [Array.Queue.A]int;                                              
 var Queue._state3669858: [Queue]State;                                                             
 var this3669885: Queue;                                                                            
 var tmp83669872: int;                                                                              
 var Array.Queue.T._length3669837: [Array.Queue.T]int;                                              
 var moverPath3669844: MoverPath;                                                                   
 var $recorded.state3669906: int;                                                                   
 var Queue.spec3669712: [Queue]Array.Queue.A;                                                       
 var Queue.head3669712: [Queue]int;                                                                 
 var this3669844: Queue;                                                                            
 var tmp33669768: bool;                                                                             
 var tmp143669858: Array.Queue.A;                                                                   
 var Array.Queue.T._elems3669906: [Array.Queue.T]([int]int);                                        
 var tmp73669844: Array.Queue.T;                                                                    
 var Queue._lock3669741: [Queue]Tid;                                                                
 var Queue.elems3669889: [Queue]Array.Queue.T;                                                      
 var tmp73669768: Array.Queue.T;                                                                    
 var tmp123669872: int;                                                                             
 var $recorded.state3669741: int;                                                                   
 var tmp63669747: int;                                                                              
 var tmp83669889: int;                                                                              
 var Queue.elems3669712: [Queue]Array.Queue.T;                                                      
 var tmp103669858: int;                                                                             
 var tmp173669885: int;                                                                             
 var Array.Queue.A._elems3669872: [Array.Queue.A]([int]int);                                        
 var tmp33669747: bool;                                                                             
 var Queue.elems3669896: [Queue]Array.Queue.T;                                                      
 var this3669837: Queue;                                                                            
 var tmp113669837: Array.Queue.A;                                                                   
 var tmp103669872: int;                                                                             
 var path3669837: int;                                                                              
 var Array.Queue.T._state3669768: [Array.Queue.T]State;                                             
 var Queue.tail3669768: [Queue]int;                                                                 
 var Array.Queue.A._length3669837: [Array.Queue.A]int;                                              
 var mover3669712: Mover;                                                                           
 var tmp83669768: int;                                                                              
 var tmp7: Array.Queue.T;                                                                           
 var _pc3669844: Phase;                                                                             
 var Queue.elems3669844: [Queue]Array.Queue.T;                                                      
 var result3669885: int;                                                                            
 var Array.Queue.A._state3669872: [Array.Queue.A]State;                                             
 var Array.Queue.A._elems3669751: [Array.Queue.A]([int]int);                                        
 var tmp12: int;                                                                                    
 var path3669885: int;                                                                              
 var Queue.head3669896: [Queue]int;                                                                 
 var Array.Queue.T._state3669844: [Array.Queue.T]State;                                             
 var tmp123669885: int;                                                                             
 var newSpec3669889: Array.Queue.A;                                                                 
 var Array.Queue.T._state3669741: [Array.Queue.T]State;                                             
 var Array.Queue.T._length3669872: [Array.Queue.T]int;                                              
 var tmp63669751: int;                                                                              
 var this3669858: Queue;                                                                            
 var tmp43669837: int;                                                                              
 var $result3669882: int;                                                                           
 var Queue.elems3669863: [Queue]Array.Queue.T;                                                      
 var tmp163669882: int;                                                                             
 var Queue.tail3669751: [Queue]int;                                                                 
 var Array.Queue.T._length3669718: [Array.Queue.T]int;                                              
 var tmp83669747: int;                                                                              
 var tmp113669768: Array.Queue.A;                                                                   
 var Queue.elems3669885: [Queue]Array.Queue.T;                                                      
 var tmp33669872: bool;                                                                             
 var _pc3669896: Phase;                                                                             
 var result3669882: int;                                                                            
 var tmp43669712: int;                                                                              
 var tmp73669858: Array.Queue.T;                                                                    
 var Queue._lock3669747: [Queue]Tid;                                                                
 var $result3669906: int;                                                                           
 var tmp103669837: int;                                                                             
 var tid3669712: Tid;                                                                               
 var tmp103669768: int;                                                                             
 var tmp33669751: bool;                                                                             
 var tmp53669718: int;                                                                              
 var tmp93669863: int;                                                                              
 var this3669712: Queue;                                                                            
 var mover3669885: Mover;                                                                           
 var tmp3: bool;                                                                                    
 var tmp43669747: int;                                                                              
 var tmp63669872: int;                                                                              
 var Array.Queue.A._state3669906: [Array.Queue.A]State;                                             
 var tmp53669768: int;                                                                              
 var _pc3669712: Phase;                                                                             
 var Queue._lock3669889: [Queue]Tid;                                                                
 var Queue.elems3669837: [Queue]Array.Queue.T;                                                      
 var Array.Queue.A._length3669712: [Array.Queue.A]int;                                              
 var path3669747: int;                                                                              
 var tmp53669889: int;                                                                              
 var Queue._lock3669844: [Queue]Tid;                                                                
 var Queue._lock3669837: [Queue]Tid;                                                                
 var $result3669837: int;                                                                           
 var $recorded.state3669712: int;                                                                   
 var tmp173669882: int;                                                                             
 var Array.Queue.A._length3669751: [Array.Queue.A]int;                                              
 var Array.Queue.T._elems3669844: [Array.Queue.T]([int]int);                                        
 var mover3669882: Mover;                                                                           
 var Queue.spec3669837: [Queue]Array.Queue.A;                                                       
 var tmp83669844: int;                                                                              
 var Queue.tail3669863: [Queue]int;                                                                 
 var tmp53669751: int;                                                                              
 var tmp43669872: int;                                                                              
 var Queue.elems3669718: [Queue]Array.Queue.T;                                                      
 var Queue.spec3669872: [Queue]Array.Queue.A;                                                       
 var Queue.tail3669712: [Queue]int;                                                                 
 var tmp63669885: int;                                                                              
 var tmp63669844: int;                                                                              
 var Queue._lock3669882: [Queue]Tid;                                                                
 var Queue.tail3669747: [Queue]int;                                                                 
 var tmp43669889: int;                                                                              
 var tmp163669858: int;                                                                             
 var Array.Queue.T._length3669768: [Array.Queue.T]int;                                              
 var $recorded.state3669858: int;                                                                   
 var _pc3669751: Phase;                                                                             
 var tmp93669885: int;                                                                              
 var path3669882: int;                                                                              
 var tmp63669858: int;                                                                              
 var tmp73669882: Array.Queue.T;                                                                    
 var mover3669858: Mover;                                                                           
 var moverPath3669858: MoverPath;                                                                   
 var tid3669885: Tid;                                                                               
 var newSpec3669858: Array.Queue.A;                                                                 
 var Array.Queue.A._state3669863: [Array.Queue.A]State;                                             
 var Queue.spec3669882: [Queue]Array.Queue.A;                                                       
 var result3669837: int;                                                                            
 var Queue.elems3669741: [Queue]Array.Queue.T;                                                      
 var tmp113669858: Array.Queue.A;                                                                   
 var tmp83669863: int;                                                                              
 var Array.Queue.A._length3669844: [Array.Queue.A]int;                                              
 var this3669718: Queue;                                                                            
 var Array.Queue.T._state3669863: [Array.Queue.T]State;                                             
 var Queue.tail3669837: [Queue]int;                                                                 
 var newSpec: Array.Queue.A;                                                                        
 var $recorded.state3669718: int;                                                                   
 var path3669751: int;                                                                              
 var newSpec3669844: Array.Queue.A;                                                                 
 var _pc3669889: Phase;                                                                             
 var Array.Queue.A._elems3669747: [Array.Queue.A]([int]int);                                        
 var tmp53669885: int;                                                                              
 var $recorded.state3669837: int;                                                                   
 var Queue.tail3669872: [Queue]int;                                                                 
 var tmp63669718: int;                                                                              
 var Array.Queue.T._elems3669885: [Array.Queue.T]([int]int);                                        
 var tmp43669768: int;                                                                              
 var Array.Queue.T._elems3669741: [Array.Queue.T]([int]int);                                        
 var tmp173669889: int;                                                                             
 var tmp63669741: int;                                                                              
 var $recorded.state3669751: int;                                                                   
 var Array.Queue.A._state3669741: [Array.Queue.A]State;                                             
 var tid3669863: Tid;                                                                               
 var Queue.tail3669844: [Queue]int;                                                                 
 var tmp183669882: int;                                                                             
 var tmp153669889: int;                                                                             
 var Array.Queue.T._elems3669718: [Array.Queue.T]([int]int);                                        
 var tmp4: int;                                                                                     
 var tmp133669885: int;                                                                             
 var this3669872: Queue;                                                                            
 var Array.Queue.A._length3669906: [Array.Queue.A]int;                                              
 var tmp33669844: bool;                                                                             
 var this3669863: Queue;                                                                            
 var tmp16: int;                                                                                    
 var Array.Queue.T._state3669858: [Array.Queue.T]State;                                             
 var Queue.elems3669906: [Queue]Array.Queue.T;                                                      
 var Array.Queue.A._elems3669858: [Array.Queue.A]([int]int);                                        
 var tmp6: int;                                                                                     
 var Queue.head3669844: [Queue]int;                                                                 
 var tmp103669882: int;                                                                             
 var result3669747: int;                                                                            
 var tmp43669751: int;                                                                              
 var mover3669718: Mover;                                                                           
 var Array.Queue.A._length3669882: [Array.Queue.A]int;                                              
 var tmp83669858: int;                                                                              
 var $result3669751: int;                                                                           
 var tmp33669837: bool;                                                                             
 var result3669741: int;                                                                            
 var tmp43669741: int;                                                                              
 var tmp73669741: Array.Queue.T;                                                                    
 var Queue.elems3669751: [Queue]Array.Queue.T;                                                      
 var tmp53669747: int;                                                                              
                                                                                                    
 var _pc : Phase;                                                                                   
 _pc := PreCommit;                                                                                  
                                                                                                    
                                                                                                    
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (37.23): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assume Queue._lock[this] == Tid.null;                                                              
 _pc := transition(_pc, _R);                                                                        
 assert _pc != PhaseError;                                                                                 // (37.23): Reduction failure
 Queue._lock[this] := tid;                                                                          
                                                                                                    
 // 38.13: bool tmp3;                                                                               
                                                                                                    
                                                                                                    
 // 38.13: int tmp4;                                                                                
                                                                                                    
                                                                                                    
 // 38.13: int tmp5;                                                                                
                                                                                                    
                                                                                                    
 // 38.13: tmp5 := this.tail;                                                                       
                                                                                                    
                                                                                                    
 moverPath3669712 := ReadEval.Queue.tail(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3669712 := m#moverPath(moverPath3669712);                                                     
 path3669712 := p#moverPath(moverPath3669712);                                                      
 assume Queue._state3669712 == Queue._state && Queue.elems3669712 == Queue.elems && Queue.head3669712 == Queue.head && Queue.tail3669712 == Queue.tail && Queue.spec3669712 == Queue.spec && Queue._lock3669712 == Queue._lock && Array.Queue.T._state3669712 == Array.Queue.T._state && Array.Queue.T._elems3669712 == Array.Queue.T._elems && Array.Queue.T._length3669712 == Array.Queue.T._length && Array.Queue.A._state3669712 == Array.Queue.A._state && Array.Queue.A._elems3669712 == Array.Queue.A._elems && Array.Queue.A._length3669712 == Array.Queue.A._length && tmp53669712 == tmp5 && tmp43669712 == tmp4 && tmp33669712 == tmp3 && $result3669712 == $result && this3669712 == this && tid3669712 == tid && _pc3669712 == _pc;
 assume $recorded.state3669712 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (38.13): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3669712);                                                              
 assert _pc != PhaseError;                                                                                 // (38.13): Reduction failure
 tmp5 := Queue.tail[this];                                                                          
                                                                                                    
 // 38.13: int tmp6;                                                                                
                                                                                                    
                                                                                                    
 // 38.13: tmp6 := this.head;                                                                       
                                                                                                    
                                                                                                    
 moverPath3669718 := ReadEval.Queue.head(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 mover3669718 := m#moverPath(moverPath3669718);                                                     
 path3669718 := p#moverPath(moverPath3669718);                                                      
 assume Queue._state3669718 == Queue._state && Queue.elems3669718 == Queue.elems && Queue.head3669718 == Queue.head && Queue.tail3669718 == Queue.tail && Queue.spec3669718 == Queue.spec && Queue._lock3669718 == Queue._lock && Array.Queue.T._state3669718 == Array.Queue.T._state && Array.Queue.T._elems3669718 == Array.Queue.T._elems && Array.Queue.T._length3669718 == Array.Queue.T._length && Array.Queue.A._state3669718 == Array.Queue.A._state && Array.Queue.A._elems3669718 == Array.Queue.A._elems && Array.Queue.A._length3669718 == Array.Queue.A._length && tmp63669718 == tmp6 && tmp53669718 == tmp5 && tmp43669718 == tmp4 && tmp33669718 == tmp3 && $result3669718 == $result && this3669718 == this && tid3669718 == tid && _pc3669718 == _pc;
 assume $recorded.state3669718 == 1;                                                                
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (38.13): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 _pc := transition(_pc, mover3669718);                                                              
 assert _pc != PhaseError;                                                                                 // (38.13): Reduction failure
 tmp6 := Queue.head[this];                                                                          
                                                                                                    
 // 38.13: tmp4 = tmp5 - tmp6;                                                                      
                                                                                                    
 tmp4 := (tmp5-tmp6);                                                                               
                                                                                                    
 // 38.13: tmp3 = tmp4 > 0;                                                                         
                                                                                                    
 tmp3 := (tmp4>0);                                                                                  
 if (tmp3 /* lowered ((Queue.tail[this]-Queue.head[this])>0) */) {                                  
                                                                                                    
  // 39.17: int result;                                                                             
                                                                                                    
                                                                                                    
  // 39.17: [Queue.T{this}] tmp7;                                                                   
                                                                                                    
                                                                                                    
  // 39.17: tmp7 := this.elems;                                                                     
                                                                                                    
                                                                                                    
  moverPath3669741 := ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3669741 := m#moverPath(moverPath3669741);                                                    
  path3669741 := p#moverPath(moverPath3669741);                                                     
  assume Queue._state3669741 == Queue._state && Queue.elems3669741 == Queue.elems && Queue.head3669741 == Queue.head && Queue.tail3669741 == Queue.tail && Queue.spec3669741 == Queue.spec && Queue._lock3669741 == Queue._lock && Array.Queue.T._state3669741 == Array.Queue.T._state && Array.Queue.T._elems3669741 == Array.Queue.T._elems && Array.Queue.T._length3669741 == Array.Queue.T._length && Array.Queue.A._state3669741 == Array.Queue.A._state && Array.Queue.A._elems3669741 == Array.Queue.A._elems && Array.Queue.A._length3669741 == Array.Queue.A._length && tmp73669741 == tmp7 && result3669741 == result && tmp63669741 == tmp6 && tmp53669741 == tmp5 && tmp43669741 == tmp4 && tmp33669741 == tmp3 && $result3669741 == $result && this3669741 == this && tid3669741 == tid && _pc3669741 == _pc;
  assume $recorded.state3669741 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (39.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3669741);                                                             
  assert _pc != PhaseError;                                                                                // (39.17): Reduction failure
  tmp7 := Queue.elems[this];                                                                        
                                                                                                    
  // 39.17: int tmp8;                                                                               
                                                                                                    
                                                                                                    
  // 39.17: tmp8 := this.head;                                                                      
                                                                                                    
                                                                                                    
  moverPath3669747 := ReadEval.Queue.head(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3669747 := m#moverPath(moverPath3669747);                                                    
  path3669747 := p#moverPath(moverPath3669747);                                                     
  assume Queue._state3669747 == Queue._state && Queue.elems3669747 == Queue.elems && Queue.head3669747 == Queue.head && Queue.tail3669747 == Queue.tail && Queue.spec3669747 == Queue.spec && Queue._lock3669747 == Queue._lock && Array.Queue.T._state3669747 == Array.Queue.T._state && Array.Queue.T._elems3669747 == Array.Queue.T._elems && Array.Queue.T._length3669747 == Array.Queue.T._length && Array.Queue.A._state3669747 == Array.Queue.A._state && Array.Queue.A._elems3669747 == Array.Queue.A._elems && Array.Queue.A._length3669747 == Array.Queue.A._length && tmp83669747 == tmp8 && tmp73669747 == tmp7 && result3669747 == result && tmp63669747 == tmp6 && tmp53669747 == tmp5 && tmp43669747 == tmp4 && tmp33669747 == tmp3 && $result3669747 == $result && this3669747 == this && tid3669747 == tid && _pc3669747 == _pc;
  assume $recorded.state3669747 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (39.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3669747);                                                             
  assert _pc != PhaseError;                                                                                // (39.17): Reduction failure
  tmp8 := Queue.head[this];                                                                         
                                                                                                    
  // 39.17: result := tmp7[tmp8];                                                                   
                                                                                                    
                                                                                                    
  moverPath3669751 := ReadEval.Array.Queue.T(tid: Tid,this: Queue,tmp7: Array.Queue.T,tmp8: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3669751 := m#moverPath(moverPath3669751);                                                    
  path3669751 := p#moverPath(moverPath3669751);                                                     
  assume Queue._state3669751 == Queue._state && Queue.elems3669751 == Queue.elems && Queue.head3669751 == Queue.head && Queue.tail3669751 == Queue.tail && Queue.spec3669751 == Queue.spec && Queue._lock3669751 == Queue._lock && Array.Queue.T._state3669751 == Array.Queue.T._state && Array.Queue.T._elems3669751 == Array.Queue.T._elems && Array.Queue.T._length3669751 == Array.Queue.T._length && Array.Queue.A._state3669751 == Array.Queue.A._state && Array.Queue.A._elems3669751 == Array.Queue.A._elems && Array.Queue.A._length3669751 == Array.Queue.A._length && tmp83669751 == tmp8 && tmp73669751 == tmp7 && result3669751 == result && tmp63669751 == tmp6 && tmp53669751 == tmp5 && tmp43669751 == tmp4 && tmp33669751 == tmp3 && $result3669751 == $result && this3669751 == this && tid3669751 == tid && _pc3669751 == _pc;
  assume $recorded.state3669751 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume tmp7 != Array.Queue.T.null;                                                               
  } else {                                                                                          
   assert tmp7 != Array.Queue.T.null;                                                                      // (39.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  if (_pc == PreCommit) {                                                                           
   assume 0 <= tmp8;                                                                                
  } else {                                                                                          
   assert 0 <= tmp8;                                                                                       // (39.17): index < 0.
  }                                                                                                 
  if (_pc == PreCommit) {                                                                           
   assume tmp8 < Array.Queue.T._length[tmp7];                                                       
  } else {                                                                                          
   assert tmp8 < Array.Queue.T._length[tmp7];                                                              // (39.17): index is >= length.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3669751);                                                             
  assert _pc != PhaseError;                                                                                // (39.17): Reduction failure
  result := Array.Queue.T._elems[tmp7][tmp8];                                                       
                                                                                                    
  // 40.17: [Queue.A{this}] newSpec;                                                                
                                                                                                    
                                                                                                    
  // 40.17: int tmp9;                                                                               
                                                                                                    
                                                                                                    
  // 40.17: int tmp10;                                                                              
                                                                                                    
                                                                                                    
  // 40.17: [Queue.A{this}] tmp11;                                                                  
                                                                                                    
                                                                                                    
  // 40.17: tmp11 := this.spec;                                                                     
                                                                                                    
                                                                                                    
  moverPath3669768 := ReadEval.Queue.spec(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3669768 := m#moverPath(moverPath3669768);                                                    
  path3669768 := p#moverPath(moverPath3669768);                                                     
  assume Queue._state3669768 == Queue._state && Queue.elems3669768 == Queue.elems && Queue.head3669768 == Queue.head && Queue.tail3669768 == Queue.tail && Queue.spec3669768 == Queue.spec && Queue._lock3669768 == Queue._lock && Array.Queue.T._state3669768 == Array.Queue.T._state && Array.Queue.T._elems3669768 == Array.Queue.T._elems && Array.Queue.T._length3669768 == Array.Queue.T._length && Array.Queue.A._state3669768 == Array.Queue.A._state && Array.Queue.A._elems3669768 == Array.Queue.A._elems && Array.Queue.A._length3669768 == Array.Queue.A._length && tmp113669768 == tmp11 && tmp103669768 == tmp10 && tmp93669768 == tmp9 && newSpec3669768 == newSpec && tmp83669768 == tmp8 && tmp73669768 == tmp7 && result3669768 == result && tmp63669768 == tmp6 && tmp53669768 == tmp5 && tmp43669768 == tmp4 && tmp33669768 == tmp3 && $result3669768 == $result && this3669768 == this && tid3669768 == tid && _pc3669768 == _pc;
  assume $recorded.state3669768 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (40.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3669768);                                                             
  assert _pc != PhaseError;                                                                                // (40.17): Reduction failure
  tmp11 := Queue.spec[this];                                                                        
                                                                                                    
  // 40.17: tmp10 = tmp11.length;                                                                   
                                                                                                    
  tmp10 := Array.Queue.A._length[tmp11];                                                            
                                                                                                    
  // 40.17: tmp9 = tmp10 - 1;                                                                       
                                                                                                    
  tmp9 := (tmp10-1);                                                                                
                                                                                                    
  // 40.17: newSpec = new [Queue.A{this}](tmp9);                                                    
                                                                                                    
  havoc newSpec;                                                                                    
  assume isFresh(Array.Queue.A._state[newSpec]);                                                    
  assume Array.Queue.A._length[newSpec] == tmp9;                                                    
  assume Array.Queue.A._this[newSpec] == this;                                                      
  Array.Queue.A._state[newSpec] := LOCAL(tid);                                                      
  assume (forall _i : int :: 0 <= _i ==> Array.Queue.A._elems[newSpec][_i] == 0);                   
                                                                                                    
  // 41.17: assume forall int i ::0 <= i && i < this.tail - (this.head + 1) ==> newSpec[i] == this.spec[i + 1];
                                                                                                    
  assume (forall i: int ::  ((((0<=i)&&(i<(Queue.tail[this]-(Queue.head[this]+1))))==>(Array.Queue.A._elems[newSpec][i]==Array.Queue.A._elems[Queue.spec[this]][(i+1)]))));
                                                                                                    
  // 42.17: int tmp12;                                                                              
                                                                                                    
                                                                                                    
  // 42.17: tmp12 = 0;                                                                              
                                                                                                    
  tmp12 := 0;                                                                                       
                                                                                                    
  // 42.17: int tmp13;                                                                              
                                                                                                    
                                                                                                    
  // 42.17: tmp13 := newSpec[tmp12];                                                                
                                                                                                    
                                                                                                    
  moverPath3669837 := ReadEval.Array.Queue.A(tid: Tid,this: Queue,newSpec: Array.Queue.A,tmp12: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3669837 := m#moverPath(moverPath3669837);                                                    
  path3669837 := p#moverPath(moverPath3669837);                                                     
  assume Queue._state3669837 == Queue._state && Queue.elems3669837 == Queue.elems && Queue.head3669837 == Queue.head && Queue.tail3669837 == Queue.tail && Queue.spec3669837 == Queue.spec && Queue._lock3669837 == Queue._lock && Array.Queue.T._state3669837 == Array.Queue.T._state && Array.Queue.T._elems3669837 == Array.Queue.T._elems && Array.Queue.T._length3669837 == Array.Queue.T._length && Array.Queue.A._state3669837 == Array.Queue.A._state && Array.Queue.A._elems3669837 == Array.Queue.A._elems && Array.Queue.A._length3669837 == Array.Queue.A._length && tmp133669837 == tmp13 && tmp123669837 == tmp12 && tmp113669837 == tmp11 && tmp103669837 == tmp10 && tmp93669837 == tmp9 && newSpec3669837 == newSpec && tmp83669837 == tmp8 && tmp73669837 == tmp7 && result3669837 == result && tmp63669837 == tmp6 && tmp53669837 == tmp5 && tmp43669837 == tmp4 && tmp33669837 == tmp3 && $result3669837 == $result && this3669837 == this && tid3669837 == tid && _pc3669837 == _pc;
  assume $recorded.state3669837 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume newSpec != Array.Queue.A.null;                                                            
  } else {                                                                                          
   assert newSpec != Array.Queue.A.null;                                                                   // (42.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  if (_pc == PreCommit) {                                                                           
   assume 0 <= tmp12;                                                                               
  } else {                                                                                          
   assert 0 <= tmp12;                                                                                      // (42.17): index < 0.
  }                                                                                                 
  if (_pc == PreCommit) {                                                                           
   assume tmp12 < Array.Queue.A._length[newSpec];                                                   
  } else {                                                                                          
   assert tmp12 < Array.Queue.A._length[newSpec];                                                          // (42.17): index is >= length.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3669837);                                                             
  assert _pc != PhaseError;                                                                                // (42.17): Reduction failure
  tmp13 := Array.Queue.A._elems[newSpec][tmp12];                                                    
                                                                                                    
  // 42.17: [Queue.A{this}] tmp14;                                                                  
                                                                                                    
                                                                                                    
  // 42.17: tmp14 := this.spec;                                                                     
                                                                                                    
                                                                                                    
  moverPath3669844 := ReadEval.Queue.spec(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3669844 := m#moverPath(moverPath3669844);                                                    
  path3669844 := p#moverPath(moverPath3669844);                                                     
  assume Queue._state3669844 == Queue._state && Queue.elems3669844 == Queue.elems && Queue.head3669844 == Queue.head && Queue.tail3669844 == Queue.tail && Queue.spec3669844 == Queue.spec && Queue._lock3669844 == Queue._lock && Array.Queue.T._state3669844 == Array.Queue.T._state && Array.Queue.T._elems3669844 == Array.Queue.T._elems && Array.Queue.T._length3669844 == Array.Queue.T._length && Array.Queue.A._state3669844 == Array.Queue.A._state && Array.Queue.A._elems3669844 == Array.Queue.A._elems && Array.Queue.A._length3669844 == Array.Queue.A._length && tmp143669844 == tmp14 && tmp133669844 == tmp13 && tmp123669844 == tmp12 && tmp113669844 == tmp11 && tmp103669844 == tmp10 && tmp93669844 == tmp9 && newSpec3669844 == newSpec && tmp83669844 == tmp8 && tmp73669844 == tmp7 && result3669844 == result && tmp63669844 == tmp6 && tmp53669844 == tmp5 && tmp43669844 == tmp4 && tmp33669844 == tmp3 && $result3669844 == $result && this3669844 == this && tid3669844 == tid && _pc3669844 == _pc;
  assume $recorded.state3669844 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (42.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3669844);                                                             
  assert _pc != PhaseError;                                                                                // (42.17): Reduction failure
  tmp14 := Queue.spec[this];                                                                        
                                                                                                    
  // 42.17: int tmp15;                                                                              
                                                                                                    
                                                                                                    
  // 42.17: tmp15 = 1;                                                                              
                                                                                                    
  tmp15 := 1;                                                                                       
                                                                                                    
  // 42.17: int tmp16;                                                                              
                                                                                                    
                                                                                                    
  // 42.17: tmp16 := tmp14[tmp15];                                                                  
                                                                                                    
                                                                                                    
  moverPath3669858 := ReadEval.Array.Queue.A(tid: Tid,this: Queue,tmp14: Array.Queue.A,tmp15: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3669858 := m#moverPath(moverPath3669858);                                                    
  path3669858 := p#moverPath(moverPath3669858);                                                     
  assume Queue._state3669858 == Queue._state && Queue.elems3669858 == Queue.elems && Queue.head3669858 == Queue.head && Queue.tail3669858 == Queue.tail && Queue.spec3669858 == Queue.spec && Queue._lock3669858 == Queue._lock && Array.Queue.T._state3669858 == Array.Queue.T._state && Array.Queue.T._elems3669858 == Array.Queue.T._elems && Array.Queue.T._length3669858 == Array.Queue.T._length && Array.Queue.A._state3669858 == Array.Queue.A._state && Array.Queue.A._elems3669858 == Array.Queue.A._elems && Array.Queue.A._length3669858 == Array.Queue.A._length && tmp163669858 == tmp16 && tmp153669858 == tmp15 && tmp143669858 == tmp14 && tmp133669858 == tmp13 && tmp123669858 == tmp12 && tmp113669858 == tmp11 && tmp103669858 == tmp10 && tmp93669858 == tmp9 && newSpec3669858 == newSpec && tmp83669858 == tmp8 && tmp73669858 == tmp7 && result3669858 == result && tmp63669858 == tmp6 && tmp53669858 == tmp5 && tmp43669858 == tmp4 && tmp33669858 == tmp3 && $result3669858 == $result && this3669858 == this && tid3669858 == tid && _pc3669858 == _pc;
  assume $recorded.state3669858 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume tmp14 != Array.Queue.A.null;                                                              
  } else {                                                                                          
   assert tmp14 != Array.Queue.A.null;                                                                     // (42.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  if (_pc == PreCommit) {                                                                           
   assume 0 <= tmp15;                                                                               
  } else {                                                                                          
   assert 0 <= tmp15;                                                                                      // (42.17): index < 0.
  }                                                                                                 
  if (_pc == PreCommit) {                                                                           
   assume tmp15 < Array.Queue.A._length[tmp14];                                                     
  } else {                                                                                          
   assert tmp15 < Array.Queue.A._length[tmp14];                                                            // (42.17): index is >= length.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3669858);                                                             
  assert _pc != PhaseError;                                                                                // (42.17): Reduction failure
  tmp16 := Array.Queue.A._elems[tmp14][tmp15];                                                      
                                                                                                    
  // 42.17: assert tmp13 == tmp16;                                                                  
                                                                                                    
  assume Queue._state3669863 == Queue._state && Queue.elems3669863 == Queue.elems && Queue.head3669863 == Queue.head && Queue.tail3669863 == Queue.tail && Queue.spec3669863 == Queue.spec && Queue._lock3669863 == Queue._lock && Array.Queue.T._state3669863 == Array.Queue.T._state && Array.Queue.T._elems3669863 == Array.Queue.T._elems && Array.Queue.T._length3669863 == Array.Queue.T._length && Array.Queue.A._state3669863 == Array.Queue.A._state && Array.Queue.A._elems3669863 == Array.Queue.A._elems && Array.Queue.A._length3669863 == Array.Queue.A._length && tmp163669863 == tmp16 && tmp153669863 == tmp15 && tmp143669863 == tmp14 && tmp133669863 == tmp13 && tmp123669863 == tmp12 && tmp113669863 == tmp11 && tmp103669863 == tmp10 && tmp93669863 == tmp9 && newSpec3669863 == newSpec && tmp83669863 == tmp8 && tmp73669863 == tmp7 && result3669863 == result && tmp63669863 == tmp6 && tmp53669863 == tmp5 && tmp43669863 == tmp4 && tmp33669863 == tmp3 && $result3669863 == $result && this3669863 == this && tid3669863 == tid;
  assume $recorded.state3669863 == 1;                                                               
  assert (tmp13==tmp16);                                                                                   // (42.17): This assertion may not hold.
                                                                                                    
  // 43.17: int tmp17;                                                                              
                                                                                                    
                                                                                                    
  // 43.17: int tmp18;                                                                              
                                                                                                    
                                                                                                    
  // 43.17: tmp18 := this.head;                                                                     
                                                                                                    
                                                                                                    
  moverPath3669872 := ReadEval.Queue.head(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3669872 := m#moverPath(moverPath3669872);                                                    
  path3669872 := p#moverPath(moverPath3669872);                                                     
  assume Queue._state3669872 == Queue._state && Queue.elems3669872 == Queue.elems && Queue.head3669872 == Queue.head && Queue.tail3669872 == Queue.tail && Queue.spec3669872 == Queue.spec && Queue._lock3669872 == Queue._lock && Array.Queue.T._state3669872 == Array.Queue.T._state && Array.Queue.T._elems3669872 == Array.Queue.T._elems && Array.Queue.T._length3669872 == Array.Queue.T._length && Array.Queue.A._state3669872 == Array.Queue.A._state && Array.Queue.A._elems3669872 == Array.Queue.A._elems && Array.Queue.A._length3669872 == Array.Queue.A._length && tmp183669872 == tmp18 && tmp173669872 == tmp17 && tmp163669872 == tmp16 && tmp153669872 == tmp15 && tmp143669872 == tmp14 && tmp133669872 == tmp13 && tmp123669872 == tmp12 && tmp113669872 == tmp11 && tmp103669872 == tmp10 && tmp93669872 == tmp9 && newSpec3669872 == newSpec && tmp83669872 == tmp8 && tmp73669872 == tmp7 && result3669872 == result && tmp63669872 == tmp6 && tmp53669872 == tmp5 && tmp43669872 == tmp4 && tmp33669872 == tmp3 && $result3669872 == $result && this3669872 == this && tid3669872 == tid && _pc3669872 == _pc;
  assume $recorded.state3669872 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (43.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  _pc := transition(_pc, mover3669872);                                                             
  assert _pc != PhaseError;                                                                                // (43.17): Reduction failure
  tmp18 := Queue.head[this];                                                                        
                                                                                                    
  // 43.17: tmp17 = tmp18 + 1;                                                                      
                                                                                                    
  tmp17 := (tmp18+1);                                                                               
                                                                                                    
                                                                                                    
  // 43.17: this.head := tmp17;                                                                     
                                                                                                    
                                                                                                    
  moverPath3669882 := WriteEval.Queue.head(tid: Tid,this: Queue,tmp17: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3669882 := m#moverPath(moverPath3669882);                                                    
  path3669882 := p#moverPath(moverPath3669882);                                                     
  assume Queue._state3669882 == Queue._state && Queue.elems3669882 == Queue.elems && Queue.head3669882 == Queue.head && Queue.tail3669882 == Queue.tail && Queue.spec3669882 == Queue.spec && Queue._lock3669882 == Queue._lock && Array.Queue.T._state3669882 == Array.Queue.T._state && Array.Queue.T._elems3669882 == Array.Queue.T._elems && Array.Queue.T._length3669882 == Array.Queue.T._length && Array.Queue.A._state3669882 == Array.Queue.A._state && Array.Queue.A._elems3669882 == Array.Queue.A._elems && Array.Queue.A._length3669882 == Array.Queue.A._length && tmp183669882 == tmp18 && tmp173669882 == tmp17 && tmp163669882 == tmp16 && tmp153669882 == tmp15 && tmp143669882 == tmp14 && tmp133669882 == tmp13 && tmp123669882 == tmp12 && tmp113669882 == tmp11 && tmp103669882 == tmp10 && tmp93669882 == tmp9 && newSpec3669882 == newSpec && tmp83669882 == tmp8 && tmp73669882 == tmp7 && result3669882 == result && tmp63669882 == tmp6 && tmp53669882 == tmp5 && tmp43669882 == tmp4 && tmp33669882 == tmp3 && $result3669882 == $result && this3669882 == this && tid3669882 == tid && _pc3669882 == _pc;
  assume $recorded.state3669882 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (43.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  _pc := transition(_pc, mover3669882);                                                             
  assert _pc != PhaseError;                                                                                // (43.17): Reduction failure
  Queue.head[this] := tmp17;                                                                        
                                                                                                    
                                                                                                    
  // 44.17: this.spec := newSpec;                                                                   
                                                                                                    
                                                                                                    
  moverPath3669885 := WriteEval.Queue.spec(tid: Tid,this: Queue,newSpec: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
  mover3669885 := m#moverPath(moverPath3669885);                                                    
  path3669885 := p#moverPath(moverPath3669885);                                                     
  assume Queue._state3669885 == Queue._state && Queue.elems3669885 == Queue.elems && Queue.head3669885 == Queue.head && Queue.tail3669885 == Queue.tail && Queue.spec3669885 == Queue.spec && Queue._lock3669885 == Queue._lock && Array.Queue.T._state3669885 == Array.Queue.T._state && Array.Queue.T._elems3669885 == Array.Queue.T._elems && Array.Queue.T._length3669885 == Array.Queue.T._length && Array.Queue.A._state3669885 == Array.Queue.A._state && Array.Queue.A._elems3669885 == Array.Queue.A._elems && Array.Queue.A._length3669885 == Array.Queue.A._length && tmp183669885 == tmp18 && tmp173669885 == tmp17 && tmp163669885 == tmp16 && tmp153669885 == tmp15 && tmp143669885 == tmp14 && tmp133669885 == tmp13 && tmp123669885 == tmp12 && tmp113669885 == tmp11 && tmp103669885 == tmp10 && tmp93669885 == tmp9 && newSpec3669885 == newSpec && tmp83669885 == tmp8 && tmp73669885 == tmp7 && result3669885 == result && tmp63669885 == tmp6 && tmp53669885 == tmp5 && tmp43669885 == tmp4 && tmp33669885 == tmp3 && $result3669885 == $result && this3669885 == this && tid3669885 == tid && _pc3669885 == _pc;
  assume $recorded.state3669885 == 1;                                                               
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (44.17): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  _pc := transition(_pc, mover3669885);                                                             
  assert _pc != PhaseError;                                                                                // (44.17): Reduction failure
  Queue.spec[this] := newSpec;                                                                      
  if (isLocal(Array.Queue.A._state[newSpec], tid)) {                                                
   Array.Queue.A._state[newSpec] := SHARED();                                                       
   if (isLocal(Queue._state[Array.Queue.A._this[newSpec]], tid)) {                                  
    Queue._state[Array.Queue.A._this[newSpec]] := SHARED();                                         
    assert isSharedAssignable(Array.Queue.T._state[Queue.elems[Array.Queue.A._this[newSpec]]]);            // (44.17): newSpec became shared, but Array.Queue.A._this[newSpec].elems may not be shared.
    assert isSharedAssignable(Array.Queue.A._state[Queue.spec[Array.Queue.A._this[newSpec]]]);             // (44.17): newSpec became shared, but Array.Queue.A._this[newSpec].spec may not be shared.
   }                                                                                                
  }                                                                                                 
                                                                                                    
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (49.9): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  assert Queue._lock[this] == tid;                                                                         // (49.9): lock not held
  _pc := transition(_pc, _L);                                                                       
  assert _pc != PhaseError;                                                                                // (49.9): Reduction failure
  Queue._lock[this] := Tid.null;                                                                    
                                                                                                    
  // 45.17:  return result;                                                                         
                                                                                                    
  assume Queue._state3669889 == Queue._state && Queue.elems3669889 == Queue.elems && Queue.head3669889 == Queue.head && Queue.tail3669889 == Queue.tail && Queue.spec3669889 == Queue.spec && Queue._lock3669889 == Queue._lock && Array.Queue.T._state3669889 == Array.Queue.T._state && Array.Queue.T._elems3669889 == Array.Queue.T._elems && Array.Queue.T._length3669889 == Array.Queue.T._length && Array.Queue.A._state3669889 == Array.Queue.A._state && Array.Queue.A._elems3669889 == Array.Queue.A._elems && Array.Queue.A._length3669889 == Array.Queue.A._length && tmp183669889 == tmp18 && tmp173669889 == tmp17 && tmp163669889 == tmp16 && tmp153669889 == tmp15 && tmp143669889 == tmp14 && tmp133669889 == tmp13 && tmp123669889 == tmp12 && tmp113669889 == tmp11 && tmp103669889 == tmp10 && tmp93669889 == tmp9 && newSpec3669889 == newSpec && tmp83669889 == tmp8 && tmp73669889 == tmp7 && result3669889 == result && tmp63669889 == tmp6 && tmp53669889 == tmp5 && tmp43669889 == tmp4 && tmp33669889 == tmp3 && $result3669889 == $result && this3669889 == this && tid3669889 == tid;
  assume $recorded.state3669889 == 1;                                                               
  $result := result;                                                                                
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (45.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (45.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (45.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (45.17): Object invariant may not hold.
  return;                                                                                           
 } else {                                                                                           
  if (_pc == PreCommit) {                                                                           
   assume this != Queue.null;                                                                       
  } else {                                                                                          
   assert this != Queue.null;                                                                              // (49.9): Cannot have potential null deference in left-mover part.
  }                                                                                                 
  assert Queue._lock[this] == tid;                                                                         // (49.9): lock not held
  _pc := transition(_pc, _L);                                                                       
  assert _pc != PhaseError;                                                                                // (49.9): Reduction failure
  Queue._lock[this] := Tid.null;                                                                    
                                                                                                    
  // 47.17:  return 0;                                                                              
                                                                                                    
  assume Queue._state3669896 == Queue._state && Queue.elems3669896 == Queue.elems && Queue.head3669896 == Queue.head && Queue.tail3669896 == Queue.tail && Queue.spec3669896 == Queue.spec && Queue._lock3669896 == Queue._lock && Array.Queue.T._state3669896 == Array.Queue.T._state && Array.Queue.T._elems3669896 == Array.Queue.T._elems && Array.Queue.T._length3669896 == Array.Queue.T._length && Array.Queue.A._state3669896 == Array.Queue.A._state && Array.Queue.A._elems3669896 == Array.Queue.A._elems && Array.Queue.A._length3669896 == Array.Queue.A._length && tmp63669896 == tmp6 && tmp53669896 == tmp5 && tmp43669896 == tmp4 && tmp33669896 == tmp3 && $result3669896 == $result && this3669896 == this && tid3669896 == tid;
  assume $recorded.state3669896 == 1;                                                               
  $result := 0;                                                                                     
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (47.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (47.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (47.17): Object invariant may not hold.
  assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (47.17): Object invariant may not hold.
  return;                                                                                           
 }                                                                                                  
 if (_pc == PreCommit) {                                                                            
  assume this != Queue.null;                                                                        
 } else {                                                                                           
  assert this != Queue.null;                                                                               // (49.9): Cannot have potential null deference in left-mover part.
 }                                                                                                  
 assert Queue._lock[this] == tid;                                                                          // (49.9): lock not held
 _pc := transition(_pc, _L);                                                                        
 assert _pc != PhaseError;                                                                                 // (49.9): Reduction failure
 Queue._lock[this] := Tid.null;                                                                     
                                                                                                    
 // 36.26: // return -1;                                                                            
                                                                                                    
 assume Queue._state3669906 == Queue._state && Queue.elems3669906 == Queue.elems && Queue.head3669906 == Queue.head && Queue.tail3669906 == Queue.tail && Queue.spec3669906 == Queue.spec && Queue._lock3669906 == Queue._lock && Array.Queue.T._state3669906 == Array.Queue.T._state && Array.Queue.T._elems3669906 == Array.Queue.T._elems && Array.Queue.T._length3669906 == Array.Queue.T._length && Array.Queue.A._state3669906 == Array.Queue.A._state && Array.Queue.A._elems3669906 == Array.Queue.A._elems && Array.Queue.A._length3669906 == Array.Queue.A._length && $result3669906 == $result && this3669906 == this && tid3669906 == tid;
 assume $recorded.state3669906 == 1;                                                                
 $result := -1;                                                                                     
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (36.26): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (36.26): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (36.26): Object invariant may not hold.
 assert  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (36.26): Object invariant may not hold.
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
/*** Array Array.Queue.T ***/                                                                       
                                                                                                    
type Array.Queue.T;                                                                                 
const unique Array.Queue.T.null: Array.Queue.T;                                                     
var Array.Queue.T._state: [Array.Queue.T]State;                                                     
                                                                                                    
const Array.Queue.T._this : [Array.Queue.T]Queue;                                                   
const Array.Queue.T._length : [Array.Queue.T]int;                                                   
var Array.Queue.T._elems  : [Array.Queue.T]([int]int);                                              
                                                                                                    
axiom (forall $this : Array.Queue.T :: Array.Queue.T._length[$this] >= 0);                          
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
// Array.Queue.T: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),Cond(Holds(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E())))),false,List())
                                                                                                    
function {:inline} ReadEval.Array.Queue.T(tid: Tid,this : Queue,athis : Array.Queue.T,index : int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
// Array.Queue.T: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),Cond(Holds(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E())))),false,List())
                                                                                                    
function {:inline} WriteEval.Array.Queue.T(tid: Tid,this : Queue,athis : Array.Queue.T,index : int,newValue: int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if ((isAccessible(Queue._state[this], tid) && Queue._lock[this] == tid)) then                     
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
                                                                                                    
/*** Array Array.Queue.A ***/                                                                       
                                                                                                    
type Array.Queue.A;                                                                                 
const unique Array.Queue.A.null: Array.Queue.A;                                                     
var Array.Queue.A._state: [Array.Queue.A]State;                                                     
                                                                                                    
const Array.Queue.A._this : [Array.Queue.A]Queue;                                                   
const Array.Queue.A._length : [Array.Queue.A]int;                                                   
var Array.Queue.A._elems  : [Array.Queue.A]([int]int);                                              
                                                                                                    
axiom (forall $this : Array.Queue.A :: Array.Queue.A._length[$this] >= 0);                          
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
// Array.Queue.A: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),Cond(VarAccess(isRead),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E())))),false,List())
                                                                                                    
function {:inline} ReadEval.Array.Queue.A(tid: Tid,this : Queue,athis : Array.Queue.A,index : int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := true;                                                                               
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
// Array.Queue.A: Spec(Cond(IsLocal(VarAccess(this),VarAccess(tid)),Cond(IsLocal(VarAccess(this),VarAccess(tid)),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E()))),Cond(VarAccess(isRead),ConstExpr(MoverConst(B())),ConstExpr(MoverConst(E())))),false,List())
                                                                                                    
function {:inline} WriteEval.Array.Queue.A(tid: Tid,this : Queue,athis : Array.Queue.A,index : int,newValue: int,Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Queue._state[this], tid)) then                                                         
  if (isLocal(Queue._state[this], tid)) then                                                        
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// Globals                                                                                        
                                                                                                    
                                                                                                    
//// State Invariant                                                                                
                                                                                                    
 function {:inline} StateInvariant(Queue._state: [Queue]State,Queue.elems: [Queue]Array.Queue.T,Queue.head: [Queue]int,Queue.tail: [Queue]int,Queue.spec: [Queue]Array.Queue.A,Queue._lock: [Queue]Tid,Array.Queue.T._state: [Array.Queue.T]State,Array.Queue.T._elems: [Array.Queue.T]([int]int),Array.Queue.T._length: [Array.Queue.T]int,Array.Queue.A._state: [Array.Queue.A]State,Array.Queue.A._elems: [Array.Queue.A]([int]int),Array.Queue.A._length: [Array.Queue.A]int) returns (bool) {
  true &&                                                                                           
  (forall _i: Queue  :: _i == Queue.null <==> isNull(Queue._state[_i])) &&                          
  (forall _i: Array.Queue.T  :: _i == Array.Queue.T.null <==> isNull(Array.Queue.T._state[_i])) &&  
  (forall _i: Array.Queue.A  :: _i == Array.Queue.A.null <==> isNull(Array.Queue.A._state[_i])) &&  
  (forall _t: Tid, _i: Array.Queue.T  :: ValidTid(_t) && isAccessible(Array.Queue.T._state[_i], _t) ==> isAccessible(Queue._state[Array.Queue.T._this[_i]], _t)) &&
  (forall _t: Tid, _i: Array.Queue.A  :: ValidTid(_t) && isAccessible(Array.Queue.A._state[_i], _t) ==> isAccessible(Queue._state[Array.Queue.A._this[_i]], _t)) &&
  (forall _i: Queue :: { Array.Queue.T._state[Queue.elems[_i]] } (isShared(Queue._state[_i]) ==> isSharedAssignable(Array.Queue.T._state[Queue.elems[_i]]))) &&
  (forall _i: Queue :: { Array.Queue.T._state[Queue.elems[_i]] } (forall _t: Tid :: (ValidTid(_t) && isLocal(Queue._state[_i],_t) ==> isLocalAssignable(Array.Queue.T._state[Queue.elems[_i]], _t)))) &&
  (forall _i: Queue :: { Queue.elems[_i] } Array.Queue.T._this[Queue.elems[_i]] == _i) &&           
  (forall _i: Queue :: { Array.Queue.A._state[Queue.spec[_i]] } (isShared(Queue._state[_i]) ==> isSharedAssignable(Array.Queue.A._state[Queue.spec[_i]]))) &&
  (forall _i: Queue :: { Array.Queue.A._state[Queue.spec[_i]] } (forall _t: Tid :: (ValidTid(_t) && isLocal(Queue._state[_i],_t) ==> isLocalAssignable(Array.Queue.A._state[Queue.spec[_i]], _t)))) &&
  (forall _i: Queue :: { Queue.spec[_i] } Array.Queue.A._this[Queue.spec[_i]] == _i) &&             
  _trigger(0) &&                                                                                    
  _trigger(1) &&                                                                                    
  _trigger(2) &&                                                                                    
  _trigger(3)                                                                                       
 }                                                                                                  
//// Spec Checks                                                                                    
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.elems[x] := v;                                                                               
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.elems(u: Tid,x: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (8.5): Queue.elems failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.elems[x] := v;                                                                               
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Queue.elems(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (8.5): Queue.elems failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Queue.T;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.elems[x];                                                                        
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Queue.elems[x] := havocValue;                                                                      
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.elems(u: Tid,x: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (8.5): Queue.elems failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Array.Queue.T;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.elems[x];                                                                        
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Queue.elems(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (8.5): Queue.elems failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,x: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (8.5): Queue.elems failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Queue.T;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Queue.elems[x];                                                                        
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Queue.elems[x] := havocValue;                                                                      
 _writeByU := WriteEval.Queue.elems(u: Tid,x: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (8.5): Queue.elems failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)         
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.head[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.head(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (10.5): Queue.head failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)          
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.head[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Queue.head(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (10.5): Queue.head failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)          
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.head[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Queue.head[x] := havocValue;                                                                       
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.head(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (10.5): Queue.head failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)           
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.head[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Queue.head(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (10.5): Queue.head failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)               
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (10.5): Queue.head failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Queue.head(t: Tid, u: Tid, v: int, w: int, x: Queue)                
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Queue.head[x];                                                                         
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Queue.head[x] := havocValue;                                                                       
 _writeByU := WriteEval.Queue.head(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (10.5): Queue.head failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)         
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.tail[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.tail(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (11.5): Queue.tail failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)          
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.tail[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Queue.tail(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (11.5): Queue.tail failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)          
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.tail[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Queue.tail[x] := havocValue;                                                                       
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.tail(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (11.5): Queue.tail failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)           
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.tail[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Queue.tail(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (11.5): Queue.tail failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)               
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (11.5): Queue.tail failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Queue.tail(t: Tid, u: Tid, v: int, w: int, x: Queue)                
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Queue.tail[x];                                                                         
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Queue.tail[x] := havocValue;                                                                       
 _writeByU := WriteEval.Queue.tail(u: Tid,x: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (11.5): Queue.tail failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.spec[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.spec(u: Tid,x: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (19.5): Queue.spec failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Queue.spec[x] := v;                                                                                
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Queue.spec(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (19.5): Queue.spec failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Queue.A;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.spec[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Queue.spec[x] := havocValue;                                                                       
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Queue.spec(u: Tid,x: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (19.5): Queue.spec failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Array.Queue.A;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Queue.spec[x];                                                                         
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Queue.spec(u: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (19.5): Queue.spec failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,x: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (19.5): Queue.spec failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, x: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[x], u);                                                         
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Array.Queue.A;                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Queue.spec[x];                                                                         
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Queue.spec[x] := havocValue;                                                                       
 _writeByU := WriteEval.Queue.spec(u: Tid,x: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (19.5): Queue.spec failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Queue.T._elems[x][i] := v;                                                                   
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (6.5): Array Array.Queue.T failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Queue.T._elems[x][i] := v;                                                                   
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (6.5): Array Array.Queue.T failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Array.Queue.T._elems[x][i];                                                            
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Array.Queue.T._elems[x][i] := havocValue;                                                          
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (6.5): Array Array.Queue.T failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Array.Queue.T._elems[x][i];                                                            
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (6.5): Array Array.Queue.T failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (6.5): Array Array.Queue.T failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.T, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[x], u);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Array.Queue.T._elems[x][i];                                                            
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Array.Queue.T._elems[x][i] := havocValue;                                                          
 _writeByU := WriteEval.Array.Queue.T(u: Tid,x_owner: Queue,x: Array.Queue.T,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (6.5): Array Array.Queue.T failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Queue.A._elems[x][i] := v;                                                                   
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (18.5): Array Array.Queue.A failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Array.Queue.A._elems[x][i] := v;                                                                   
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (18.5): Array Array.Queue.A failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Array.Queue.A._elems[x][i];                                                            
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Array.Queue.A._elems[x][i] := havocValue;                                                          
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (18.5): Array Array.Queue.A failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume w == Array.Queue.A._elems[x][i];                                                            
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByU := ReadEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (18.5): Array Array.Queue.A failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (18.5): Array Array.Queue.A failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, x_owner: Queue, x: Array.Queue.A, i: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[x], u);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 assume w == Array.Queue.A._elems[x][i];                                                            
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_owner_pre == x_owner && x_pre == x && i_pre == i;
 assume $recorded.state_pre == 1;                                                                   
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Array.Queue.A._elems[x][i] := havocValue;                                                          
 _writeByU := WriteEval.Array.Queue.A(u: Tid,x_owner: Queue,x: Array.Queue.A,i: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (18.5): Array Array.Queue.A failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Queue.elems(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Queue.head(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Queue.head(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Queue.head(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Queue.head(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Queue.head(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Queue.tail(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Queue.tail(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Queue.tail(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Queue.tail(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Queue.tail(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Queue.spec(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Queue.spec(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Queue.spec(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Queue.spec(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Queue.spec(t: Tid, u: Tid, v: Array.Queue.T, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.elems;                                                                              
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.elems.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.elems.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.elems.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.T;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var v_mid: Array.Queue.T;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.elems[x];                                                                            
 Queue.elems[x] := v;                                                                               
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.elems[x] := tmpV;                                                                            
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.elems.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.elems(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.elems.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.T, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.elems;                                                                              
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var v_pre: Array.Queue.T;                                                                          
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: Array.Queue.T;                                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.elems(t: Tid,x: Queue,v: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[x] := v;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.head;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.head.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.head.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.head.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.head[x];                                                                             
 Queue.head[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.head[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.head.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.head(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.head.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.head;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.head(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.tail;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.tail.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.tail.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.tail.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.tail[x];                                                                             
 Queue.tail[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.tail[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.tail.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.tail(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.tail.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.tail;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.tail(t: Tid,x: Queue,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Queue.elems(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Queue.elems(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Queue.elems(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Queue.elems(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Queue.elems(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.T, w0: Array.Queue.T, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var w0_post: Array.Queue.T;                                                                        
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Queue.head(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Queue.head(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Queue.head(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Queue.head(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Queue.head(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Queue.tail(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Queue.tail(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Queue.tail(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Queue.tail(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Queue.tail(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Queue.spec(t: Tid, u: Tid, v: Array.Queue.A, w: Array.Queue.A, w0: Array.Queue.A, x: Queue, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Queue.spec;                                                                               
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (19.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Array.Queue.T._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Queue.spec.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Queue.spec.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Queue.spec.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : Array.Queue.A;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var v_mid: Array.Queue.A;                                                                          
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var x_mid: Queue;                                                                                  
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var j_mid: int;                                                                                    
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Queue.spec[x];                                                                             
 Queue.spec[x] := v;                                                                                
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Queue.spec[x] := tmpV;                                                                             
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Queue.spec.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Queue.spec(t: Tid,x: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Queue.spec.Array.Queue.A._elems(t: Tid, u: Tid, v: Array.Queue.A, w: int, w0: int, x: Queue, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Queue._state[x], t);                                                         
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Queue.spec;                                                                               
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var v_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var x_pre: Queue;                                                                                  
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_post: Queue;                                                                                 
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var v_post: Array.Queue.A;                                                                         
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Queue.spec(t: Tid,x: Queue,v: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[x] := v;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.T, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.T._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.T._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.T._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.T._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_mid: Array.Queue.T;                                                                          
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.T._elems[x][i];                                                                
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.T._elems[x][i] := tmpV;                                                                
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.T._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.T._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.T, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.T._state[x], t);                                                 
 requires Array.Queue.T._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.T._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var x_pre: Array.Queue.T;                                                                          
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var x_post: Array.Queue.T;                                                                         
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.T(t: Tid,x_owner: Queue,x: Array.Queue.T,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var w0_mid: Array.Queue.T;                                                                         
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var w_mid: Array.Queue.T;                                                                          
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.elems[y] := w;                                                                               
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.elems(u: Tid,y: Queue,w: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.elems[y] := w;                                                                               
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Queue.elems(t: Tid, u: Tid, v: int, w: Array.Queue.T, w0: Array.Queue.T, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.elems;                                                                              
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var w0_pre: Array.Queue.T;                                                                         
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var w_pre: Array.Queue.T;                                                                          
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var w0_post: Array.Queue.T;                                                                        
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var w_post: Array.Queue.T;                                                                         
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.elems(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.head[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.head(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.head[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Queue.head(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.head;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.head(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.tail[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.tail(u: Tid,y: Queue,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.tail[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Queue.tail(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.tail;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.tail(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Queue;                                                                                  
 var i_mid: int;                                                                                    
 var w0_mid: Array.Queue.A;                                                                         
 var $recorded.state_mid: int;                                                                      
 var w_mid: Array.Queue.A;                                                                          
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Queue.spec[y] := w;                                                                                
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Queue.spec(u: Tid,y: Queue,w: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Queue.spec[y] := w;                                                                                
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Queue.spec(t: Tid, u: Tid, v: int, w: Array.Queue.A, w0: Array.Queue.A, x_owner: Queue, x: Array.Queue.A, i: int, y: Queue)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Queue._state[y], u);                                                         
 modifies Array.Queue.A._elems;                                                                     
 modifies Queue.spec;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var w_pre: Array.Queue.A;                                                                          
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var y_pre: Queue;                                                                                  
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var i_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var w0_pre: Array.Queue.A;                                                                         
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w0_post: Array.Queue.A;                                                                        
 var v_post: int;                                                                                   
 var y_post: Queue;                                                                                 
 var w_post: Array.Queue.A;                                                                         
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Queue.spec(u: Tid,y: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var y_mid: Array.Queue.T;                                                                          
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Array.Queue.T._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.T._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Array.Queue.T._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.T, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.T._state[y], u);                                                 
 requires Array.Queue.T._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.T._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var y_pre: Array.Queue.T;                                                                          
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var y_post: Array.Queue.T;                                                                         
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.T(u: Tid,y_owner: Queue,y: Array.Queue.T,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Array.Queue.A._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Array.Queue.A._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
                                                                                                    
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Array.Queue.A._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._state_mid: [Array.Queue.T]State;                                                
 var Queue.head_mid: [Queue]int;                                                                    
 var Array.Queue.T._length_mid: [Array.Queue.T]int;                                                 
 var t_mid: Tid;                                                                                    
 var Array.Queue.T._elems_mid: [Array.Queue.T]([int]int);                                           
 var _pc_mid: Phase;                                                                                
 var u_mid: Tid;                                                                                    
 var y_mid: Array.Queue.A;                                                                          
 var i_mid: int;                                                                                    
 var $recorded.state_mid: int;                                                                      
 var Array.Queue.A._elems_mid: [Array.Queue.A]([int]int);                                           
 var w_mid: int;                                                                                    
 var Queue._lock_mid: [Queue]Tid;                                                                   
 var Array.Queue.A._length_mid: [Array.Queue.A]int;                                                 
 var Queue.spec_mid: [Queue]Array.Queue.A;                                                          
 var y_owner_mid: Queue;                                                                            
 var x_mid: Array.Queue.A;                                                                          
 var Queue.elems_mid: [Queue]Array.Queue.T;                                                         
 var Queue.tail_mid: [Queue]int;                                                                    
 var Array.Queue.A._state_mid: [Array.Queue.A]State;                                                
 var v_mid: int;                                                                                    
 var j_mid: int;                                                                                    
 var x_owner_mid: Queue;                                                                            
 var Queue._state_mid: [Queue]State;                                                                
 var w0_mid: int;                                                                                   
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Array.Queue.A._elems[x][i];                                                                
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_mid == Queue._state && Queue.elems_mid == Queue.elems && Queue.head_mid == Queue.head && Queue.tail_mid == Queue.tail && Queue.spec_mid == Queue.spec && Queue._lock_mid == Queue._lock && Array.Queue.T._state_mid == Array.Queue.T._state && Array.Queue.T._elems_mid == Array.Queue.T._elems && Array.Queue.T._length_mid == Array.Queue.T._length && Array.Queue.A._state_mid == Array.Queue.A._state && Array.Queue.A._elems_mid == Array.Queue.A._elems && Array.Queue.A._length_mid == Array.Queue.A._length && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_owner_mid == x_owner && x_mid == x && i_mid == i && y_owner_mid == y_owner && y_mid == y && j_mid == j;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Array.Queue.A._elems[x][i] := tmpV;                                                                
 Array.Queue.A._elems[y][j] := w;                                                                   
 _writeByTPost := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Array.Queue.A._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,w: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[y][j] := w;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Array.Queue.A._elems.Array.Queue.A._elems(t: Tid, u: Tid, v: int, w: int, w0: int, x_owner: Queue, x: Array.Queue.A, i: int, y_owner: Queue, y: Array.Queue.A, j: int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Array.Queue.A._state[x], t);                                                 
 requires Array.Queue.A._this[x] == x_owner;                                                        
 requires isAccessible(Array.Queue.A._state[y], u);                                                 
 requires Array.Queue.A._this[y] == y_owner;                                                        
 modifies Array.Queue.A._elems;                                                                     
 modifies Array.Queue.A._elems;                                                                     
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var j_pre: int;                                                                                    
 var Queue.spec_pre: [Queue]Array.Queue.A;                                                          
 var v_pre: int;                                                                                    
 var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                
 var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                 
 var Queue.tail_pre: [Queue]int;                                                                    
 var _pc_pre: Phase;                                                                                
 var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                           
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                
 var x_pre: Array.Queue.A;                                                                          
 var Queue._lock_pre: [Queue]Tid;                                                                   
 var y_owner_pre: Queue;                                                                            
 var y_pre: Array.Queue.A;                                                                          
 var i_pre: int;                                                                                    
 var w_pre: int;                                                                                    
 var Queue._state_pre: [Queue]State;                                                                
 var Queue.elems_pre: [Queue]Array.Queue.T;                                                         
 var x_owner_pre: Queue;                                                                            
 var Queue.head_pre: [Queue]int;                                                                    
 var t_pre: Tid;                                                                                    
 var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                           
 var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                 
                                                                                                    
 var Array.Queue.T._length_post: [Array.Queue.T]int;                                                
 var Queue.head_post: [Queue]int;                                                                   
 var $recorded.state_post: int;                                                                     
 var y_post: Array.Queue.A;                                                                         
 var w0_post: int;                                                                                  
 var t_post: Tid;                                                                                   
 var i_post: int;                                                                                   
 var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                          
 var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                          
 var x_owner_post: Queue;                                                                           
 var Array.Queue.T._state_post: [Array.Queue.T]State;                                               
 var j_post: int;                                                                                   
 var Queue.spec_post: [Queue]Array.Queue.A;                                                         
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var x_post: Array.Queue.A;                                                                         
 var Queue._state_post: [Queue]State;                                                               
 var Array.Queue.A._length_post: [Array.Queue.A]int;                                                
 var y_owner_post: Queue;                                                                           
 var Array.Queue.A._state_post: [Array.Queue.A]State;                                               
 var Queue.elems_post: [Queue]Array.Queue.T;                                                        
 var _pc_post: Phase;                                                                               
 var Queue.tail_post: [Queue]int;                                                                   
 var Queue._lock_post: [Queue]Tid;                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Array.Queue.A(t: Tid,x_owner: Queue,x: Array.Queue.A,i: int,v: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_owner_pre == x_owner && x_pre == x && i_pre == i && y_owner_pre == y_owner && y_pre == y && j_pre == j;
 assume $recorded.state_pre == 1;                                                                   
 Array.Queue.A._elems[x][i] := v;                                                                   
 assume Queue._state_post == Queue._state && Queue.elems_post == Queue.elems && Queue.head_post == Queue.head && Queue.tail_post == Queue.tail && Queue.spec_post == Queue.spec && Queue._lock_post == Queue._lock && Array.Queue.T._state_post == Array.Queue.T._state && Array.Queue.T._elems_post == Array.Queue.T._elems && Array.Queue.T._length_post == Array.Queue.T._length && Array.Queue.A._state_post == Array.Queue.A._state && Array.Queue.A._elems_post == Array.Queue.A._elems && Array.Queue.A._length_post == Array.Queue.A._length && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_owner_post == x_owner && x_post == x && i_post == i && y_owner_post == y_owner && y_post == y && j_post == j;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Array.Queue.A(u: Tid,y_owner: Queue,y: Array.Queue.A,j: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
procedure Yield(tid: Tid);                                                                          
requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
requires ValidTid(tid);                                                                             
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
modifies Queue._state;                                                                              
modifies Queue.elems;                                                                               
modifies Queue.head;                                                                                
modifies Queue.tail;                                                                                
modifies Queue.spec;                                                                                
modifies Queue._lock;                                                                               
modifies Array.Queue.T._state;                                                                      
modifies Array.Queue.T._elems;                                                                      
modifies Array.Queue.A._state;                                                                      
modifies Array.Queue.A._elems;                                                                      
ensures StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
ensures Y(tid , old(Queue._state), old(Queue.elems), old(Queue.head), old(Queue.tail), old(Queue.spec), old(Queue._lock), old(Array.Queue.T._state), old(Array.Queue.T._elems), old(Array.Queue.T._length), old(Array.Queue.A._state), old(Array.Queue.A._elems), old(Array.Queue.A._length) , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
ensures  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (<undefined position>): Object invariant may not hold.
                                                                                                    
// Queue.elems:                                                                                     
                                                                                                    
function {:inline} Y_Queue.elems(tid : Tid, this: Queue, newValue: Array.Queue.T , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
 ((isAccessible(Queue._state[this], tid) && leq(m#moverPath(ReadEval.Queue.elems(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Queue.elems[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Queue.elems.Subsumes.W(tid : Tid, u : Tid, this: Queue, newValue: Array.Queue.T , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume isAccessible(Queue._state[this], u);                                                        
 assume !isError(m#moverPath(WriteEval.Queue.elems(u: Tid,this: Queue,newValue: Array.Queue.T,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.elems(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.elems.Reflexive(tid : Tid, this: Queue , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.elems(tid, this, Queue.elems[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.elems.Transitive(tid : Tid, this: Queue, newValue : Array.Queue.T , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (8.24): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (8.24): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (8.24): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (8.24): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var newValue_pre: Array.Queue.T;                                                                    
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var newValue_post: Array.Queue.T;                                                                   
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Queue.elems(tid, this, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Queue.elems(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Queue.head:                                                                                      
                                                                                                    
function {:inline} Y_Queue.head(tid : Tid, this: Queue, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
 ((isAccessible(Queue._state[this], tid) && leq(m#moverPath(ReadEval.Queue.head(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Queue.head[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Queue.head.Subsumes.W(tid : Tid, u : Tid, this: Queue, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume isAccessible(Queue._state[this], u);                                                        
 assume !isError(m#moverPath(WriteEval.Queue.head(u: Tid,this: Queue,newValue: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.head(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.head.Reflexive(tid : Tid, this: Queue , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.head(tid, this, Queue.head[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.head.Transitive(tid : Tid, this: Queue, newValue : int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (10.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (10.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (10.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (10.32): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var newValue_pre: int;                                                                              
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var newValue_post: int;                                                                             
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Queue.head(tid, this, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Queue.head(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Queue.tail:                                                                                      
                                                                                                    
function {:inline} Y_Queue.tail(tid : Tid, this: Queue, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
 ((isAccessible(Queue._state[this], tid) && leq(m#moverPath(ReadEval.Queue.tail(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Queue.tail[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Queue.tail.Subsumes.W(tid : Tid, u : Tid, this: Queue, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume isAccessible(Queue._state[this], u);                                                        
 assume !isError(m#moverPath(WriteEval.Queue.tail(u: Tid,this: Queue,newValue: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.tail(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.tail.Reflexive(tid : Tid, this: Queue , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.tail(tid, this, Queue.tail[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.tail.Transitive(tid : Tid, this: Queue, newValue : int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (11.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (11.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (11.32): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (11.32): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var newValue_pre: int;                                                                              
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var newValue_post: int;                                                                             
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Queue.tail(tid, this, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Queue.tail(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Queue.spec:                                                                                      
                                                                                                    
function {:inline} Y_Queue.spec(tid : Tid, this: Queue, newValue: Array.Queue.A , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
 ((isAccessible(Queue._state[this], tid) && leq(m#moverPath(ReadEval.Queue.spec(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Queue.spec[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Queue.spec.Subsumes.W(tid : Tid, u : Tid, this: Queue, newValue: Array.Queue.A , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume isAccessible(Queue._state[this], u);                                                        
 assume !isError(m#moverPath(WriteEval.Queue.spec(u: Tid,this: Queue,newValue: Array.Queue.A,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.spec(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.spec.Reflexive(tid : Tid, this: Queue , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue.spec(tid, this, Queue.spec[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue.spec.Transitive(tid : Tid, this: Queue, newValue : Array.Queue.A , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (21.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (21.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (21.5): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (21.5): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var newValue_pre: Array.Queue.A;                                                                    
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var newValue_post: Array.Queue.A;                                                                   
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Queue.spec(tid, this, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Queue.spec(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Queue._lock:                                                                                     
                                                                                                    
function {:inline} Y_Queue._lock(tid : Tid, this: Queue, newValue: Tid , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
 ((isAccessible(Queue._state[this], tid) && leq(m#moverPath(ReadEval.Queue._lock(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Queue._lock[this] == newValue))
 &&(((Queue._lock[this]==tid)==(newValue==tid)))                                                    
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Queue._lock.Subsumes.W(tid : Tid, u : Tid, this: Queue, newValue: Tid , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume isAccessible(Queue._state[this], u);                                                        
 assume !isError(m#moverPath(WriteEval.Queue._lock(u: Tid,this: Queue,newValue: Tid,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
 assume leq(m#moverPath(ReadEval.Queue._lock(tid: Tid,this: Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _N);
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue._lock(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue._lock.Reflexive(tid : Tid, this: Queue , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Queue._lock(tid, this, Queue._lock[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Queue._lock.Transitive(tid : Tid, this: Queue, newValue : Tid , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (3.1): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (3.1): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (3.1): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (3.1): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var newValue_pre: Tid;                                                                              
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var newValue_post: Tid;                                                                             
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Queue._state[this], tid);                                                      
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Queue._lock(tid, this, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Queue._lock(tid, this, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Array.Queue.T:                                                                                   
                                                                                                    
function {:inline} Y_Array.Queue.T(tid : Tid, athis: Array.Queue.T, index: int, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
(var this := Array.Queue.T._this[athis];                                                            
 ((isAccessible(Array.Queue.T._state[athis], tid) && leq(m#moverPath(ReadEval.Array.Queue.T(tid: Tid,Array.Queue.T._this[athis]: Queue,athis: Array.Queue.T,index: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Array.Queue.T._elems[athis][index] == newValue))
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.T.Subsumes.W(tid : Tid, u : Tid, this: Queue, athis: Array.Queue.T, index: int, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
 requires this == Array.Queue.T._this[athis];                                                       
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var athis_yield: Array.Queue.T;                                                                     
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var index_yield: int;                                                                               
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Array.Queue.T._state[athis], u);                                               
 assume !isError(m#moverPath(WriteEval.Array.Queue.T(u: Tid,Array.Queue.T._this[athis]: Queue,athis: Array.Queue.T,index: int,newValue: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Queue.T(tid, athis, index, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.T.Reflexive(tid : Tid, this: Queue, athis: Array.Queue.T, index: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires this == Array.Queue.T._this[athis];                                                       
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var athis_yield: Array.Queue.T;                                                                     
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var index_yield: int;                                                                               
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Array.Queue.T._state[athis], tid);                                             
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Queue.T(tid, athis, index, Array.Queue.T._elems[athis][index] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.T.Transitive(tid : Tid, this: Queue, athis: Array.Queue.T, index: int, newValue : int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (6.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (6.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (6.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (6.28): Object invariant may not hold.
                                                                                                    
 requires this == Array.Queue.T._this[athis];                                                       
 requires ValidTid(tid);                                                                            
{                                                                                                   
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var index_pre: int;                                                                                 
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var athis_pre: Array.Queue.T;                                                                       
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var athis_post: Array.Queue.T;                                                                      
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var index_post: int;                                                                                
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && athis_pre == athis && index_pre == index && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && athis_post == athis && index_post == index && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assume isAccessible(Array.Queue.T._state[athis], tid);                                             
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Array.Queue.T(tid, athis, index, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assert Y_Array.Queue.T(tid, athis, index, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
// Array.Queue.A:                                                                                   
                                                                                                    
function {:inline} Y_Array.Queue.A(tid : Tid, athis: Array.Queue.A, index: int, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int): bool
{                                                                                                   
(var this := Array.Queue.A._this[athis];                                                            
 ((isAccessible(Array.Queue.A._state[athis], tid) && leq(m#moverPath(ReadEval.Array.Queue.A(tid: Tid,Array.Queue.A._this[athis]: Queue,athis: Array.Queue.A,index: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)), _R)) ==> (Array.Queue.A._elems[athis][index] == newValue))
                                                                                                    
)                                                                                                   
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.A.Subsumes.W(tid : Tid, u : Tid, this: Queue, athis: Array.Queue.A, index: int, newValue: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
 requires this == Array.Queue.A._this[athis];                                                       
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var athis_yield: Array.Queue.A;                                                                     
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var index_yield: int;                                                                               
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Array.Queue.A._state[athis], u);                                               
 assume !isError(m#moverPath(WriteEval.Array.Queue.A(u: Tid,Array.Queue.A._this[athis]: Queue,athis: Array.Queue.A,index: int,newValue: int,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length)));
                                                                                                    
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Queue.A(tid, athis, index, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.A.Reflexive(tid : Tid, this: Queue, athis: Array.Queue.A, index: int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires ValidTid(tid);                                                                            
 requires this == Array.Queue.A._this[athis];                                                       
{                                                                                                   
var Queue._state_yield: [Queue]State;                                                               
var Array.Queue.A._elems_yield: [Array.Queue.A]([int]int);                                          
var Array.Queue.A._length_yield: [Array.Queue.A]int;                                                
var tid_yield: Tid;                                                                                 
var Queue.spec_yield: [Queue]Array.Queue.A;                                                         
var Array.Queue.T._length_yield: [Array.Queue.T]int;                                                
var athis_yield: Array.Queue.A;                                                                     
var _pc_yield: Phase;                                                                               
var Queue.tail_yield: [Queue]int;                                                                   
var Array.Queue.T._state_yield: [Array.Queue.T]State;                                               
var Queue.elems_yield: [Queue]Array.Queue.T;                                                        
var Array.Queue.T._elems_yield: [Array.Queue.T]([int]int);                                          
var Queue._lock_yield: [Queue]Tid;                                                                  
var Queue.head_yield: [Queue]int;                                                                   
var index_yield: int;                                                                               
var Array.Queue.A._state_yield: [Array.Queue.A]State;                                               
var $recorded.state_yield: int;                                                                     
var this_yield: Queue;                                                                              
                                                                                                    
 assume isAccessible(Array.Queue.A._state[athis], tid);                                             
assume Queue._state_yield == Queue._state && Queue.elems_yield == Queue.elems && Queue.head_yield == Queue.head && Queue.tail_yield == Queue.tail && Queue.spec_yield == Queue.spec && Queue._lock_yield == Queue._lock && Array.Queue.T._state_yield == Array.Queue.T._state && Array.Queue.T._elems_yield == Array.Queue.T._elems && Array.Queue.T._length_yield == Array.Queue.T._length && Array.Queue.A._state_yield == Array.Queue.A._state && Array.Queue.A._elems_yield == Array.Queue.A._elems && Array.Queue.A._length_yield == Array.Queue.A._length && athis_yield == athis && index_yield == index && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Array.Queue.A(tid, athis, index, Array.Queue.A._elems[athis][index] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
procedure Y_Array.Queue.A.Transitive(tid : Tid, this: Queue, athis: Array.Queue.A, index: int, newValue : int , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int)
 requires StateInvariant(Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
 requires StateInvariant(Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663563(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (18.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663571(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (18.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663583(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (18.28): Object invariant may not hold.
requires  (forall _this : Queue ::  { Queue._state[_this] } isAccessible(Queue._state[_this], tid) && true ==> Invariant.Queue.3663616(tid: Tid,_this : Queue,Queue._state,Queue.elems,Queue.head,Queue.tail,Queue.spec,Queue._lock,Array.Queue.T._state,Array.Queue.T._elems,Array.Queue.T._length,Array.Queue.A._state,Array.Queue.A._elems,Array.Queue.A._length));       // (18.28): Object invariant may not hold.
                                                                                                    
 requires this == Array.Queue.A._this[athis];                                                       
 requires ValidTid(tid);                                                                            
{                                                                                                   
var athis_pre: Array.Queue.A;                                                                       
var Queue.spec_pre: [Queue]Array.Queue.A;                                                           
var Array.Queue.A._state_pre: [Array.Queue.A]State;                                                 
var Array.Queue.A._length_pre: [Array.Queue.A]int;                                                  
var Queue.tail_pre: [Queue]int;                                                                     
var _pc_pre: Phase;                                                                                 
var Array.Queue.A._elems_pre: [Array.Queue.A]([int]int);                                            
var $recorded.state_pre: int;                                                                       
var Array.Queue.T._state_pre: [Array.Queue.T]State;                                                 
var index_pre: int;                                                                                 
var Queue._lock_pre: [Queue]Tid;                                                                    
var tid_pre: Tid;                                                                                   
var Queue._state_pre: [Queue]State;                                                                 
var Queue.elems_pre: [Queue]Array.Queue.T;                                                          
var Queue.head_pre: [Queue]int;                                                                     
var this_pre: Queue;                                                                                
var Array.Queue.T._elems_pre: [Array.Queue.T]([int]int);                                            
var Array.Queue.T._length_pre: [Array.Queue.T]int;                                                  
                                                                                                    
var Array.Queue.T._length_post: [Array.Queue.T]int;                                                 
var Queue.head_post: [Queue]int;                                                                    
var $recorded.state_post: int;                                                                      
var Array.Queue.T._elems_post: [Array.Queue.T]([int]int);                                           
var Array.Queue.A._elems_post: [Array.Queue.A]([int]int);                                           
var Array.Queue.T._state_post: [Array.Queue.T]State;                                                
var tid_post: Tid;                                                                                  
var this_post: Queue;                                                                               
var Queue.spec_post: [Queue]Array.Queue.A;                                                          
var index_post: int;                                                                                
var Queue._state_post: [Queue]State;                                                                
var Array.Queue.A._length_post: [Array.Queue.A]int;                                                 
var Array.Queue.A._state_post: [Array.Queue.A]State;                                                
var Queue.elems_post: [Queue]Array.Queue.T;                                                         
var _pc_post: Phase;                                                                                
var Queue.tail_post: [Queue]int;                                                                    
var athis_post: Array.Queue.A;                                                                      
var Queue._lock_post: [Queue]Tid;                                                                   
                                                                                                    
assume Queue._state_pre == Queue._state && Queue.elems_pre == Queue.elems && Queue.head_pre == Queue.head && Queue.tail_pre == Queue.tail && Queue.spec_pre == Queue.spec && Queue._lock_pre == Queue._lock && Array.Queue.T._state_pre == Array.Queue.T._state && Array.Queue.T._elems_pre == Array.Queue.T._elems && Array.Queue.T._length_pre == Array.Queue.T._length && Array.Queue.A._state_pre == Array.Queue.A._state && Array.Queue.A._elems_pre == Array.Queue.A._elems && Array.Queue.A._length_pre == Array.Queue.A._length && athis_pre == athis && index_pre == index && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
assume Queue._state_post == Queue._state_p && Queue.elems_post == Queue.elems_p && Queue.head_post == Queue.head_p && Queue.tail_post == Queue.tail_p && Queue.spec_post == Queue.spec_p && Queue._lock_post == Queue._lock_p && Array.Queue.T._state_post == Array.Queue.T._state_p && Array.Queue.T._elems_post == Array.Queue.T._elems_p && Array.Queue.T._length_post == Array.Queue.T._length_p && Array.Queue.A._state_post == Array.Queue.A._state_p && Array.Queue.A._elems_post == Array.Queue.A._elems_p && Array.Queue.A._length_post == Array.Queue.A._length_p && athis_post == athis && index_post == index && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assume isAccessible(Array.Queue.A._state[athis], tid);                                             
 assume Y(tid , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assume Y_Array.Queue.A(tid, athis, index, newValue , Queue._state_p, Queue.elems_p, Queue.head_p, Queue.tail_p, Queue.spec_p, Queue._lock_p, Array.Queue.T._state_p, Array.Queue.T._elems_p, Array.Queue.T._length_p, Array.Queue.A._state_p, Array.Queue.A._elems_p, Array.Queue.A._length_p);
 assert Y_Array.Queue.A(tid, athis, index, newValue , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length);
}                                                                                                   
                                                                                                    
                                                                                                    
function {:inline} Y(tid : Tid , Queue._state: [Queue]State, Queue.elems: [Queue]Array.Queue.T, Queue.head: [Queue]int, Queue.tail: [Queue]int, Queue.spec: [Queue]Array.Queue.A, Queue._lock: [Queue]Tid, Array.Queue.T._state: [Array.Queue.T]State, Array.Queue.T._elems: [Array.Queue.T]([int]int), Array.Queue.T._length: [Array.Queue.T]int, Array.Queue.A._state: [Array.Queue.A]State, Array.Queue.A._elems: [Array.Queue.A]([int]int), Array.Queue.A._length: [Array.Queue.A]int , Queue._state_p: [Queue]State, Queue.elems_p: [Queue]Array.Queue.T, Queue.head_p: [Queue]int, Queue.tail_p: [Queue]int, Queue.spec_p: [Queue]Array.Queue.A, Queue._lock_p: [Queue]Tid, Array.Queue.T._state_p: [Array.Queue.T]State, Array.Queue.T._elems_p: [Array.Queue.T]([int]int), Array.Queue.T._length_p: [Array.Queue.T]int, Array.Queue.A._state_p: [Array.Queue.A]State, Array.Queue.A._elems_p: [Array.Queue.A]([int]int), Array.Queue.A._length_p: [Array.Queue.A]int): bool
{                                                                                                   
 (forall this: Queue :: Y_Queue.elems(tid : Tid, this, Queue.elems_p[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall this: Queue :: Y_Queue.head(tid : Tid, this, Queue.head_p[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall this: Queue :: Y_Queue.tail(tid : Tid, this, Queue.tail_p[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall this: Queue :: Y_Queue.spec(tid : Tid, this, Queue.spec_p[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall this: Queue :: Y_Queue._lock(tid : Tid, this, Queue._lock_p[this] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall athis: Array.Queue.T, index: int :: Y_Array.Queue.T(tid : Tid, athis, index, Array.Queue.T._elems_p[athis][index] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall athis: Array.Queue.A, index: int :: Y_Array.Queue.A(tid : Tid, athis, index, Array.Queue.A._elems_p[athis][index] , Queue._state, Queue.elems, Queue.head, Queue.tail, Queue.spec, Queue._lock, Array.Queue.T._state, Array.Queue.T._elems, Array.Queue.T._length, Array.Queue.A._state, Array.Queue.A._elems, Array.Queue.A._length))
 && (forall _i : Queue :: isShared(Queue._state[_i]) ==> isShared(Queue._state_p[_i]))              
 && (forall _i : Queue :: isLocal(Queue._state[_i], tid) <==> isLocal(Queue._state_p[_i], tid))     
 && (forall _i : Array.Queue.T :: isShared(Array.Queue.T._state[_i]) ==> isShared(Array.Queue.T._state_p[_i]))
 && (forall _i : Array.Queue.T :: Array.Queue.T._length[_i] == Array.Queue.T._length_p[_i])         
 && (forall _i : Array.Queue.T :: isLocal(Array.Queue.T._state[_i], tid) <==> isLocal(Array.Queue.T._state_p[_i], tid))
 && (forall _i : Array.Queue.A :: isShared(Array.Queue.A._state[_i]) ==> isShared(Array.Queue.A._state_p[_i]))
 && (forall _i : Array.Queue.A :: Array.Queue.A._length[_i] == Array.Queue.A._length_p[_i])         
 && (forall _i : Array.Queue.A :: isLocal(Array.Queue.A._state[_i], tid) <==> isLocal(Array.Queue.A._state_p[_i], tid))
                                                                                                    
}                                                                                                   
                                                                                                    
                                                                                                    
// 946.1-1251.2: (Method:27.5)
// 960.1-960.24: (27.5): Bad tid
// 968.1-968.368: (27.5): Object invariant may not hold.
// 969.1-969.368: (27.5): Object invariant may not hold.
// 970.1-970.368: (27.5): Object invariant may not hold.
// 971.1-971.368: (27.5): Object invariant may not hold.
// 974.1-974.358: (27.5): Object invariant may not hold.
// 975.1-975.358: (27.5): Object invariant may not hold.
// 976.1-976.358: (27.5): Object invariant may not hold.
// 977.1-977.358: (27.5): Object invariant may not hold.
// 1094.1-1094.279: (27.5): Can only have right-mover memory accesses in requires clause
// 1095.1-1095.278: (27.5): Can only have right-mover memory accesses in requires clause
// 1097.2-1100.49: (class anchor.sink.Assume:27.5)
// 1101.2-1104.31: (class anchor.sink.Assume:27.5)
// 1105.2-1108.31: (class anchor.sink.Assume:27.5)
// 1109.2-1112.48: (class anchor.sink.Assume:27.5)
// 1113.2-1115.2: (class anchor.sink.VarDeclStmt:28.9)
// 1116.2-1119.12: (class anchor.sink.Assign:28.9)
// 1121.2-1137.27: (class anchor.sink.Write:28.9)
// 1133.1-1133.29: (28.9): Cannot have potential null deference in left-mover part.
// 1136.1-1136.27: (28.9): Reduction failure
// 1138.2-1140.2: (class anchor.sink.VarDeclStmt:29.9)
// 1141.2-1144.12: (class anchor.sink.Assign:29.9)
// 1146.2-1162.27: (class anchor.sink.Write:29.9)
// 1158.1-1158.29: (29.9): Cannot have potential null deference in left-mover part.
// 1161.1-1161.27: (29.9): Reduction failure
// 1163.2-1165.2: (class anchor.sink.VarDeclStmt:30.9)
// 1166.2-1174.79: (class anchor.sink.AAlloc:30.9)
// 1175.2-1177.2: (class anchor.sink.VarDeclStmt:31.9)
// 1178.2-1186.78: (class anchor.sink.AAlloc:31.9)
// 1187.2-1240.89: (class anchor.sink.LocalWrites:32.9)
// 1190.1-1190.26: (32.9): Local Write block must appear pre commit.
// 1191.2-1209.29: (class anchor.sink.Write:32.9)
// 1203.1-1203.29: (32.9): Cannot have potential null deference in left-mover part.
// 1207.1-1207.27: (32.9): Reduction failure
// 1208.1-1208.26: (32.9): Local Write block can only include right-movers.
// 1210.2-1228.27: (class anchor.sink.Write:32.29)
// 1222.1-1222.29: (32.29): Cannot have potential null deference in left-mover part.
// 1226.1-1226.27: (32.29): Reduction failure
// 1227.1-1227.26: (32.29): Local Write block can only include right-movers.
// 1229.1-1229.51: (32.9): Can only have local designators in Local Write block.
// 1230.1-1230.50: (32.29): Can only have local designators in Local Write block.
// 1236.1-1236.91: (32.9): elems became shared, but Array.Queue.T._this[elems].elems may not be shared.
// 1237.1-1237.90: (32.9): elems became shared, but Array.Queue.T._this[elems].spec may not be shared.
// 1239.1-1239.90: (32.29): spec became shared, but Array.Queue.A._this[spec].elems may not be shared.
// 1240.1-1240.89: (32.29): spec became shared, but Array.Queue.A._this[spec].spec may not be shared.
// 1241.2-1250.9: (class anchor.sink.Return:27.21)
// 1246.1-1246.358: (27.21): Object invariant may not hold.
// 1247.1-1247.358: (27.21): Object invariant may not hold.
// 1248.1-1248.358: (27.21): Object invariant may not hold.
// 1249.1-1249.358: (27.21): Object invariant may not hold.
// 1252.1-2214.2: (Method:36.5)
// 1267.1-1267.24: (36.5): Bad tid
// 1268.1-1268.39: (36.5): this is not global
// 1271.1-1271.359: (36.5): Object invariant may not hold.
// 1272.1-1272.359: (36.5): Object invariant may not hold.
// 1273.1-1273.359: (36.5): Object invariant may not hold.
// 1274.1-1274.359: (36.5): Object invariant may not hold.
// 1277.1-1277.358: (36.5): Object invariant may not hold.
// 1278.1-1278.358: (36.5): Object invariant may not hold.
// 1279.1-1279.358: (36.5): Object invariant may not hold.
// 1280.1-1280.358: (36.5): Object invariant may not hold.
// 1789.1-1789.29: (37.23): Cannot have potential null deference in left-mover part.
// 1793.1-1793.27: (37.23): Reduction failure
// 1795.2-1797.2: (class anchor.sink.VarDeclStmt:38.13)
// 1798.2-1800.2: (class anchor.sink.VarDeclStmt:38.13)
// 1801.2-1803.2: (class anchor.sink.VarDeclStmt:38.13)
// 1804.2-1821.27: (class anchor.sink.Read:38.13)
// 1816.1-1816.29: (38.13): Cannot have potential null deference in left-mover part.
// 1820.1-1820.27: (38.13): Reduction failure
// 1822.2-1824.2: (class anchor.sink.VarDeclStmt:38.13)
// 1825.2-1842.27: (class anchor.sink.Read:38.13)
// 1837.1-1837.29: (38.13): Cannot have potential null deference in left-mover part.
// 1841.1-1841.27: (38.13): Reduction failure
// 1843.2-1846.22: (class anchor.sink.Assign:38.13)
// 1847.2-1850.19: (class anchor.sink.Assign:38.13)
// 1852.3-1854.3: (class anchor.sink.VarDeclStmt:39.17)
// 1855.3-1857.3: (class anchor.sink.VarDeclStmt:39.17)
// 1858.3-1875.29: (class anchor.sink.Read:39.17)
// 1870.1-1870.30: (39.17): Cannot have potential null deference in left-mover part.
// 1874.1-1874.28: (39.17): Reduction failure
// 1876.3-1878.3: (class anchor.sink.VarDeclStmt:39.17)
// 1879.3-1896.28: (class anchor.sink.Read:39.17)
// 1891.1-1891.30: (39.17): Cannot have potential null deference in left-mover part.
// 1895.1-1895.28: (39.17): Reduction failure
// 1897.3-1924.46: (class anchor.sink.ARead:39.17)
// 1909.1-1909.38: (39.17): Cannot have potential null deference in left-mover part.
// 1914.1-1914.21: (39.17): index < 0.
// 1919.1-1919.46: (39.17): index is >= length.
// 1923.1-1923.28: (39.17): Reduction failure
// 1925.3-1927.3: (class anchor.sink.VarDeclStmt:40.17)
// 1928.3-1930.3: (class anchor.sink.VarDeclStmt:40.17)
// 1931.3-1933.3: (class anchor.sink.VarDeclStmt:40.17)
// 1934.3-1936.3: (class anchor.sink.VarDeclStmt:40.17)
// 1937.3-1954.29: (class anchor.sink.Read:40.17)
// 1949.1-1949.30: (40.17): Cannot have potential null deference in left-mover part.
// 1953.1-1953.28: (40.17): Reduction failure
// 1955.3-1958.41: (class anchor.sink.Assign:40.17)
// 1959.3-1962.21: (class anchor.sink.Assign:40.17)
// 1963.3-1971.82: (class anchor.sink.AAlloc:40.17)
// 1972.3-1975.172: (class anchor.sink.Assume:41.17)
// 1976.3-1978.3: (class anchor.sink.VarDeclStmt:42.17)
// 1979.3-1982.14: (class anchor.sink.Assign:42.17)
// 1983.3-1985.3: (class anchor.sink.VarDeclStmt:42.17)
// 1986.3-2013.49: (class anchor.sink.ARead:42.17)
// 1998.1-1998.41: (42.17): Cannot have potential null deference in left-mover part.
// 2003.1-2003.22: (42.17): index < 0.
// 2008.1-2008.50: (42.17): index is >= length.
// 2012.1-2012.28: (42.17): Reduction failure
// 2014.3-2016.3: (class anchor.sink.VarDeclStmt:42.17)
// 2017.3-2034.29: (class anchor.sink.Read:42.17)
// 2029.1-2029.30: (42.17): Cannot have potential null deference in left-mover part.
// 2033.1-2033.28: (42.17): Reduction failure
// 2035.3-2037.3: (class anchor.sink.VarDeclStmt:42.17)
// 2038.3-2041.14: (class anchor.sink.Assign:42.17)
// 2042.3-2044.3: (class anchor.sink.VarDeclStmt:42.17)
// 2045.3-2072.47: (class anchor.sink.ARead:42.17)
// 2057.1-2057.39: (42.17): Cannot have potential null deference in left-mover part.
// 2062.1-2062.22: (42.17): index < 0.
// 2067.1-2067.48: (42.17): index is >= length.
// 2071.1-2071.28: (42.17): Reduction failure
// 2073.3-2078.25: (class anchor.sink.Assert:42.17)
// 2078.1-2078.25: (42.17): This assertion may not hold.
// 2079.3-2081.3: (class anchor.sink.VarDeclStmt:43.17)
// 2082.3-2084.3: (class anchor.sink.VarDeclStmt:43.17)
// 2085.3-2102.29: (class anchor.sink.Read:43.17)
// 2097.1-2097.30: (43.17): Cannot have potential null deference in left-mover part.
// 2101.1-2101.28: (43.17): Reduction failure
// 2103.3-2106.22: (class anchor.sink.Assign:43.17)
// 2108.3-2124.29: (class anchor.sink.Write:43.17)
// 2120.1-2120.30: (43.17): Cannot have potential null deference in left-mover part.
// 2123.1-2123.28: (43.17): Reduction failure
// 2126.3-2151.3: (class anchor.sink.Write:44.17)
// 2138.1-2138.30: (44.17): Cannot have potential null deference in left-mover part.
// 2141.1-2141.28: (44.17): Reduction failure
// 2147.1-2147.96: (44.17): newSpec became shared, but Array.Queue.A._this[newSpec].elems may not be shared.
// 2148.1-2148.95: (44.17): newSpec became shared, but Array.Queue.A._this[newSpec].spec may not be shared.
// 2155.1-2155.30: (49.9): Cannot have potential null deference in left-mover part.
// 2157.1-2157.35: (49.9): lock not held
// 2159.1-2159.28: (49.9): Reduction failure
// 2161.3-2171.10: (class anchor.sink.Return:45.17)
// 2167.1-2167.359: (45.17): Object invariant may not hold.
// 2168.1-2168.359: (45.17): Object invariant may not hold.
// 2169.1-2169.359: (45.17): Object invariant may not hold.
// 2170.1-2170.359: (45.17): Object invariant may not hold.
// 2176.1-2176.30: (49.9): Cannot have potential null deference in left-mover part.
// 2178.1-2178.35: (49.9): lock not held
// 2180.1-2180.28: (49.9): Reduction failure
// 2182.3-2192.10: (class anchor.sink.Return:47.17)
// 2188.1-2188.359: (47.17): Object invariant may not hold.
// 2189.1-2189.359: (47.17): Object invariant may not hold.
// 2190.1-2190.359: (47.17): Object invariant may not hold.
// 2191.1-2191.359: (47.17): Object invariant may not hold.
// 2197.1-2197.29: (49.9): Cannot have potential null deference in left-mover part.
// 2199.1-2199.34: (49.9): lock not held
// 2201.1-2201.27: (49.9): Reduction failure
// 2203.2-2213.9: (class anchor.sink.Return:36.26)
// 2209.1-2209.358: (36.26): Object invariant may not hold.
// 2210.1-2210.358: (36.26): Object invariant may not hold.
// 2211.1-2211.358: (36.26): Object invariant may not hold.
// 2212.1-2212.358: (36.26): Object invariant may not hold.
// 2400.1-2400.34: (8.5): Queue.elems failed Write-Write Right-Mover Check
// 2453.1-2453.30: (8.5): Queue.elems failed Write-Read Right-Mover Check
// 2510.1-2510.34: (8.5): Queue.elems failed Write-Write Left-Mover Check
// 2564.1-2564.30: (8.5): Queue.elems failed Write-Read Left-Mover Check
// 2615.1-2615.34: (8.5): Queue.elems failed Read-Write Right-Mover Check
// 2669.1-2669.34: (8.5): Queue.elems failed Read-Write Left-Mover Check
// 2722.1-2722.34: (10.5): Queue.head failed Write-Write Right-Mover Check
// 2775.1-2775.30: (10.5): Queue.head failed Write-Read Right-Mover Check
// 2832.1-2832.34: (10.5): Queue.head failed Write-Write Left-Mover Check
// 2886.1-2886.30: (10.5): Queue.head failed Write-Read Left-Mover Check
// 2937.1-2937.34: (10.5): Queue.head failed Read-Write Right-Mover Check
// 2991.1-2991.34: (10.5): Queue.head failed Read-Write Left-Mover Check
// 3044.1-3044.34: (11.5): Queue.tail failed Write-Write Right-Mover Check
// 3097.1-3097.30: (11.5): Queue.tail failed Write-Read Right-Mover Check
// 3154.1-3154.34: (11.5): Queue.tail failed Write-Write Left-Mover Check
// 3208.1-3208.30: (11.5): Queue.tail failed Write-Read Left-Mover Check
// 3259.1-3259.34: (11.5): Queue.tail failed Read-Write Right-Mover Check
// 3313.1-3313.34: (11.5): Queue.tail failed Read-Write Left-Mover Check
// 3366.1-3366.34: (19.5): Queue.spec failed Write-Write Right-Mover Check
// 3419.1-3419.30: (19.5): Queue.spec failed Write-Read Right-Mover Check
// 3476.1-3476.34: (19.5): Queue.spec failed Write-Write Left-Mover Check
// 3530.1-3530.30: (19.5): Queue.spec failed Write-Read Left-Mover Check
// 3581.1-3581.34: (19.5): Queue.spec failed Read-Write Right-Mover Check
// 3635.1-3635.34: (19.5): Queue.spec failed Read-Write Left-Mover Check
// 3692.1-3692.34: (6.5): Array Array.Queue.T failed Write-Write Right-Mover Check
// 3749.1-3749.30: (6.5): Array Array.Queue.T failed Write-Read Right-Mover Check
// 3810.1-3810.34: (6.5): Array Array.Queue.T failed Write-Write Left-Mover Check
// 3868.1-3868.30: (6.5): Array Array.Queue.T failed Write-Read Left-Mover Check
// 3923.1-3923.34: (6.5): Array Array.Queue.T failed Read-Write Right-Mover Check
// 3981.1-3981.34: (6.5): Array Array.Queue.T failed Read-Write Left-Mover Check
// 4038.1-4038.34: (18.5): Array Array.Queue.A failed Write-Write Right-Mover Check
// 4095.1-4095.30: (18.5): Array Array.Queue.A failed Write-Read Right-Mover Check
// 4156.1-4156.34: (18.5): Array Array.Queue.A failed Write-Write Left-Mover Check
// 4214.1-4214.30: (18.5): Array Array.Queue.A failed Write-Read Left-Mover Check
// 4269.1-4269.34: (18.5): Array Array.Queue.A failed Read-Write Right-Mover Check
// 4327.1-4327.34: (18.5): Array Array.Queue.A failed Read-Write Left-Mover Check
// 4414.1-4414.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.1)
// 4415.1-4415.101: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.2)
// 4416.1-4416.158: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case A.3)
// 4536.1-4536.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case C)
// 4661.1-4661.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case D)
// 4662.1-4662.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.elems (case R)
// 4749.1-4749.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case F)
// 4750.1-4750.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case H)
// 4751.1-4751.146: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.elems (case I)
// 4837.1-4837.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case J)
// 4838.1-4838.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case K)
// 4839.1-4839.99: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.elems (case L)
// 4927.1-4927.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.1)
// 4928.1-4928.101: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.2)
// 4929.1-4929.158: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case A.3)
// 5049.1-5049.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case C)
// 5174.1-5174.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case D)
// 5175.1-5175.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case R)
// 5262.1-5262.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case F)
// 5263.1-5263.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case H)
// 5264.1-5264.146: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.head (case I)
// 5350.1-5350.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case J)
// 5351.1-5351.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case K)
// 5352.1-5352.99: (10.5): Queue.head is not Write-Read Stable with respect to Queue.elems (case L)
// 5440.1-5440.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.1)
// 5441.1-5441.101: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.2)
// 5442.1-5442.158: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case A.3)
// 5562.1-5562.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case C)
// 5687.1-5687.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case D)
// 5688.1-5688.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case R)
// 5775.1-5775.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case F)
// 5776.1-5776.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case H)
// 5777.1-5777.146: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.tail (case I)
// 5863.1-5863.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case J)
// 5864.1-5864.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case K)
// 5865.1-5865.99: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.elems (case L)
// 5953.1-5953.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.1)
// 5954.1-5954.101: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.2)
// 5955.1-5955.158: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case A.3)
// 6075.1-6075.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case C)
// 6200.1-6200.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case D)
// 6201.1-6201.144: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case R)
// 6288.1-6288.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case F)
// 6289.1-6289.136: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case H)
// 6290.1-6290.146: (8.5): Queue.elems is not Read-Write Stable with respect to Queue.spec (case I)
// 6376.1-6376.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case J)
// 6377.1-6377.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case K)
// 6378.1-6378.99: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.elems (case L)
// 6471.1-6471.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.1)
// 6472.1-6472.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.2)
// 6473.1-6473.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case A.3)
// 6600.1-6600.140: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 6732.1-6732.144: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 6733.1-6733.144: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 6825.1-6825.136: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 6826.1-6826.136: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 6827.1-6827.144: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 6918.1-6918.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case J)
// 6919.1-6919.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case K)
// 6920.1-6920.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.elems (case L)
// 7013.1-7013.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.1)
// 7014.1-7014.101: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.2)
// 7015.1-7015.156: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case A.3)
// 7142.1-7142.140: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 7274.1-7274.144: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 7275.1-7275.144: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 7367.1-7367.136: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 7368.1-7368.136: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 7369.1-7369.144: (8.5): Queue.elems is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 7460.1-7460.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case J)
// 7461.1-7461.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case K)
// 7462.1-7462.99: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.elems (case L)
// 7550.1-7550.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.1)
// 7551.1-7551.101: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.2)
// 7552.1-7552.158: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.head (case A.3)
// 7672.1-7672.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case C)
// 7797.1-7797.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case D)
// 7798.1-7798.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.elems (case R)
// 7885.1-7885.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case F)
// 7886.1-7886.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case H)
// 7887.1-7887.146: (10.5): Queue.head is not Read-Write Stable with respect to Queue.elems (case I)
// 7973.1-7973.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case J)
// 7974.1-7974.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case K)
// 7975.1-7975.99: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.head (case L)
// 8063.1-8063.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.1)
// 8064.1-8064.101: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.2)
// 8065.1-8065.158: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case A.3)
// 8185.1-8185.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case C)
// 8310.1-8310.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case D)
// 8311.1-8311.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.head (case R)
// 8398.1-8398.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case F)
// 8399.1-8399.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case H)
// 8400.1-8400.146: (10.5): Queue.head is not Read-Write Stable with respect to Queue.head (case I)
// 8486.1-8486.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case J)
// 8487.1-8487.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case K)
// 8488.1-8488.99: (10.5): Queue.head is not Write-Read Stable with respect to Queue.head (case L)
// 8576.1-8576.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.1)
// 8577.1-8577.101: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.2)
// 8578.1-8578.158: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case A.3)
// 8698.1-8698.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case C)
// 8823.1-8823.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case D)
// 8824.1-8824.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case R)
// 8911.1-8911.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case F)
// 8912.1-8912.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case H)
// 8913.1-8913.146: (10.5): Queue.head is not Read-Write Stable with respect to Queue.tail (case I)
// 8999.1-8999.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case J)
// 9000.1-9000.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case K)
// 9001.1-9001.99: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.head (case L)
// 9089.1-9089.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.1)
// 9090.1-9090.101: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.2)
// 9091.1-9091.158: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case A.3)
// 9211.1-9211.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case C)
// 9336.1-9336.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case D)
// 9337.1-9337.144: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case R)
// 9424.1-9424.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case F)
// 9425.1-9425.136: (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case H)
// 9426.1-9426.146: (10.5): Queue.head is not Read-Write Stable with respect to Queue.spec (case I)
// 9512.1-9512.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case J)
// 9513.1-9513.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case K)
// 9514.1-9514.99: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.head (case L)
// 9607.1-9607.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.1)
// 9608.1-9608.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.2)
// 9609.1-9609.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case A.3)
// 9736.1-9736.140: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 9868.1-9868.144: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 9869.1-9869.144: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 9961.1-9961.136: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 9962.1-9962.136: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 9963.1-9963.144: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 10054.1-10054.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case J)
// 10055.1-10055.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case K)
// 10056.1-10056.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.head (case L)
// 10149.1-10149.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.1)
// 10150.1-10150.101: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.2)
// 10151.1-10151.156: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case A.3)
// 10278.1-10278.140: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 10410.1-10410.144: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 10411.1-10411.144: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 10503.1-10503.136: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 10504.1-10504.136: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 10505.1-10505.144: (10.5): Queue.head is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 10596.1-10596.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case J)
// 10597.1-10597.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case K)
// 10598.1-10598.99: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.head (case L)
// 10686.1-10686.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.1)
// 10687.1-10687.101: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.2)
// 10688.1-10688.158: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.tail (case A.3)
// 10808.1-10808.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case C)
// 10933.1-10933.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case D)
// 10934.1-10934.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.elems (case R)
// 11021.1-11021.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case F)
// 11022.1-11022.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case H)
// 11023.1-11023.146: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.elems (case I)
// 11109.1-11109.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case J)
// 11110.1-11110.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case K)
// 11111.1-11111.99: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.tail (case L)
// 11199.1-11199.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.1)
// 11200.1-11200.101: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.2)
// 11201.1-11201.158: (10.5): Queue.head is not Write-Write Stable with respect to Queue.tail (case A.3)
// 11321.1-11321.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case C)
// 11446.1-11446.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case D)
// 11447.1-11447.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.head (case R)
// 11534.1-11534.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case F)
// 11535.1-11535.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case H)
// 11536.1-11536.146: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.head (case I)
// 11622.1-11622.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case J)
// 11623.1-11623.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case K)
// 11624.1-11624.99: (10.5): Queue.head is not Write-Read Stable with respect to Queue.tail (case L)
// 11712.1-11712.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.1)
// 11713.1-11713.101: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.2)
// 11714.1-11714.158: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case A.3)
// 11834.1-11834.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case C)
// 11959.1-11959.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case D)
// 11960.1-11960.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.tail (case R)
// 12047.1-12047.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case F)
// 12048.1-12048.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case H)
// 12049.1-12049.146: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.tail (case I)
// 12135.1-12135.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case J)
// 12136.1-12136.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case K)
// 12137.1-12137.99: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.tail (case L)
// 12225.1-12225.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.1)
// 12226.1-12226.101: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.2)
// 12227.1-12227.158: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case A.3)
// 12347.1-12347.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case C)
// 12472.1-12472.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case D)
// 12473.1-12473.144: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case R)
// 12560.1-12560.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case F)
// 12561.1-12561.136: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case H)
// 12562.1-12562.146: (11.5): Queue.tail is not Read-Write Stable with respect to Queue.spec (case I)
// 12648.1-12648.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case J)
// 12649.1-12649.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case K)
// 12650.1-12650.99: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.tail (case L)
// 12743.1-12743.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.1)
// 12744.1-12744.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.2)
// 12745.1-12745.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case A.3)
// 12872.1-12872.140: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 13004.1-13004.144: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 13005.1-13005.144: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 13097.1-13097.136: (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 13098.1-13098.136: (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 13099.1-13099.144: (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 13190.1-13190.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case J)
// 13191.1-13191.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case K)
// 13192.1-13192.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.tail (case L)
// 13285.1-13285.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.1)
// 13286.1-13286.101: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.2)
// 13287.1-13287.156: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case A.3)
// 13414.1-13414.140: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 13546.1-13546.144: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 13547.1-13547.144: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 13639.1-13639.136: (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 13640.1-13640.136: (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 13641.1-13641.144: (11.5): Queue.tail is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 13732.1-13732.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case J)
// 13733.1-13733.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case K)
// 13734.1-13734.99: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.tail (case L)
// 13822.1-13822.140: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.1)
// 13823.1-13823.101: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.2)
// 13824.1-13824.158: (8.5): Queue.elems is not Write-Write Stable with respect to Queue.spec (case A.3)
// 13944.1-13944.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case C)
// 14069.1-14069.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case D)
// 14070.1-14070.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.elems (case R)
// 14157.1-14157.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case F)
// 14158.1-14158.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case H)
// 14159.1-14159.146: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.elems (case I)
// 14245.1-14245.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case J)
// 14246.1-14246.136: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case K)
// 14247.1-14247.99: (8.5): Queue.elems is not Write-Read Stable with respect to Queue.spec (case L)
// 14335.1-14335.140: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.1)
// 14336.1-14336.101: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.2)
// 14337.1-14337.158: (10.5): Queue.head is not Write-Write Stable with respect to Queue.spec (case A.3)
// 14457.1-14457.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case C)
// 14582.1-14582.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case D)
// 14583.1-14583.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.head (case R)
// 14670.1-14670.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case F)
// 14671.1-14671.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case H)
// 14672.1-14672.146: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.head (case I)
// 14758.1-14758.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case J)
// 14759.1-14759.136: (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case K)
// 14760.1-14760.99: (10.5): Queue.head is not Write-Read Stable with respect to Queue.spec (case L)
// 14848.1-14848.140: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.1)
// 14849.1-14849.101: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.2)
// 14850.1-14850.158: (11.5): Queue.tail is not Write-Write Stable with respect to Queue.spec (case A.3)
// 14970.1-14970.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case C)
// 15095.1-15095.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case D)
// 15096.1-15096.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.tail (case R)
// 15183.1-15183.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case F)
// 15184.1-15184.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case H)
// 15185.1-15185.146: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.tail (case I)
// 15271.1-15271.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case J)
// 15272.1-15272.136: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case K)
// 15273.1-15273.99: (11.5): Queue.tail is not Write-Read Stable with respect to Queue.spec (case L)
// 15361.1-15361.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.1)
// 15362.1-15362.101: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.2)
// 15363.1-15363.158: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case A.3)
// 15483.1-15483.140: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case C)
// 15608.1-15608.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case D)
// 15609.1-15609.144: (19.5): Queue.spec is not Write-Write Stable with respect to Queue.spec (case R)
// 15696.1-15696.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case F)
// 15697.1-15697.136: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case H)
// 15698.1-15698.146: (19.5): Queue.spec is not Read-Write Stable with respect to Queue.spec (case I)
// 15784.1-15784.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case J)
// 15785.1-15785.136: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case K)
// 15786.1-15786.99: (19.5): Queue.spec is not Write-Read Stable with respect to Queue.spec (case L)
// 15879.1-15879.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.1)
// 15880.1-15880.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.2)
// 15881.1-15881.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case A.3)
// 16008.1-16008.140: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 16140.1-16140.144: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 16141.1-16141.144: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 16233.1-16233.136: (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 16234.1-16234.136: (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 16235.1-16235.144: (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 16326.1-16326.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case J)
// 16327.1-16327.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case K)
// 16328.1-16328.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Queue.spec (case L)
// 16421.1-16421.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.1)
// 16422.1-16422.101: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.2)
// 16423.1-16423.156: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case A.3)
// 16550.1-16550.140: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 16682.1-16682.144: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 16683.1-16683.144: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 16775.1-16775.136: (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 16776.1-16776.136: (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 16777.1-16777.144: (19.5): Queue.spec is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 16868.1-16868.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case J)
// 16869.1-16869.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case K)
// 16870.1-16870.99: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Queue.spec (case L)
// 16963.1-16963.140: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 16964.1-16964.101: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 16965.1-16965.156: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 17092.1-17092.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case C)
// 17224.1-17224.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case D)
// 17225.1-17225.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.elems (case R)
// 17317.1-17317.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case F)
// 17318.1-17318.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case H)
// 17319.1-17319.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.elems (case I)
// 17410.1-17410.136: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 17411.1-17411.136: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 17412.1-17412.99: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 17505.1-17505.140: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 17506.1-17506.101: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 17507.1-17507.156: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 17634.1-17634.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case C)
// 17766.1-17766.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case D)
// 17767.1-17767.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.head (case R)
// 17859.1-17859.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case F)
// 17860.1-17860.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case H)
// 17861.1-17861.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.head (case I)
// 17952.1-17952.136: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 17953.1-17953.136: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 17954.1-17954.99: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 18047.1-18047.140: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 18048.1-18048.101: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 18049.1-18049.156: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 18176.1-18176.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case C)
// 18308.1-18308.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case D)
// 18309.1-18309.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.tail (case R)
// 18401.1-18401.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case F)
// 18402.1-18402.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case H)
// 18403.1-18403.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.tail (case I)
// 18494.1-18494.136: (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 18495.1-18495.136: (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 18496.1-18496.99: (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 18589.1-18589.140: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 18590.1-18590.101: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 18591.1-18591.156: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 18718.1-18718.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case C)
// 18850.1-18850.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case D)
// 18851.1-18851.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Queue.spec (case R)
// 18943.1-18943.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case F)
// 18944.1-18944.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case H)
// 18945.1-18945.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Queue.spec (case I)
// 19036.1-19036.136: (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 19037.1-19037.136: (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 19038.1-19038.99: (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 19136.1-19136.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 19137.1-19137.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 19138.1-19138.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 19272.1-19272.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 19411.1-19411.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 19412.1-19412.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 19509.1-19509.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 19510.1-19510.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 19511.1-19511.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 19607.1-19607.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 19608.1-19608.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 19609.1-19609.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 19707.1-19707.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.1)
// 19708.1-19708.101: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.2)
// 19709.1-19709.156: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case A.3)
// 19843.1-19843.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 19982.1-19982.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 19983.1-19983.144: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 20080.1-20080.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 20081.1-20081.136: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 20082.1-20082.144: (6.5): Array Array.Queue.T is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 20178.1-20178.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case J)
// 20179.1-20179.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case K)
// 20180.1-20180.99: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.T (case L)
// 20273.1-20273.140: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 20274.1-20274.101: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 20275.1-20275.156: (8.5): Queue.elems is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 20402.1-20402.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case C)
// 20534.1-20534.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case D)
// 20535.1-20535.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.elems (case R)
// 20627.1-20627.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case F)
// 20628.1-20628.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case H)
// 20629.1-20629.144: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.elems (case I)
// 20720.1-20720.136: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 20721.1-20721.136: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 20722.1-20722.99: (8.5): Queue.elems is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 20815.1-20815.140: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 20816.1-20816.101: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 20817.1-20817.156: (10.5): Queue.head is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 20944.1-20944.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case C)
// 21076.1-21076.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case D)
// 21077.1-21077.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.head (case R)
// 21169.1-21169.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case F)
// 21170.1-21170.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case H)
// 21171.1-21171.144: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.head (case I)
// 21262.1-21262.136: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 21263.1-21263.136: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 21264.1-21264.99: (10.5): Queue.head is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 21357.1-21357.140: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 21358.1-21358.101: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 21359.1-21359.156: (11.5): Queue.tail is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 21486.1-21486.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case C)
// 21618.1-21618.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case D)
// 21619.1-21619.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.tail (case R)
// 21711.1-21711.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case F)
// 21712.1-21712.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case H)
// 21713.1-21713.144: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.tail (case I)
// 21804.1-21804.136: (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 21805.1-21805.136: (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 21806.1-21806.99: (11.5): Queue.tail is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 21899.1-21899.140: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 21900.1-21900.101: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 21901.1-21901.156: (19.5): Queue.spec is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 22028.1-22028.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case C)
// 22160.1-22160.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case D)
// 22161.1-22161.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Queue.spec (case R)
// 22253.1-22253.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case F)
// 22254.1-22254.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case H)
// 22255.1-22255.144: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Queue.spec (case I)
// 22346.1-22346.136: (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 22347.1-22347.136: (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 22348.1-22348.99: (19.5): Queue.spec is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 22446.1-22446.140: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 22447.1-22447.101: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 22448.1-22448.156: (6.5): Array Array.Queue.T is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 22582.1-22582.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case C)
// 22721.1-22721.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case D)
// 22722.1-22722.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.T (case R)
// 22819.1-22819.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case F)
// 22820.1-22820.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case H)
// 22821.1-22821.144: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.T (case I)
// 22917.1-22917.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 22918.1-22918.136: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 22919.1-22919.99: (6.5): Array Array.Queue.T is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 23017.1-23017.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.1)
// 23018.1-23018.101: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.2)
// 23019.1-23019.156: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case A.3)
// 23153.1-23153.140: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case C)
// 23292.1-23292.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case D)
// 23293.1-23293.144: (18.5): Array Array.Queue.A is not Write-Write Stable with respect to Array Array.Queue.A (case R)
// 23390.1-23390.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case F)
// 23391.1-23391.136: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case H)
// 23392.1-23392.144: (18.5): Array Array.Queue.A is not Read-Write Stable with respect to Array Array.Queue.A (case I)
// 23488.1-23488.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case J)
// 23489.1-23489.136: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case K)
// 23490.1-23490.99: (18.5): Array Array.Queue.A is not Write-Read Stable with respect to Array Array.Queue.A (case L)
// 23497.1-23497.359: (<undefined position>): Object invariant may not hold.
// 23498.1-23498.359: (<undefined position>): Object invariant may not hold.
// 23499.1-23499.359: (<undefined position>): Object invariant may not hold.
// 23500.1-23500.359: (<undefined position>): Object invariant may not hold.
// 23513.1-23513.358: (<undefined position>): Object invariant may not hold.
// 23514.1-23514.358: (<undefined position>): Object invariant may not hold.
// 23515.1-23515.358: (<undefined position>): Object invariant may not hold.
// 23516.1-23516.358: (<undefined position>): Object invariant may not hold.
// 23530.1-23556.2: (8.24): yields_as clause for Queue.elems is not valid
// 23561.1-23584.2: (8.24): yields_as clause for Queue.elems is not reflexive
// 23590.1-23590.359: (8.24): Object invariant may not hold.
// 23591.1-23591.359: (8.24): Object invariant may not hold.
// 23592.1-23592.359: (8.24): Object invariant may not hold.
// 23593.1-23593.359: (8.24): Object invariant may not hold.
// 23594.1-23640.2: (8.24): yields_as clause for Queue.elems is not transitive
// 23653.1-23679.2: (10.32): yields_as clause for Queue.head is not valid
// 23684.1-23707.2: (10.32): yields_as clause for Queue.head is not reflexive
// 23713.1-23713.359: (10.32): Object invariant may not hold.
// 23714.1-23714.359: (10.32): Object invariant may not hold.
// 23715.1-23715.359: (10.32): Object invariant may not hold.
// 23716.1-23716.359: (10.32): Object invariant may not hold.
// 23717.1-23763.2: (10.32): yields_as clause for Queue.head is not transitive
// 23776.1-23802.2: (11.32): yields_as clause for Queue.tail is not valid
// 23807.1-23830.2: (11.32): yields_as clause for Queue.tail is not reflexive
// 23836.1-23836.359: (11.32): Object invariant may not hold.
// 23837.1-23837.359: (11.32): Object invariant may not hold.
// 23838.1-23838.359: (11.32): Object invariant may not hold.
// 23839.1-23839.359: (11.32): Object invariant may not hold.
// 23840.1-23886.2: (11.32): yields_as clause for Queue.tail is not transitive
// 23899.1-23925.2: (21.5): yields_as clause for Queue.spec is not valid
// 23930.1-23953.2: (21.5): yields_as clause for Queue.spec is not reflexive
// 23959.1-23959.359: (21.5): Object invariant may not hold.
// 23960.1-23960.359: (21.5): Object invariant may not hold.
// 23961.1-23961.359: (21.5): Object invariant may not hold.
// 23962.1-23962.359: (21.5): Object invariant may not hold.
// 23963.1-24009.2: (21.5): yields_as clause for Queue.spec is not transitive
// 24023.1-24049.2: (7.32): yields_as clause for Queue._lock is not valid
// 24054.1-24077.2: (7.32): yields_as clause for Queue._lock is not reflexive
// 24083.1-24083.359: (3.1): Object invariant may not hold.
// 24084.1-24084.359: (3.1): Object invariant may not hold.
// 24085.1-24085.359: (3.1): Object invariant may not hold.
// 24086.1-24086.359: (3.1): Object invariant may not hold.
// 24087.1-24133.2: (7.32): yields_as clause for Queue._lock is not transitive
// 24143.1-24175.2: (6.28): yields_as clause for Array.Queue.T is not valid
// 24176.1-24205.2: (6.28): yields_as clause for Array.Queue.T is not reflexive
// 24210.1-24210.359: (6.28): Object invariant may not hold.
// 24211.1-24211.359: (6.28): Object invariant may not hold.
// 24212.1-24212.359: (6.28): Object invariant may not hold.
// 24213.1-24213.359: (6.28): Object invariant may not hold.
// 24214.1-24264.2: (6.28): yields_as clause for Array.Queue.T is not transitive
// 24274.1-24306.2: (18.28): yields_as clause for Array.Queue.A is not valid
// 24307.1-24336.2: (18.28): yields_as clause for Array.Queue.A is not reflexive
// 24341.1-24341.359: (18.28): Object invariant may not hold.
// 24342.1-24342.359: (18.28): Object invariant may not hold.
// 24343.1-24343.359: (18.28): Object invariant may not hold.
// 24344.1-24344.359: (18.28): Object invariant may not hold.
// 24345.1-24395.2: (18.28): yields_as clause for Array.Queue.A is not transitive
