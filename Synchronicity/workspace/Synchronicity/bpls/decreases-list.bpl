                                                                                                    
 /*                                                                                                 
                                                                                                    
 /home/artifact/Synchronicity/workspace/Synchronicity/tests/decreases-list.anchor:                  
                                                                                                    
 AST:                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
    class Lock {                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        // return;                                                                                  
      }                                                                                             
                                                                                                    
    }                                                                                               
    class Node {                                                                                    
       int item isLocal(this, tid)                                                                  
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       Node next isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       int order isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
      invariant  this.next != Node.null ==> this.order > this.next.order;                           
      invariant  this.order > 0;                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init(int item,Node next) {                                                               
        assume this.item == 0;                                                                      
        assume this.next == Node.null;                                                              
        assume this.order == 0;                                                                     
        {                                                                                           
          this.item := item;                                                                        
          this.next := next;                                                                        
          boolean tmp1;                                                                             
          tmp1 = next == Node.null;                                                                 
          if (tmp1 /* == next == Node.null */) {                                                    
            int tmp2;                                                                               
            tmp2 = 1;                                                                               
            this.order := tmp2;                                                                     
          } else {                                                                                  
            int tmp3;                                                                               
            int tmp4;                                                                               
            tmp4 := next.order;                                                                     
            tmp3 = tmp4 + 1;                                                                        
            this.order := tmp3;                                                                     
          }                                                                                         
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    class List {                                                                                    
       Node head isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.head == Node.null;                                                              
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      public void traverse() {                                                                      
        {                                                                                           
          Node x;                                                                                   
          x := this.head;                                                                           
          while (true)                                                                              
            invariant x == Node.null || isShared(x);                                                
            invariant x != Node.null ==> (x == Node.null ? 0 : x.order) > (x.next == Node.null ? 0 : x.next.order);
                                                                                                    
            decreases x == Node.null ? 0 : x.order;                                                 
           {                                                                                        
            boolean tmp5;                                                                           
            tmp5 = x != Node.null;                                                                  
            if (!tmp5) break; else {                                                                
                                                                                                    
            }                                                                                       
            {                                                                                       
              x := x.next;                                                                          
            }                                                                                       
          }                                                                                         
        }                                                                                           
        // return;                                                                                  
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Explicit:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Lock {                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    class Node {                                                                                    
       int item isLocal(this, tid)                                                                  
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       Node next isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       int order isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
      invariant  this.next != Node.null ==> this.order > this.next.order;                           
      invariant  this.order > 0;                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init(int item,Node next) {                                                               
        assume this.item == 0;                                                                      
        assume this.next == Node.null;                                                              
        assume this.order == 0;                                                                     
        {                                                                                           
          this.item := item;                                                                        
          this.next := next;                                                                        
          boolean tmp1;                                                                             
          tmp1 = next == Node.null;                                                                 
          if (tmp1 /* == next == Node.null */) {                                                    
            int tmp2;                                                                               
            tmp2 = 1;                                                                               
            this.order := tmp2;                                                                     
          } else {                                                                                  
            int tmp3;                                                                               
            int tmp4;                                                                               
            tmp4 := next.order;                                                                     
            tmp3 = tmp4 + 1;                                                                        
            this.order := tmp3;                                                                     
          }                                                                                         
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    class List {                                                                                    
       Node head isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.head == Node.null;                                                              
        {                                                                                           
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      public void traverse() {                                                                      
        {                                                                                           
          Node x;                                                                                   
          x := this.head;                                                                           
          while (true)                                                                              
            invariant x == Node.null || isShared(x);                                                
            invariant x != Node.null ==> (x == Node.null ? 0 : x.order) > (x.next == Node.null ? 0 : x.next.order);
                                                                                                    
            decreases x == Node.null ? 0 : x.order;                                                 
           {                                                                                        
            boolean tmp5;                                                                           
            tmp5 = x != Node.null;                                                                  
            if (!tmp5) {                                                                            
              break;                                                                                
            } else {                                                                                
                                                                                                    
            }                                                                                       
            {                                                                                       
              x := x.next;                                                                          
            }                                                                                       
          }                                                                                         
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Inlined:                                                                                           
                                                                                                    
                                                                                                    
                                                                                                    
    class Lock {                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    class Node {                                                                                    
       int item isLocal(this, tid)                                                                  
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       Node next isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       int order isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
      invariant  this.next != Node.null ==> this.order > this.next.order;                           
      invariant  this.order > 0;                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init(int item,Node next) {                                                               
        assume this.item == 0;                                                                      
        assume this.next == Node.null;                                                              
        assume this.order == 0;                                                                     
        {                                                                                           
          this.item := item;                                                                        
          this.next := next;                                                                        
          boolean tmp1;                                                                             
          tmp1 = next == Node.null;                                                                 
          if (tmp1 /* == next == Node.null */) {                                                    
            int tmp2;                                                                               
            tmp2 = 1;                                                                               
            this.order := tmp2;                                                                     
          } else {                                                                                  
            int tmp3;                                                                               
            int tmp4;                                                                               
            tmp4 := next.order;                                                                     
            tmp3 = tmp4 + 1;                                                                        
            this.order := tmp3;                                                                     
          }                                                                                         
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    class List {                                                                                    
       Node head isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.head == Node.null;                                                              
        {                                                                                           
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      public void traverse() {                                                                      
        {                                                                                           
          Node x;                                                                                   
          x := this.head;                                                                           
          while (true)                                                                              
            invariant x == Node.null || isShared(x);                                                
            invariant x != Node.null ==> (x == Node.null ? 0 : x.order) > (x.next == Node.null ? 0 : x.next.order);
                                                                                                    
            decreases x == Node.null ? 0 : x.order;                                                 
           {                                                                                        
            boolean tmp5;                                                                           
            tmp5 = x != Node.null;                                                                  
            if (!tmp5) {                                                                            
              break;                                                                                
            } else {                                                                                
                                                                                                    
            }                                                                                       
            {                                                                                       
              x := x.next;                                                                          
            }                                                                                       
          }                                                                                         
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
 Prepared:                                                                                          
                                                                                                    
                                                                                                    
                                                                                                    
    class Lock {                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    class Node {                                                                                    
       int item isLocal(this, tid)                                                                  
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       Node next isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       int order isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
      invariant  this.next != Node.null ==> this.order > this.next.order;                           
      invariant  this.order > 0;                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init(int item,Node next) {                                                               
        assume this.item == 0;                                                                      
        assume this.next == Node.null;                                                              
        assume this.order == 0;                                                                     
        {                                                                                           
          this.item := item;                                                                        
          this.next := next;                                                                        
          boolean tmp1;                                                                             
          tmp1 = next == Node.null;                                                                 
          if (tmp1 /* == next == Node.null */) {                                                    
            int tmp2;                                                                               
            tmp2 = 1;                                                                               
            this.order := tmp2;                                                                     
          } else {                                                                                  
            int tmp3;                                                                               
            int tmp4;                                                                               
            tmp4 := next.order;                                                                     
            tmp3 = tmp4 + 1;                                                                        
            this.order := tmp3;                                                                     
          }                                                                                         
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
    class List {                                                                                    
       Node head isLocal(this, tid)                                                                 
       ? isLocal(this, tid) ? B : E                                                                 
       : isRead ? B : E                                                                             
                                                                                                    
       Tid _lock isLocal(this, tid)                                                                 
       ? isRead                                                                                     
         ? B                                                                                        
         : newValue == tid || newValue == Tid.null ? B : E                                          
       : isRead                                                                                     
         ? this._lock == tid ? R : E                                                                
         : this._lock == Tid.null && newValue == tid                                                
           ? R                                                                                      
           : this._lock == tid && newValue == Tid.null ? L : E !                                    
        yields_as this._lock == tid == (newValue == tid);                                           
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      void init() {                                                                                 
        assume this.head == Node.null;                                                              
        {                                                                                           
          {                                                                                         
            // return;                                                                              
          }                                                                                         
        }                                                                                           
      }                                                                                             
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
      public void traverse() {                                                                      
        {                                                                                           
          Node x;                                                                                   
          x := this.head;                                                                           
          while (true)                                                                              
            invariant x == Node.null || isShared(x);                                                
            invariant x != Node.null ==> (x == Node.null ? 0 : x.order) > (x.next == Node.null ? 0 : x.next.order);
                                                                                                    
            decreases x == Node.null ? 0 : x.order;                                                 
           {                                                                                        
            boolean tmp5;                                                                           
            tmp5 = x != Node.null;                                                                  
            if (!tmp5) {                                                                            
              break;                                                                                
            } else {                                                                                
                                                                                                    
            }                                                                                       
            {                                                                                       
              x := x.next;                                                                          
            }                                                                                       
          }                                                                                         
        }                                                                                           
        {                                                                                           
          // return;                                                                                
        }                                                                                           
      }                                                                                             
                                                                                                    
    }                                                                                               
                                                                                                    
                                                                                                    
 */                                                                                                 
                                                                                                    
//// Background                                                                                     
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * Tid                                                                                              
 */                                                                                                 
 type Tid = int;  // make int so you can iterate over Tids                                          
 const unique Tid.null: Tid;                                                                        
 axiom Tid.null == -1;                                                                              
                                                                                                    
 function {:inline} ValidTid(tid : Tid): bool {                                                     
  tid != Tid.null && tid >= 0                                                                       
 }                                                                                                  
                                                                                                    
 type{:datatype} State;                                                                             
 function{:constructor} NULL(): State;                                                              
 function{:constructor} FRESH(): State;                                                             
 function{:constructor} LOCAL(t: Tid): State;                                                       
 function{:constructor} SHARED(): State;                                                            
                                                                                                    
 function {:inline} isNull(state: State) : bool {                                                   
  state == NULL()                                                                                   
 }                                                                                                  
                                                                                                    
 function {:inline} isFresh(state: State) : bool {                                                  
  state == FRESH()                                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} isShared(state: State) : bool {                                                 
  state == SHARED()                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocal(state: State, t: Tid) : bool {                                          
  state == LOCAL(t)                                                                                 
 }                                                                                                  
                                                                                                    
 function {:inline} isLocalAssignable(state: State, t: Tid) : bool {                                
  state == LOCAL(t) || state == SHARED() || state == NULL()                                         
 }                                                                                                  
                                                                                                    
 function {:inline} isSharedAssignable(state: State) : bool {                                       
  state == SHARED() || state == NULL()                                                              
 }                                                                                                  
                                                                                                    
 function {:inline} isAccessible(state: State, t: Tid) : bool {                                     
  state == LOCAL(t) || state == SHARED()                                                            
 }                                                                                                  
                                                                                                    
 function {:inline} isAllocated(state: State) : bool {                                              
  !isFresh(state) && !isNull(state)                                                                 
 }                                                                                                  
                                                                                                    
                                                                                                    
 function MOD(x:int, y:int): int;                                                                   
                                                                                                    
                                                                                                    
 /*                                                                                                 
 * For triggers                                                                                     
 */                                                                                                 
 function {:inline false} _trigger(i: int): bool {  true  }                                         
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 type Phase;                                                                                        
 const unique PreCommit : Phase;                                                                    
 const unique PostCommit : Phase;                                                                   
 const unique PhaseError : Phase;                                                                   
                                                                                                    
 function {:inline} transition(p: Phase, m: Mover): Phase {                                         
  if (m == _B) then                                                                                 
   p                                                                                                
  else if (m == _R) then                                                                            
   if (p == PreCommit) then                                                                         
    PreCommit                                                                                       
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _L) then                                                                            
   if (p == PostCommit) then                                                                        
    PostCommit                                                                                      
   else if (p == PreCommit) then                                                                    
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else if (m == _N) then                                                                            
   if (p == PreCommit) then                                                                         
    PostCommit                                                                                      
   else                                                                                             
    PhaseError                                                                                      
  else                                                                                              
   PhaseError // m == E or m == I                                                                   
 }                                                                                                  
                                                                                                    
                                                                                                    
 type Mover;                                                                                        
 const unique _B : Mover;                                                                           
 const unique _R : Mover;                                                                           
 const unique _L : Mover;                                                                           
 const unique _N : Mover;                                                                           
 const unique _E : Mover;                                                                           
                                                                                                    
 axiom (forall m : Mover :: m == _B || m == _R || m == _L || m == _N || m == _E);                   
                                                                                                    
 function {:inline} leq(m1: Mover, m2: Mover) : bool {                                              
  if (m1 == _B) then                                                                                
   true                                                                                             
  else if (m1 == _R) then                                                                           
   m2 == _R || m2 == _N || m2 == _E                                                                 
  else if (m1 == _L) then                                                                           
   m2 == _L || m2 == _N || m2 == _E                                                                 
  else if (m1 == _N) then                                                                           
   m2 == _N || m2 == _E                                                                             
  else if (m1 == _E) then                                                                           
   m2 == _E                                                                                         
  else                                                                                              
   false // should never happen...                                                                  
 }                                                                                                  
                                                                                                    
 function {:inline} lt(m1: Mover, m2: Mover) : bool { m1 != m2 && leq(m1, m2) }                     
                                                                                                    
 function {:inline} isError(m : Mover) : bool {                                                     
  m == _E                                                                                           
 }                                                                                                  
                                                                                                    
 function {:inline} eqOrError(m : Mover, n : Mover) : bool {                                        
  m == n || m == _E                                                                                 
 }                                                                                                  
                                                                                                    
 type{:datatype} MoverPath;                                                                         
 function{:constructor} moverPath(m:Mover, p:int):MoverPath;                                        
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// axioms                                                                                         
                                                                                                    
                                                                                                    
//// classes                                                                                        
                                                                                                    
                                                                                                    
/*** Class Decl Lock ***/                                                                           
                                                                                                    
type Lock;                                                                                          
const unique Lock.null: Lock;                                                                       
var Lock._state: [Lock]State;                                                                       
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var Lock._lock: [Lock]Tid;                                                                          
                                                                                                    
function {:inline} ReadEval.Lock._lock(tid: Tid,this : Lock,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(Lock._state[this], tid)) then                                                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Lock._lock[this]==tid)) then                                                                
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Lock._lock[this]==Tid.null)&&(newValue==tid))) then                                        
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Lock._lock[this]==tid)&&(newValue==Tid.null))) then                                       
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Lock._lock(tid: Tid,this : Lock,newValue: Tid,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Lock._state[this], tid)) then                                                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Lock._lock[this]==tid)) then                                                                
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Lock._lock[this]==Tid.null)&&(newValue==tid))) then                                        
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Lock._lock[this]==tid)&&(newValue==Tid.null))) then                                       
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
/*** Class Decl Node ***/                                                                           
                                                                                                    
type Node;                                                                                          
const unique Node.null: Node;                                                                       
var Node._state: [Node]State;                                                                       
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var Node.item: [Node]int;                                                                           
                                                                                                    
function {:inline} ReadEval.Node.item(tid: Tid,this : Node,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isLocal(Node._state[this], tid)) then                                                         
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Node.item(tid: Tid,this : Node,newValue: int,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isLocal(Node._state[this], tid)) then                                                         
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Node.next: [Node]Node;                                                                          
                                                                                                    
function {:inline} ReadEval.Node.next(tid: Tid,this : Node,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Node.null;                                                                        
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isLocal(Node._state[this], tid)) then                                                         
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Node.next(tid: Tid,this : Node,newValue: Node,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isLocal(Node._state[this], tid)) then                                                         
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Node.order: [Node]int;                                                                          
                                                                                                    
function {:inline} ReadEval.Node.order(tid: Tid,this : Node,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := 0;                                                                                
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isLocal(Node._state[this], tid)) then                                                         
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Node.order(tid: Tid,this : Node,newValue: int,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isLocal(Node._state[this], tid)) then                                                         
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var Node._lock: [Node]Tid;                                                                          
                                                                                                    
function {:inline} ReadEval.Node._lock(tid: Tid,this : Node,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Node._lock[this]==tid)) then                                                                
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Node._lock[this]==Tid.null)&&(newValue==tid))) then                                        
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Node._lock[this]==tid)&&(newValue==Tid.null))) then                                       
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.Node._lock(tid: Tid,this : Node,newValue: Tid,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(Node._state[this], tid)) then                                                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((Node._lock[this]==tid)) then                                                                
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((Node._lock[this]==Tid.null)&&(newValue==tid))) then                                        
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((Node._lock[this]==tid)&&(newValue==Tid.null))) then                                       
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
function {:inline} Invariant.Node.1129790(tid: Tid,this : Node,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (bool) {
 ((Node.next[this]!=Node.null)==>(Node.order[this]>Node.order[Node.next[this]]))                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Node.1129797(tid: Tid,this : Node,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (bool) {
 (Node.order[this]>0)                                                                               
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
/*** Class Decl List ***/                                                                           
                                                                                                    
type List;                                                                                          
const unique List.null: List;                                                                       
var List._state: [List]State;                                                                       
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
var List.head: [List]Node;                                                                          
                                                                                                    
function {:inline} ReadEval.List.head(tid: Tid,this : List,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Node.null;                                                                        
 if (isLocal(List._state[this], tid)) then                                                          
  if (isLocal(List._state[this], tid)) then                                                         
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.List.head(tid: Tid,this : List,newValue: Node,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(List._state[this], tid)) then                                                          
  if (isLocal(List._state[this], tid)) then                                                         
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   moverPath(_E, 1)                                                                                 
 else                                                                                               
  if (isRead) then                                                                                  
   moverPath(_B, 2)                                                                                 
  else                                                                                              
   moverPath(_E, 0)                                                                                 
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
var List._lock: [List]Tid;                                                                          
                                                                                                    
function {:inline} ReadEval.List._lock(tid: Tid,this : List,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (MoverPath) {
 (var isRead := true;                                                                               
 (var newValue := Tid.null;                                                                         
 if (isLocal(List._state[this], tid)) then                                                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((List._lock[this]==tid)) then                                                                
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((List._lock[this]==Tid.null)&&(newValue==tid))) then                                        
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((List._lock[this]==tid)&&(newValue==Tid.null))) then                                       
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
 )                                                                                                  
}                                                                                                   
                                                                                                    
function {:inline} WriteEval.List._lock(tid: Tid,this : List,newValue: Tid,Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (MoverPath) {
 (var isRead := false;                                                                              
 if (isLocal(List._state[this], tid)) then                                                          
  if (isRead) then                                                                                  
   moverPath(_B, 3)                                                                                 
  else                                                                                              
   if (((newValue==tid)||(newValue==Tid.null))) then                                                
    moverPath(_B, 5)                                                                                
   else                                                                                             
    moverPath(_E, 1)                                                                                
 else                                                                                               
  if (isRead) then                                                                                  
   if ((List._lock[this]==tid)) then                                                                
    moverPath(_R, 6)                                                                                
   else                                                                                             
    moverPath(_E, 2)                                                                                
  else                                                                                              
   if (((List._lock[this]==Tid.null)&&(newValue==tid))) then                                        
    moverPath(_R, 4)                                                                                
   else                                                                                             
    if (((List._lock[this]==tid)&&(newValue==Tid.null))) then                                       
     moverPath(_L, 8)                                                                               
    else                                                                                            
     moverPath(_E, 0)                                                                               
 )                                                                                                  
}                                                                                                   
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
/////                                                                                               
                                                                                                    
/////                                                                                               
                                                                                                    
                                                                                                    
procedure  List.traverse(tid:Tid, this : List)                                                      
modifies Lock._state;                                                                               
modifies Lock._lock;                                                                                
modifies Node._state;                                                                               
modifies Node.item;                                                                                 
modifies Node.next;                                                                                 
modifies Node.order;                                                                                
modifies Node._lock;                                                                                
modifies List._state;                                                                               
modifies List.head;                                                                                 
modifies List._lock;                                                                                
                                                                                                    
requires ValidTid(tid);                                                                                    // (27.5): Bad tid
requires isShared(List._state[this]);                                                                      // (27.5): this is not global
                                                                                                    
requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129790(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (27.5): Object invariant may not hold.
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129797(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (27.5): Object invariant may not hold.
                                                                                                    
ensures StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
ensures  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129790(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (27.5): Object invariant may not hold.
ensures  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129797(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (27.5): Object invariant may not hold.
{                                                                                                   
 var $pc1135973: Phase;                                                                             
 var Node.next1135976: [Node]Node;                                                                  
 var this1135976_bottom: List;                                                                      
 var $recorded.state1135976: int;                                                                   
 var Lock._lock1135976: [Lock]Tid;                                                                  
 var tmp5: bool;                                                                                    
 var Node.order1135978: [Node]int;                                                                  
 var mover1135955: Mover;                                                                           
 var Lock._lock1135973: [Lock]Tid;                                                                  
 var path1135955: int;                                                                              
 var List._lock1135973: [List]Tid;                                                                  
 var List.head1135955: [List]Node;                                                                  
 var Lock._lock1135955: [Lock]Tid;                                                                  
 var List.head1135973: [List]Node;                                                                  
 var $recorded.state1135978: int;                                                                   
 var this1135955: List;                                                                             
 var this1135978: List;                                                                             
 var moverPath1135955: MoverPath;                                                                   
 var List._state1135978: [List]State;                                                               
 var Node._state1135978: [Node]State;                                                               
 var Node._lock1135973: [Node]Tid;                                                                  
 var Node.order1135976_bottom: [Node]int;                                                           
 var Node._state1135973: [Node]State;                                                               
 var List._state1135976: [List]State;                                                               
 var Node.next1135955: [Node]Node;                                                                  
 var Lock._state1135976_bottom: [Lock]State;                                                        
 var x1135955: Node;                                                                                
 var List._lock1135978: [List]Tid;                                                                  
 var this1135976: List;                                                                             
 var Node.next1135978: [Node]Node;                                                                  
 var x1135976_bottom: Node;                                                                         
 var Node.item1135978: [Node]int;                                                                   
 var Node._lock1135955: [Node]Tid;                                                                  
 var Node.order1135973: [Node]int;                                                                  
 var Node._lock1135978: [Node]Tid;                                                                  
 var List._lock1135976: [List]Tid;                                                                  
 var Node._state1135955: [Node]State;                                                               
 var List.head1135978: [List]Node;                                                                  
 var $decr$loop$1135976$0: int;                                                                     
 var List._lock1135976_bottom: [List]Tid;                                                           
 var $pc1135976_bottom: Phase;                                                                      
 var tid1135976_bottom: Tid;                                                                        
 var Node.order1135976: [Node]int;                                                                  
 var x1135973: Node;                                                                                
 var tid1135976: Tid;                                                                               
 var Lock._state1135955: [Lock]State;                                                               
 var Node._state1135976_bottom: [Node]State;                                                        
 var List.head1135976_bottom: [List]Node;                                                           
 var x: Node;                                                                                       
 var List._lock1135955: [List]Tid;                                                                  
 var $pc1135978: Phase;                                                                             
 var tid1135973: Tid;                                                                               
 var $pc1135955: Phase;                                                                             
 var tid1135978: Tid;                                                                               
 var path1135973: int;                                                                              
 var List._state1135973: [List]State;                                                               
 var Lock._state1135973: [Lock]State;                                                               
 var $pc1135976: Phase;                                                                             
 var Node.item1135976_bottom: [Node]int;                                                            
 var $recorded.state1135976_bottom: int;                                                            
 var $recorded.state1135973: int;                                                                   
 var Node.next1135973: [Node]Node;                                                                  
 var Node.item1135955: [Node]int;                                                                   
 var $recorded.state1135955: int;                                                                   
 var List._state1135976_bottom: [List]State;                                                        
 var Lock._lock1135978: [Lock]Tid;                                                                  
 var Node.item1135976: [Node]int;                                                                   
 var Node.next1135976_bottom: [Node]Node;                                                           
 var Node._state1135976: [Node]State;                                                               
 var List._state1135955: [List]State;                                                               
 var tid1135955: Tid;                                                                               
 var Lock._lock1135976_bottom: [Lock]Tid;                                                           
 var moverPath1135973: MoverPath;                                                                   
 var Lock._state1135976: [Lock]State;                                                               
 var List.head1135976: [List]Node;                                                                  
 var Node._lock1135976_bottom: [Node]Tid;                                                           
 var Node.order1135955: [Node]int;                                                                  
 var Node._lock1135976: [Node]Tid;                                                                  
 var x1135976: Node;                                                                                
 var $decr$init$1135976$0: int;                                                                     
 var phase1135976: Phase;                                                                           
 var tmp51135973: bool;                                                                             
 var this1135973: List;                                                                             
 var mover1135973: Mover;                                                                           
 var Node.item1135973: [Node]int;                                                                   
 var Lock._state1135978: [Lock]State;                                                               
                                                                                                    
 var $pc : Phase;                                                                                   
 $pc := PreCommit;                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 // 28.14: Node x;                                                                                  
                                                                                                    
                                                                                                    
 // 28.14: x := this.head;                                                                          
                                                                                                    
                                                                                                    
 moverPath1135955 := ReadEval.List.head(tid: Tid,this: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 mover1135955 := m#moverPath(moverPath1135955);                                                     
 path1135955 := p#moverPath(moverPath1135955);                                                      
 assume Lock._state1135955 == Lock._state && Lock._lock1135955 == Lock._lock && Node._state1135955 == Node._state && Node.item1135955 == Node.item && Node.next1135955 == Node.next && Node.order1135955 == Node.order && Node._lock1135955 == Node._lock && List._state1135955 == List._state && List.head1135955 == List.head && List._lock1135955 == List._lock && x1135955 == x && this1135955 == this && tid1135955 == tid && $pc1135955 == $pc;
 assume $recorded.state1135955 == 1;                                                                
 if ($pc == PreCommit) {                                                                            
  assume this != List.null;                                                                         
 } else {                                                                                           
  assert this != List.null;                                                                                // (28.14): Cannot have potential null deference in left-mover part.
 }                                                                                                  
                                                                                                    
 $pc := transition($pc, mover1135955);                                                              
 assert $pc != PhaseError;                                                                                 // (28.14): Reduction failure
 x := List.head[this];                                                                              
 assume Lock._state1135976 == Lock._state && Lock._lock1135976 == Lock._lock && Node._state1135976 == Node._state && Node.item1135976 == Node.item && Node.next1135976 == Node.next && Node.order1135976 == Node.order && Node._lock1135976 == Node._lock && List._state1135976 == List._state && List.head1135976 == List.head && List._lock1135976 == List._lock && x1135976 == x && this1135976 == this && tid1135976 == tid;
 assume $recorded.state1135976 == 1;                                                                
                                                                                                    
 // 28.36: while (true)                                                                             
                                                                                                    
 phase1135976 := $pc;                                                                               
 $decr$init$1135976$0 := (if ((x==Node.null)) then 0 else Node.order[x]);                           
 while (true)                                                                                       
                                                                                                    
  invariant ValidTid(tid);                                                                                 // (27.5): Bad tid
  invariant isShared(List._state[this]);                                                                   // (27.5): this is not global
                                                                                                    
  invariant StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
  invariant  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129790(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (28.36): Object invariant may not hold.
  invariant  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129797(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (28.36): Object invariant may not hold.
  invariant ((x==Node.null)||isShared(Node._state[x]));                                             
  invariant ((x!=Node.null)==>((if ((x==Node.null)) then 0 else Node.order[x])>(if ((Node.next[x]==Node.null)) then 0 else Node.order[Node.next[x]])));
  invariant (forall _this : Node :: Invariant.Y_Node.item(tid : Tid, _this, Node.item[_this] ,Lock._state1135976,Lock._lock1135976,Node._state1135976,Node.item1135976,Node.next1135976,Node.order1135976,Node._lock1135976,List._state1135976,List.head1135976,List._lock1135976));       // (28.36): Loop does not preserve yields_as annotation for field item
  invariant (forall _this : Node :: Invariant.Y_Node.next(tid : Tid, _this, Node.next[_this] ,Lock._state1135976,Lock._lock1135976,Node._state1135976,Node.item1135976,Node.next1135976,Node.order1135976,Node._lock1135976,List._state1135976,List.head1135976,List._lock1135976));       // (28.36): Loop does not preserve yields_as annotation for field next
  invariant (forall _this : Node :: Invariant.Y_Node.order(tid : Tid, _this, Node.order[_this] ,Lock._state1135976,Lock._lock1135976,Node._state1135976,Node.item1135976,Node.next1135976,Node.order1135976,Node._lock1135976,List._state1135976,List.head1135976,List._lock1135976));       // (28.36): Loop does not preserve yields_as annotation for field order
  invariant (forall _this : List :: Invariant.Y_List.head(tid : Tid, _this, List.head[_this] ,Lock._state1135976,Lock._lock1135976,Node._state1135976,Node.item1135976,Node.next1135976,Node.order1135976,Node._lock1135976,List._state1135976,List.head1135976,List._lock1135976));       // (28.36): Loop does not preserve yields_as annotation for field head
  invariant ((if ((x==Node.null)) then 0 else Node.order[x]) <= $decr$init$1135976$0 && ((if ((x==Node.null)) then 0 else Node.order[x]) == $decr$init$1135976$0 ==> true));
  invariant phase1135976 == $pc;                                                                           // (28.36): Phase must be invariant at loop head
 {                                                                                                  
  $decr$loop$1135976$0 := (if ((x==Node.null)) then 0 else Node.order[x]);                          
                                                                                                    
  // 28.36: boolean tmp5;                                                                           
                                                                                                    
                                                                                                    
  // 28.36: tmp5 = x != Node.null;                                                                  
                                                                                                    
  tmp5 := (x!=Node.null);                                                                           
  if (!(tmp5)) {                                                                                    
                                                                                                    
   // 28.36: break;                                                                                 
                                                                                                    
   break;                                                                                           
  } else {                                                                                          
  }                                                                                                 
                                                                                                    
  // 28.45: x := x.next;                                                                            
                                                                                                    
                                                                                                    
  moverPath1135973 := ReadEval.Node.next(tid: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
  mover1135973 := m#moverPath(moverPath1135973);                                                    
  path1135973 := p#moverPath(moverPath1135973);                                                     
  assume Lock._state1135973 == Lock._state && Lock._lock1135973 == Lock._lock && Node._state1135973 == Node._state && Node.item1135973 == Node.item && Node.next1135973 == Node.next && Node.order1135973 == Node.order && Node._lock1135973 == Node._lock && List._state1135973 == List._state && List.head1135973 == List.head && List._lock1135973 == List._lock && tmp51135973 == tmp5 && x1135973 == x && this1135973 == this && tid1135973 == tid && $pc1135973 == $pc;
  assume $recorded.state1135973 == 1;                                                               
  if ($pc == PreCommit) {                                                                           
   assume x != Node.null;                                                                           
  } else {                                                                                          
   assert x != Node.null;                                                                                  // (28.45): Cannot have potential null deference in left-mover part.
  }                                                                                                 
                                                                                                    
  $pc := transition($pc, mover1135973);                                                             
  assert $pc != PhaseError;                                                                                // (28.45): Reduction failure
  x := Node.next[x];                                                                                
  assert ((if ((x==Node.null)) then 0 else Node.order[x]) <= $decr$loop$1135976$0 && ((if ((x==Node.null)) then 0 else Node.order[x]) == $decr$loop$1135976$0 ==> false));       // (28.36): loop may not terminate
  assert 0 <= $decr$loop$1135976$0  || (if ((x==Node.null)) then 0 else Node.order[x]) == $decr$loop$1135976$0;       // (28.36): decreasing expression not properly bounded by 0
  assume Lock._state1135976_bottom == Lock._state && Lock._lock1135976_bottom == Lock._lock && Node._state1135976_bottom == Node._state && Node.item1135976_bottom == Node.item && Node.next1135976_bottom == Node.next && Node.order1135976_bottom == Node.order && Node._lock1135976_bottom == Node._lock && List._state1135976_bottom == List._state && List.head1135976_bottom == List.head && List._lock1135976_bottom == List._lock && x1135976_bottom == x && this1135976_bottom == this && tid1135976_bottom == tid;
  assume $recorded.state1135976_bottom == 1;                                                        
  assert phase1135976 == $pc;                                                                              // (28.36): Phase must be invariant at loop head
 }                                                                                                  
                                                                                                    
 // 27.28: // return;                                                                               
                                                                                                    
 assume Lock._state1135978 == Lock._state && Lock._lock1135978 == Lock._lock && Node._state1135978 == Node._state && Node.item1135978 == Node.item && Node.next1135978 == Node.next && Node.order1135978 == Node.order && Node._lock1135978 == Node._lock && List._state1135978 == List._state && List.head1135978 == List.head && List._lock1135978 == List._lock && this1135978 == this && tid1135978 == tid;
 assume $recorded.state1135978 == 1;                                                                
 assert  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129790(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (27.28): Object invariant may not hold.
 assert  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129797(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (27.28): Object invariant may not hold.
 return;                                                                                            
}                                                                                                   
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
//// Globals                                                                                        
                                                                                                    
                                                                                                    
//// State Invariant                                                                                
                                                                                                    
 function {:inline} StateInvariant(Lock._state: [Lock]State,Lock._lock: [Lock]Tid,Node._state: [Node]State,Node.item: [Node]int,Node.next: [Node]Node,Node.order: [Node]int,Node._lock: [Node]Tid,List._state: [List]State,List.head: [List]Node,List._lock: [List]Tid) returns (bool) {
  true &&                                                                                           
  (forall _i: Lock  :: _i == Lock.null <==> isNull(Lock._state[_i])) &&                             
  (forall _i: Node  :: _i == Node.null <==> isNull(Node._state[_i])) &&                             
  (forall _i: List  :: _i == List.null <==> isNull(List._state[_i])) &&                             
  (forall _i: Node ::  (isShared(Node._state[_i]) ==> isSharedAssignable(Node._state[Node.next[_i]]))) &&
  (forall _i: Node ::  (forall _t: Tid :: (ValidTid(_t) && isLocal(Node._state[_i],_t) ==> isLocalAssignable(Node._state[Node.next[_i]], _t)))) &&
  (forall _i: List ::  (isShared(List._state[_i]) ==> isSharedAssignable(Node._state[List.head[_i]]))) &&
  (forall _i: List ::  (forall _t: Tid :: (ValidTid(_t) && isLocal(List._state[_i],_t) ==> isLocalAssignable(Node._state[List.head[_i]], _t)))) &&
  _trigger(0) &&                                                                                    
  _trigger(1) &&                                                                                    
  _trigger(2) &&                                                                                    
  _trigger(3)                                                                                       
 }                                                                                                  
//// Spec Checks                                                                                    
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Node.item(t: Tid, u: Tid, v: int, w: int, x: Node)           
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Node.item[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Node.item(u: Tid,x: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (5.5): Node.item failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Node.item(t: Tid, u: Tid, v: int, w: int, x: Node)            
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Node.item[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Node.item(u: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (5.5): Node.item failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Node.item(t: Tid, u: Tid, v: int, w: int, x: Node)            
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Node.item[x];                                                                          
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Node.item[x] := havocValue;                                                                        
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Node.item(u: Tid,x: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (5.5): Node.item failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Node.item(t: Tid, u: Tid, v: int, w: int, x: Node)             
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Node.item[x];                                                                          
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Node.item(u: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (5.5): Node.item failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Node.item(t: Tid, u: Tid, v: int, w: int, x: Node)                 
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Node.item(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Node.item(u: Tid,x: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (5.5): Node.item failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Node.item(t: Tid, u: Tid, v: int, w: int, x: Node)                  
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == Node.item[x];                                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Node.item(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Node.item[x] := havocValue;                                                                        
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Node.item(u: Tid,x: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (5.5): Node.item failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Node.next(t: Tid, u: Tid, v: Node, w: Node, x: Node)         
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Node.next[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Node.next(u: Tid,x: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (6.5): Node.next failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Node.next(t: Tid, u: Tid, v: Node, w: Node, x: Node)          
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Node.next[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Node.next(u: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (6.5): Node.next failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Node.next(t: Tid, u: Tid, v: Node, w: Node, x: Node)          
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Node;                                                                             
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume w == Node.next[x];                                                                          
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Node.next[x] := havocValue;                                                                        
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Node.next(u: Tid,x: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (6.5): Node.next failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Node.next(t: Tid, u: Tid, v: Node, w: Node, x: Node)           
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Node;                                                                             
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume w == Node.next[x];                                                                          
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Node.next(u: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (6.5): Node.next failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Node.next(t: Tid, u: Tid, v: Node, w: Node, x: Node)               
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Node.next(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Node.next(u: Tid,x: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (6.5): Node.next failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Node.next(t: Tid, u: Tid, v: Node, w: Node, x: Node)                
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Node;                                                                             
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
 assume w == Node.next[x];                                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Node.next(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Node.next[x] := havocValue;                                                                        
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Node.next(u: Tid,x: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (6.5): Node.next failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.Node.order(t: Tid, u: Tid, v: int, w: int, x: Node)          
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Node.order[x] := v;                                                                                
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Node.order(u: Tid,x: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (7.5): Node.order failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.Node.order(t: Tid, u: Tid, v: int, w: int, x: Node)           
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 Node.order[x] := v;                                                                                
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.Node.order(u: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (7.5): Node.order failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.Node.order(t: Tid, u: Tid, v: int, w: int, x: Node)           
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Node.order[x];                                                                         
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 Node.order[x] := havocValue;                                                                       
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.Node.order(u: Tid,x: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (7.5): Node.order failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.Node.order(t: Tid, u: Tid, v: int, w: int, x: Node)            
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : int;                                                                              
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume w == Node.order[x];                                                                         
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.Node.order(u: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (7.5): Node.order failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.Node.order(t: Tid, u: Tid, v: int, w: int, x: Node)                
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Node.order(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.Node.order(u: Tid,x: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (7.5): Node.order failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.Node.order(t: Tid, u: Tid, v: int, w: int, x: Node)                 
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[x], u);                                                          
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : int;                                                                              
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
 assume w == Node.order[x];                                                                         
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.Node.order(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 Node.order[x] := havocValue;                                                                       
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.Node.order(u: Tid,x: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (7.5): Node.order failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.RightMover.List.head(t: Tid, u: Tid, v: Node, w: Node, x: List)         
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(List._state[x], u);                                                          
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 List.head[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.List.head(u: Tid,x: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (25.5): List.head failed Write-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.RightMover.List.head(t: Tid, u: Tid, v: Node, w: Node, x: List)          
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(List._state[x], u);                                                          
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_R);                                                                    
                                                                                                    
 List.head[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;                                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _readByU := ReadEval.List.head(u: Tid,x: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assert _readByU_Mover == _E;                                                                              // (25.5): List.head failed Write-Read Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteWrite.LeftMover.List.head(t: Tid, u: Tid, v: Node, w: Node, x: List)          
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(List._state[x], u);                                                          
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Node;                                                                             
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume w == List.head[x];                                                                          
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
                                                                                                    
 List.head[x] := havocValue;                                                                        
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;   // H[p.f = _]                                                  
 // Do we need to share writeByT.value if it is local?                                              
 _writeByU := WriteEval.List.head(u: Tid,x: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assert isError(_writeByU_Mover);                                                                          // (25.5): List.head failed Write-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckWriteRead.LeftMover.List.head(t: Tid, u: Tid, v: Node, w: Node, x: List)           
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(List._state[x], u);                                                          
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var havocValue : Node;                                                                             
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume w == List.head[x];                                                                          
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByU := ReadEval.List.head(u: Tid,x: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H                                                             
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
 assume !isError(_writeByT_Mover);                                                                  
 assume leq(_writeByT_Mover,_L);                                                                    
                                                                                                    
 assert _readByU_Mover == _E;                                                                              // (25.5): List.head failed Write-Read Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.RightMover.List.head(t: Tid, u: Tid, v: Node, w: Node, x: List)               
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(List._state[x], u);                                                          
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.List.head(t: Tid,x: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1;  // H                                                            
 _writeByU := WriteEval.List.head(u: Tid,x: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_R);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (25.5): List.head failed Read-Write Right-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure _CheckRead.LeftMover.List.head(t: Tid, u: Tid, v: Node, w: Node, x: List)                
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(List._state[x], u);                                                          
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var havocValue : Node;                                                                             
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
 assume w == List.head[x];                                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && x_pre == x;
 assume $recorded.state_pre == 1;  // H                                                             
 _readByT := ReadEval.List.head(t: Tid,x: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 List.head[x] := havocValue;                                                                        
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && x_post == x;
 assume $recorded.state_post == 1; // H[p.f := _]                                                   
 _writeByU := WriteEval.List.head(u: Tid,x: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 assume leq(_readByT_Mover,_L);                                                                     
                                                                                                    
 assert isError(_writeByU_Mover);                                                                          // (25.5): List.head failed Read-Write Left-Mover Check
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.item.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to Node.item (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Node.item is not Write-Write Stable with respect to Node.item (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to Node.item (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.item.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to Node.item (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.item.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to Node.item (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to Node.item (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.item.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.item(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[y] := w;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.item(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.item is not Read-Write Stable with respect to Node.item (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.item is not Read-Write Stable with respect to Node.item (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.item is not Read-Write Stable with respect to Node.item (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.item.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.item(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.item(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.item is not Write-Read Stable with respect to Node.item (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.item is not Write-Read Stable with respect to Node.item (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Node.item is not Write-Read Stable with respect to Node.item (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.item.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to Node.item (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Node.next is not Write-Write Stable with respect to Node.item (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to Node.item (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.item.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to Node.next (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.item.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to Node.next (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to Node.next (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.item.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.item(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[y] := w;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.item(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.item is not Read-Write Stable with respect to Node.next (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.item is not Read-Write Stable with respect to Node.next (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.item is not Read-Write Stable with respect to Node.next (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.item.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.next(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.next(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Node.next is not Write-Read Stable with respect to Node.item (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Node.next is not Write-Read Stable with respect to Node.item (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Node.next is not Write-Read Stable with respect to Node.item (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.item.Node.order(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to Node.item (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (7.5): Node.order is not Write-Write Stable with respect to Node.item (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to Node.item (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.item.Node.order(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 Node.order[y] := w;                                                                                
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to Node.order (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.item.Node.order(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 Node.order[y] := w;                                                                                
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to Node.order (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to Node.order (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.item.Node.order(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.item(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.order[y] := w;                                                                                
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.item(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.item is not Read-Write Stable with respect to Node.order (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.item is not Read-Write Stable with respect to Node.order (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.item is not Read-Write Stable with respect to Node.order (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.item.Node.order(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.order(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.order(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Node.order is not Write-Read Stable with respect to Node.item (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Node.order is not Write-Read Stable with respect to Node.item (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (7.5): Node.order is not Write-Read Stable with respect to Node.item (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.item.List.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to Node.item (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (25.5): List.head is not Write-Write Stable with respect to Node.item (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to Node.item (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.item.List.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var y_mid: List;                                                                                   
 var v_mid: int;                                                                                    
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 List.head[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to List.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.item.List.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var y_mid: List;                                                                                   
 var v_mid: int;                                                                                    
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.item[x];                                                                              
 Node.item[x] := v;                                                                                 
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.item[x] := tmpV;                                                                              
 List.head[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to List.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to List.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.item.List.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.item(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 List.head[y] := w;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.item(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.item is not Read-Write Stable with respect to List.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.item is not Read-Write Stable with respect to List.head (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (5.5): Node.item is not Read-Write Stable with respect to List.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.item.List.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies Node.item;                                                                                
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.List.head(u: Tid,y: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.item(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.List.head(u: Tid,y: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (25.5): List.head is not Write-Read Stable with respect to Node.item (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (25.5): List.head is not Write-Read Stable with respect to Node.item (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (25.5): List.head is not Write-Read Stable with respect to Node.item (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.next.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to Node.next (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Node.item is not Write-Write Stable with respect to Node.next (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to Node.next (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.next.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to Node.item (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.next.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to Node.item (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to Node.item (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.next.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.next(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[y] := w;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.next(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Node.next is not Read-Write Stable with respect to Node.item (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Node.next is not Read-Write Stable with respect to Node.item (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Node.next is not Read-Write Stable with respect to Node.item (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.next.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.item(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.item(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.item is not Write-Read Stable with respect to Node.next (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.item is not Write-Read Stable with respect to Node.next (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Node.item is not Write-Read Stable with respect to Node.next (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.next.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to Node.next (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Node.next is not Write-Write Stable with respect to Node.next (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to Node.next (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.next.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to Node.next (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.next.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to Node.next (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to Node.next (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.next.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.next(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[y] := w;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.next(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Node.next is not Read-Write Stable with respect to Node.next (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Node.next is not Read-Write Stable with respect to Node.next (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Node.next is not Read-Write Stable with respect to Node.next (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.next.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.next(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.next(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Node.next is not Write-Read Stable with respect to Node.next (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Node.next is not Write-Read Stable with respect to Node.next (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Node.next is not Write-Read Stable with respect to Node.next (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.next.Node.order(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to Node.next (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (7.5): Node.order is not Write-Write Stable with respect to Node.next (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to Node.next (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.next.Node.order(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 Node.order[y] := w;                                                                                
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to Node.order (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.next.Node.order(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 Node.order[y] := w;                                                                                
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to Node.order (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to Node.order (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.next.Node.order(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.next(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.order[y] := w;                                                                                
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.next(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Node.next is not Read-Write Stable with respect to Node.order (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Node.next is not Read-Write Stable with respect to Node.order (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Node.next is not Read-Write Stable with respect to Node.order (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.next.Node.order(t: Tid, u: Tid, v: Node, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.order(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.order(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Node.order is not Write-Read Stable with respect to Node.next (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Node.order is not Write-Read Stable with respect to Node.next (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (7.5): Node.order is not Write-Read Stable with respect to Node.next (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.next.List.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to Node.next (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (25.5): List.head is not Write-Write Stable with respect to Node.next (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to Node.next (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.next.List.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var y_mid: List;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 List.head[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to List.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.next.List.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var y_mid: List;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.next[x];                                                                              
 Node.next[x] := v;                                                                                 
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.next[x] := tmpV;                                                                              
 List.head[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to List.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to List.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.next.List.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.next(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 List.head[y] := w;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.next(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Node.next is not Read-Write Stable with respect to List.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Node.next is not Read-Write Stable with respect to List.head (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (6.5): Node.next is not Read-Write Stable with respect to List.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.next.List.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: Node, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies Node.next;                                                                                
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.List.head(u: Tid,y: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.next(t: Tid,x: Node,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.List.head(u: Tid,y: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (25.5): List.head is not Write-Read Stable with respect to Node.next (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (25.5): List.head is not Write-Read Stable with respect to Node.next (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (25.5): List.head is not Write-Read Stable with respect to Node.next (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.order.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.order[x] := v;                                                                                
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to Node.order (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Node.item is not Write-Write Stable with respect to Node.order (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to Node.order (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.order.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.order[x];                                                                             
 Node.order[x] := v;                                                                                
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.order[x] := tmpV;                                                                             
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to Node.item (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.order.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.order[x];                                                                             
 Node.order[x] := v;                                                                                
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.order[x] := tmpV;                                                                             
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to Node.item (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to Node.item (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.order.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.order(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[y] := w;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.order(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Node.order is not Read-Write Stable with respect to Node.item (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Node.order is not Read-Write Stable with respect to Node.item (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Node.order is not Read-Write Stable with respect to Node.item (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.order.Node.item(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.item(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.order[x] := v;                                                                                
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.item(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.item is not Write-Read Stable with respect to Node.order (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.item is not Write-Read Stable with respect to Node.order (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Node.item is not Write-Read Stable with respect to Node.order (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.order.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.order[x] := v;                                                                                
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to Node.order (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Node.next is not Write-Write Stable with respect to Node.order (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to Node.order (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.order.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.order[x];                                                                             
 Node.order[x] := v;                                                                                
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.order[x] := tmpV;                                                                             
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to Node.next (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.order.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.order[x];                                                                             
 Node.order[x] := v;                                                                                
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.order[x] := tmpV;                                                                             
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to Node.next (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to Node.next (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.order.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.order(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[y] := w;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.order(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Node.order is not Read-Write Stable with respect to Node.next (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Node.order is not Read-Write Stable with respect to Node.next (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Node.order is not Read-Write Stable with respect to Node.next (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.order.Node.next(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.next(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.order[x] := v;                                                                                
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.next(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Node.next is not Write-Read Stable with respect to Node.order (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Node.next is not Write-Read Stable with respect to Node.order (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Node.next is not Write-Read Stable with respect to Node.order (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.order.Node.order(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.order[x] := v;                                                                                
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to Node.order (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (7.5): Node.order is not Write-Write Stable with respect to Node.order (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to Node.order (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.order.Node.order(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.order[x];                                                                             
 Node.order[x] := v;                                                                                
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.order[x] := tmpV;                                                                             
 Node.order[y] := w;                                                                                
 _writeByTPost := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to Node.order (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.order.Node.order(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var v_mid: int;                                                                                    
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.order[x];                                                                             
 Node.order[x] := v;                                                                                
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.order[x] := tmpV;                                                                             
 Node.order[y] := w;                                                                                
 _writeByTPost := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to Node.order (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to Node.order (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.order.Node.order(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.order(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.order[y] := w;                                                                                
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.order(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Node.order is not Read-Write Stable with respect to Node.order (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Node.order is not Read-Write Stable with respect to Node.order (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Node.order is not Read-Write Stable with respect to Node.order (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.order.Node.order(t: Tid, u: Tid, v: int, w: int, w0: int, x: Node, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.order(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.order[x] := v;                                                                                
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.order(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Node.order is not Write-Read Stable with respect to Node.order (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Node.order is not Write-Read Stable with respect to Node.order (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (7.5): Node.order is not Write-Read Stable with respect to Node.order (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.Node.order.List.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.order[x] := v;                                                                                
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to Node.order (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (25.5): List.head is not Write-Write Stable with respect to Node.order (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to Node.order (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.Node.order.List.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var y_mid: List;                                                                                   
 var v_mid: int;                                                                                    
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := Node.order[x];                                                                             
 Node.order[x] := v;                                                                                
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 Node.order[x] := tmpV;                                                                             
 List.head[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to List.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.Node.order.List.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : int;                                                                                    
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var y_mid: List;                                                                                   
 var v_mid: int;                                                                                    
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var x_mid: Node;                                                                                   
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := Node.order[x];                                                                             
 Node.order[x] := v;                                                                                
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 Node.order[x] := tmpV;                                                                             
 List.head[y] := w;                                                                                 
 _writeByTPost := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to List.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to List.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.Node.order.List.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.Node.order(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 List.head[y] := w;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.Node.order(t: Tid,x: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Node.order is not Read-Write Stable with respect to List.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Node.order is not Read-Write Stable with respect to List.head (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (7.5): Node.order is not Read-Write Stable with respect to List.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.Node.order.List.head(t: Tid, u: Tid, v: int, w: Node, w0: Node, x: Node, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(Node._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies Node.order;                                                                               
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var x_pre: Node;                                                                                   
 var v_pre: int;                                                                                    
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var x_post: Node;                                                                                  
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var v_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.List.head(u: Tid,y: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.Node.order(t: Tid,x: Node,v: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.order[x] := v;                                                                                
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.List.head(u: Tid,y: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (25.5): List.head is not Write-Read Stable with respect to Node.order (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (25.5): List.head is not Write-Read Stable with respect to Node.order (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (25.5): List.head is not Write-Read Stable with respect to Node.order (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.List.head.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: List, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 List.head[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to List.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (5.5): Node.item is not Write-Write Stable with respect to List.head (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (5.5): Node.item is not Write-Write Stable with respect to List.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.List.head.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: List, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var x_mid: List;                                                                                   
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := List.head[x];                                                                              
 List.head[x] := v;                                                                                 
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 List.head[x] := tmpV;                                                                              
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to Node.item (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.List.head.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: List, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var x_mid: List;                                                                                   
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := List.head[x];                                                                              
 List.head[x] := v;                                                                                 
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 List.head[x] := tmpV;                                                                              
 Node.item[y] := w;                                                                                 
 _writeByTPost := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to Node.item (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to Node.item (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.List.head.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: List, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.List.head(t: Tid,x: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.item(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.item[y] := w;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.List.head(t: Tid,x: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (25.5): List.head is not Read-Write Stable with respect to Node.item (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (25.5): List.head is not Read-Write Stable with respect to Node.item (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (25.5): List.head is not Read-Write Stable with respect to Node.item (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.List.head.Node.item(t: Tid, u: Tid, v: Node, w: int, w0: int, x: List, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies Node.item;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.item(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 List.head[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.item(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.item is not Write-Read Stable with respect to List.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (5.5): Node.item is not Write-Read Stable with respect to List.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (5.5): Node.item is not Write-Read Stable with respect to List.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.List.head.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: List, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 List.head[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to List.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (6.5): Node.next is not Write-Write Stable with respect to List.head (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (6.5): Node.next is not Write-Write Stable with respect to List.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.List.head.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: List, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var x_mid: List;                                                                                   
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := List.head[x];                                                                              
 List.head[x] := v;                                                                                 
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 List.head[x] := tmpV;                                                                              
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to Node.next (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.List.head.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: List, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var x_mid: List;                                                                                   
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := List.head[x];                                                                              
 List.head[x] := v;                                                                                 
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 List.head[x] := tmpV;                                                                              
 Node.next[y] := w;                                                                                 
 _writeByTPost := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to Node.next (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to Node.next (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.List.head.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: List, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.List.head(t: Tid,x: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.next(u: Tid,y: Node,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.next[y] := w;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.List.head(t: Tid,x: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (25.5): List.head is not Read-Write Stable with respect to Node.next (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (25.5): List.head is not Read-Write Stable with respect to Node.next (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (25.5): List.head is not Read-Write Stable with respect to Node.next (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.List.head.Node.next(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: List, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies Node.next;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.next(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 List.head[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.next(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Node.next is not Write-Read Stable with respect to List.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (6.5): Node.next is not Write-Read Stable with respect to List.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (6.5): Node.next is not Write-Read Stable with respect to List.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.List.head.Node.order(t: Tid, u: Tid, v: Node, w: int, w0: int, x: List, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 List.head[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to List.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (7.5): Node.order is not Write-Write Stable with respect to List.head (case A.2)
 assert (true && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (7.5): Node.order is not Write-Write Stable with respect to List.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.List.head.Node.order(t: Tid, u: Tid, v: Node, w: int, w0: int, x: List, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var x_mid: List;                                                                                   
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := List.head[x];                                                                              
 List.head[x] := v;                                                                                 
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 List.head[x] := tmpV;                                                                              
 Node.order[y] := w;                                                                                
 _writeByTPost := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to Node.order (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.List.head.Node.order(t: Tid, u: Tid, v: Node, w: int, w0: int, x: List, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var x_mid: List;                                                                                   
 var u_mid: Tid;                                                                                    
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var w_mid: int;                                                                                    
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var List._state_mid: [List]State;                                                                  
 var y_mid: Node;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var w0_mid: int;                                                                                   
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := List.head[x];                                                                              
 List.head[x] := v;                                                                                 
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 List.head[x] := tmpV;                                                                              
 Node.order[y] := w;                                                                                
 _writeByTPost := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to Node.order (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to Node.order (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.List.head.Node.order(t: Tid, u: Tid, v: Node, w: int, w0: int, x: List, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByT := ReadEval.List.head(t: Tid,x: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.Node.order(u: Tid,y: Node,w: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 Node.order[y] := w;                                                                                
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.List.head(t: Tid,x: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (25.5): List.head is not Read-Write Stable with respect to Node.order (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (25.5): List.head is not Read-Write Stable with respect to Node.order (case H)
 assert (true && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (25.5): List.head is not Read-Write Stable with respect to Node.order (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.List.head.Node.order(t: Tid, u: Tid, v: Node, w: int, w0: int, x: List, y: Node)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(Node._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies Node.order;                                                                               
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var w0_pre: int;                                                                                   
 var List.head_pre: [List]Node;                                                                     
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var y_pre: Node;                                                                                   
 var w_pre: int;                                                                                    
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var y_post: Node;                                                                                  
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var w0_post: int;                                                                                  
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var List.head_post: [List]Node;                                                                    
 var w_post: int;                                                                                   
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
                                                                                                    
                                                                                                    
 _readByU := ReadEval.Node.order(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 List.head[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.Node.order(u: Tid,y: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Node.order is not Write-Read Stable with respect to List.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (7.5): Node.order is not Write-Read Stable with respect to List.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (7.5): Node.order is not Write-Read Stable with respect to List.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.A.List.head.List.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: List, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 List.head[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _writeByUPost := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _E)) ==> ((_writeByU_Mover == _writeByUPost_Mover || _writeByU_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to List.head (case A.1)
 assert (leq(_writeByT_Mover, _N) && !leq(_writeByUPost_Mover, _L)) ==> (!leq(_writeByU_Mover, _L));       // (25.5): List.head is not Write-Write Stable with respect to List.head (case A.2)
 assert (x != y && leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByUPost_Mover == _writeByUPost_Mover || _writeByUPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to List.head (case A.3)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 procedure Stable.Check.C.List.head.List.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: List, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var x_mid: List;                                                                                   
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var y_mid: List;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 tmpV := List.head[x];                                                                              
 List.head[x] := v;                                                                                 
                                                                                                    
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 List.head[x] := tmpV;                                                                              
 List.head[y] := w;                                                                                 
 _writeByTPost := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to List.head (case C)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.DE.List.head.List.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: List, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var tmpV : Node;                                                                                   
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _writeByUPost : MoverPath;                                                                     
 var _writeByUPost_Mover : Mover;                                                                   
 var _writeByUPost_Path : int;                                                                      
 var _writeByTPost : MoverPath;                                                                     
 var _writeByTPost_Mover : Mover;                                                                   
 var _writeByTPost_Path : int;                                                                      
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Node.next_mid: [Node]Node;                                                                     
 var t_mid: Tid;                                                                                    
 var x_mid: List;                                                                                   
 var u_mid: Tid;                                                                                    
 var w_mid: Node;                                                                                   
 var Node.order_mid: [Node]int;                                                                     
 var $recorded.state_mid: int;                                                                      
 var Lock._state_mid: [Lock]State;                                                                  
 var List._lock_mid: [List]Tid;                                                                     
 var v_mid: Node;                                                                                   
 var Lock._lock_mid: [Lock]Tid;                                                                     
 var w0_mid: Node;                                                                                  
 var List._state_mid: [List]State;                                                                  
 var y_mid: List;                                                                                   
 var Node._lock_mid: [Node]Tid;                                                                     
 var Node._state_mid: [Node]State;                                                                  
 var $pc_mid: Phase;                                                                                
 var Node.item_mid: [Node]int;                                                                      
 var List.head_mid: [List]Node;                                                                     
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 tmpV := List.head[x];                                                                              
 List.head[x] := v;                                                                                 
 assume Lock._state_mid == Lock._state && Lock._lock_mid == Lock._lock && Node._state_mid == Node._state && Node.item_mid == Node.item && Node.next_mid == Node.next && Node.order_mid == Node.order && Node._lock_mid == Node._lock && List._state_mid == List._state && List.head_mid == List.head && List._lock_mid == List._lock && t_mid == t && u_mid == u && v_mid == v && w_mid == w && w0_mid == w0 && x_mid == x && y_mid == y;
 assume $recorded.state_mid == 1;                                                                   
                                                                                                    
 _writeByUPost := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByUPost_Mover := m#moverPath(_writeByUPost);                                                 
 _writeByUPost_Path := p#moverPath(_writeByUPost);                                                  
                                                                                                    
 List.head[x] := tmpV;                                                                              
 List.head[y] := w;                                                                                 
 _writeByTPost := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByTPost_Mover := m#moverPath(_writeByTPost);                                                 
 _writeByTPost_Path := p#moverPath(_writeByTPost);                                                  
                                                                                                    
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_writeByUPost_Mover, _N)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to List.head (case D)
 assert (leq(_writeByT_Mover, _N) && leq(_writeByUPost_Mover, _L)) ==> ((_writeByTPost_Mover == _writeByT_Mover || _writeByTPost_Mover == _E));       // (25.5): List.head is not Write-Write Stable with respect to List.head (case R)
                                                                                                    
 }                                                                                                  
                                                                                                    
                                                                                                    
 procedure Stable.Check.FHI.List.head.List.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: List, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByU : MoverPath;                                                                         
 var _writeByU_Mover : Mover;                                                                       
 var _writeByU_Path : int;                                                                          
 var _readByT : MoverPath;                                                                          
 var _readByT_Mover : Mover;                                                                        
 var _readByT_Path : int;                                                                           
 var _readByTPost : MoverPath;                                                                      
 var _readByTPost_Mover : Mover;                                                                    
 var _readByTPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByT := ReadEval.List.head(t: Tid,x: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByT_Mover := m#moverPath(_readByT);                                                           
 _readByT_Path := p#moverPath(_readByT);                                                            
 _writeByU := WriteEval.List.head(u: Tid,y: List,w: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByU_Mover := m#moverPath(_writeByU);                                                         
 _writeByU_Path := p#moverPath(_writeByU);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 List.head[y] := w;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByTPost := ReadEval.List.head(t: Tid,x: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByTPost_Mover := m#moverPath(_readByTPost);                                                   
 _readByTPost_Path := p#moverPath(_readByTPost);                                                    
                                                                                                    
 assert (leq(_readByT_Mover, _R) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (25.5): List.head is not Read-Write Stable with respect to List.head (case F)
 assert (leq(_readByT_Mover, _E) && leq(_writeByU_Mover, _L)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (25.5): List.head is not Read-Write Stable with respect to List.head (case H)
 assert (x != y && leq(_readByT_Mover, _N) && leq(_writeByU_Mover, _N)) ==> ((_readByTPost_Mover == _readByT_Mover || _readByTPost_Mover == _E));       // (25.5): List.head is not Read-Write Stable with respect to List.head (case I)
                                                                                                    
 }                                                                                                  
                                                                                                    
 procedure Stable.Check.JKL.List.head.List.head(t: Tid, u: Tid, v: Node, w: Node, w0: Node, x: List, y: List)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(t);                                                                              
 requires ValidTid(u);                                                                              
 requires t != u;                                                                                   
 requires isAccessible(List._state[x], t);                                                          
 requires isAccessible(List._state[y], u);                                                          
 modifies List.head;                                                                                
 modifies List.head;                                                                                
                                                                                                    
 {                                                                                                  
 var _writeByT : MoverPath;                                                                         
 var _writeByT_Mover : Mover;                                                                       
 var _writeByT_Path : int;                                                                          
 var _readByU : MoverPath;                                                                          
 var _readByU_Mover : Mover;                                                                        
 var _readByU_Path : int;                                                                           
 var _readByUPost : MoverPath;                                                                      
 var _readByUPost_Mover : Mover;                                                                    
 var _readByUPost_Path : int;                                                                       
 var Node._lock_pre: [Node]Tid;                                                                     
 var $recorded.state_pre: int;                                                                      
 var u_pre: Tid;                                                                                    
 var List.head_pre: [List]Node;                                                                     
 var y_pre: List;                                                                                   
 var Node.order_pre: [Node]int;                                                                     
 var Node._state_pre: [Node]State;                                                                  
 var v_pre: Node;                                                                                   
 var Lock._lock_pre: [Lock]Tid;                                                                     
 var List._state_pre: [List]State;                                                                  
 var $pc_pre: Phase;                                                                                
 var w0_pre: Node;                                                                                  
 var w_pre: Node;                                                                                   
 var Node.next_pre: [Node]Node;                                                                     
 var x_pre: List;                                                                                   
 var Lock._state_pre: [Lock]State;                                                                  
 var Node.item_pre: [Node]int;                                                                      
 var List._lock_pre: [List]Tid;                                                                     
 var t_pre: Tid;                                                                                    
                                                                                                    
 var Lock._lock_post: [Lock]Tid;                                                                    
 var Lock._state_post: [Lock]State;                                                                 
 var $recorded.state_post: int;                                                                     
 var Node.item_post: [Node]int;                                                                     
 var List._lock_post: [List]Tid;                                                                    
 var t_post: Tid;                                                                                   
 var Node.order_post: [Node]int;                                                                    
 var $pc_post: Phase;                                                                               
 var Node._lock_post: [Node]Tid;                                                                    
 var x_post: List;                                                                                  
 var w0_post: Node;                                                                                 
 var List.head_post: [List]Node;                                                                    
 var Node._state_post: [Node]State;                                                                 
 var Node.next_post: [Node]Node;                                                                    
 var y_post: List;                                                                                  
 var List._state_post: [List]State;                                                                 
 var v_post: Node;                                                                                  
 var u_post: Tid;                                                                                   
 var w_post: Node;                                                                                  
                                                                                                    
                                                                                                    
 _readByU := ReadEval.List.head(u: Tid,y: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByU_Mover := m#moverPath(_readByU);                                                           
 _readByU_Path := p#moverPath(_readByU);                                                            
 _writeByT := WriteEval.List.head(t: Tid,x: List,v: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _writeByT_Mover := m#moverPath(_writeByT);                                                         
 _writeByT_Path := p#moverPath(_writeByT);                                                          
                                                                                                    
 assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && t_pre == t && u_pre == u && v_pre == v && w_pre == w && w0_pre == w0 && x_pre == x && y_pre == y;
 assume $recorded.state_pre == 1;                                                                   
 List.head[x] := v;                                                                                 
 assume Lock._state_post == Lock._state && Lock._lock_post == Lock._lock && Node._state_post == Node._state && Node.item_post == Node.item && Node.next_post == Node.next && Node.order_post == Node.order && Node._lock_post == Node._lock && List._state_post == List._state && List.head_post == List.head && List._lock_post == List._lock && t_post == t && u_post == u && v_post == v && w_post == w && w0_post == w0 && x_post == x && y_post == y;
 assume $recorded.state_post == 1;                                                                  
                                                                                                    
 _readByUPost := ReadEval.List.head(u: Tid,y: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock);
 _readByUPost_Mover := m#moverPath(_readByUPost);                                                   
 _readByUPost_Path := p#moverPath(_readByUPost);                                                    
                                                                                                    
 assert (leq(_writeByT_Mover, _R) && leq(_readByUPost_Mover, _E)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (25.5): List.head is not Write-Read Stable with respect to List.head (case J)
 assert (leq(_writeByT_Mover, _N) && leq(_readByUPost_Mover, _L)) ==> ((_readByU_Mover == _readByUPost_Mover || _readByU_Mover == _E));       // (25.5): List.head is not Write-Read Stable with respect to List.head (case K)
 assert (leq(_writeByT_Mover, _N) && !leq(_readByUPost_Mover, _L)) ==> (!leq(_readByU_Mover, _L));         // (25.5): List.head is not Write-Read Stable with respect to List.head (case L)
                                                                                                    
 }                                                                                                  
                                                                                                    
procedure Yield(tid: Tid);                                                                          
requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
requires ValidTid(tid);                                                                             
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129790(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (<undefined position>): Object invariant may not hold.
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129797(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (<undefined position>): Object invariant may not hold.
modifies Lock._state;                                                                               
modifies Lock._lock;                                                                                
modifies Node._state;                                                                               
modifies Node.item;                                                                                 
modifies Node.next;                                                                                 
modifies Node.order;                                                                                
modifies Node._lock;                                                                                
modifies List._state;                                                                               
modifies List.head;                                                                                 
modifies List._lock;                                                                                
ensures StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
ensures Y(tid , old(Lock._state), old(Lock._lock), old(Node._state), old(Node.item), old(Node.next), old(Node.order), old(Node._lock), old(List._state), old(List.head), old(List._lock) , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
ensures  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129790(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (<undefined position>): Object invariant may not hold.
ensures  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129797(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (<undefined position>): Object invariant may not hold.
                                                                                                    
// Lock._lock:                                                                                      
                                                                                                    
function {:inline} Y_Lock._lock(tid : Tid, this: Lock, newValue: Tid , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid): bool
{                                                                                                   
 ((isAccessible(Lock._state[this], tid) && leq(m#moverPath(ReadEval.Lock._lock(tid: Tid,this: Lock,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)), _R)) ==> (Lock._lock[this] == newValue))
 &&(((Lock._lock[this]==tid)==(newValue==tid)))                                                     
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Lock._lock(tid : Tid, this: Lock, newValue: Tid , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Lock._lock.Subsumes.W(tid : Tid, u : Tid, this: Lock, newValue: Tid , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Lock._lock_yield: [Lock]Tid;                                                                    
var Node.next_yield: [Node]Node;                                                                    
var Node.item_yield: [Node]int;                                                                     
var newValue_yield: Tid;                                                                            
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var this_yield: Lock;                                                                               
var $pc_yield: Phase;                                                                               
var u_yield: Tid;                                                                                   
var Node._lock_yield: [Node]Tid;                                                                    
var Lock._state_yield: [Lock]State;                                                                 
var List.head_yield: [List]Node;                                                                    
var List._lock_yield: [List]Tid;                                                                    
var List._state_yield: [List]State;                                                                 
var $recorded.state_yield: int;                                                                     
var Node.order_yield: [Node]int;                                                                    
                                                                                                    
 assume isAccessible(Lock._state[this], tid);                                                       
 assume isAccessible(Lock._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.Lock._lock(u: Tid,this: Lock,newValue: Tid,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)));
 assume leq(m#moverPath(ReadEval.Lock._lock(tid: Tid,this: Lock,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)), _N);
assume Lock._state_yield == Lock._state && Lock._lock_yield == Lock._lock && Node._state_yield == Node._state && Node.item_yield == Node.item && Node.next_yield == Node.next && Node.order_yield == Node.order && Node._lock_yield == Node._lock && List._state_yield == List._state && List.head_yield == List.head && List._lock_yield == List._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Lock._lock(tid, this, newValue , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
                                                                                                    
procedure Y_Lock._lock.Reflexive(tid : Tid, this: Lock , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Lock._lock_yield: [Lock]Tid;                                                                    
var Node.next_yield: [Node]Node;                                                                    
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var this_yield: Lock;                                                                               
var $pc_yield: Phase;                                                                               
var Node._lock_yield: [Node]Tid;                                                                    
var Lock._state_yield: [Lock]State;                                                                 
var List.head_yield: [List]Node;                                                                    
var List._lock_yield: [List]Tid;                                                                    
var List._state_yield: [List]State;                                                                 
var $recorded.state_yield: int;                                                                     
var Node.order_yield: [Node]int;                                                                    
                                                                                                    
 assume isAccessible(Lock._state[this], tid);                                                       
assume Lock._state_yield == Lock._state && Lock._lock_yield == Lock._lock && Node._state_yield == Node._state && Node.item_yield == Node.item && Node.next_yield == Node.next && Node.order_yield == Node.order && Node._lock_yield == Node._lock && List._state_yield == List._state && List.head_yield == List.head && List._lock_yield == List._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Lock._lock(tid, this, Lock._lock[this] , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
                                                                                                    
procedure Y_Lock._lock.Transitive(tid : Tid, this: Lock, newValue : Tid , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid , Lock._state_p: [Lock]State, Lock._lock_p: [Lock]Tid, Node._state_p: [Node]State, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node.order_p: [Node]int, Node._lock_p: [Node]Tid, List._state_p: [List]State, List.head_p: [List]Node, List._lock_p: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires StateInvariant(Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129790(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (2.1): Object invariant may not hold.
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129797(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (2.1): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Node._lock_pre: [Node]Tid;                                                                      
var this_pre: Lock;                                                                                 
var $recorded.state_pre: int;                                                                       
var List.head_pre: [List]Node;                                                                      
var Node.order_pre: [Node]int;                                                                      
var Node._state_pre: [Node]State;                                                                   
var Lock._lock_pre: [Lock]Tid;                                                                      
var tid_pre: Tid;                                                                                   
var List._state_pre: [List]State;                                                                   
var $pc_pre: Phase;                                                                                 
var Node.next_pre: [Node]Node;                                                                      
var Lock._state_pre: [Lock]State;                                                                   
var newValue_pre: Tid;                                                                              
var Node.item_pre: [Node]int;                                                                       
var List._lock_pre: [List]Tid;                                                                      
                                                                                                    
var Lock._lock_post: [Lock]Tid;                                                                     
var Lock._state_post: [Lock]State;                                                                  
var $recorded.state_post: int;                                                                      
var Node.item_post: [Node]int;                                                                      
var List._lock_post: [List]Tid;                                                                     
var Node.order_post: [Node]int;                                                                     
var $pc_post: Phase;                                                                                
var Node._lock_post: [Node]Tid;                                                                     
var tid_post: Tid;                                                                                  
var this_post: Lock;                                                                                
var List.head_post: [List]Node;                                                                     
var Node._state_post: [Node]State;                                                                  
var Node.next_post: [Node]Node;                                                                     
var List._state_post: [List]State;                                                                  
var newValue_post: Tid;                                                                             
                                                                                                    
assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Lock._state[this], tid);                                                       
 assume Y(tid , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock , Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
 assume Y_Lock._lock(tid, this, newValue , Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
assume Lock._state_post == Lock._state_p && Lock._lock_post == Lock._lock_p && Node._state_post == Node._state_p && Node.item_post == Node.item_p && Node.next_post == Node.next_p && Node.order_post == Node.order_p && Node._lock_post == Node._lock_p && List._state_post == List._state_p && List.head_post == List.head_p && List._lock_post == List._lock_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Lock._lock(tid, this, newValue , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
// Node.item:                                                                                       
                                                                                                    
function {:inline} Y_Node.item(tid : Tid, this: Node, newValue: int , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid): bool
{                                                                                                   
 ((isAccessible(Node._state[this], tid) && leq(m#moverPath(ReadEval.Node.item(tid: Tid,this: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)), _R)) ==> (Node.item[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Node.item(tid : Tid, this: Node, newValue: int , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Node.item.Subsumes.W(tid : Tid, u : Tid, this: Node, newValue: int , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Lock._lock_yield: [Lock]Tid;                                                                    
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var $pc_yield: Phase;                                                                               
var newValue_yield: int;                                                                            
var u_yield: Tid;                                                                                   
var Node._lock_yield: [Node]Tid;                                                                    
var Lock._state_yield: [Lock]State;                                                                 
var List.head_yield: [List]Node;                                                                    
var List._lock_yield: [List]Tid;                                                                    
var List._state_yield: [List]State;                                                                 
var $recorded.state_yield: int;                                                                     
var Node.order_yield: [Node]int;                                                                    
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume isAccessible(Node._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.Node.item(u: Tid,this: Node,newValue: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)));
                                                                                                    
assume Lock._state_yield == Lock._state && Lock._lock_yield == Lock._lock && Node._state_yield == Node._state && Node.item_yield == Node.item && Node.next_yield == Node.next && Node.order_yield == Node.order && Node._lock_yield == Node._lock && List._state_yield == List._state && List.head_yield == List.head && List._lock_yield == List._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node.item(tid, this, newValue , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node.item.Reflexive(tid : Tid, this: Node , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Lock._lock_yield: [Lock]Tid;                                                                    
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var $pc_yield: Phase;                                                                               
var Node._lock_yield: [Node]Tid;                                                                    
var Lock._state_yield: [Lock]State;                                                                 
var List.head_yield: [List]Node;                                                                    
var List._lock_yield: [List]Tid;                                                                    
var List._state_yield: [List]State;                                                                 
var $recorded.state_yield: int;                                                                     
var Node.order_yield: [Node]int;                                                                    
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
assume Lock._state_yield == Lock._state && Lock._lock_yield == Lock._lock && Node._state_yield == Node._state && Node.item_yield == Node.item && Node.next_yield == Node.next && Node.order_yield == Node.order && Node._lock_yield == Node._lock && List._state_yield == List._state && List.head_yield == List.head && List._lock_yield == List._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node.item(tid, this, Node.item[this] , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node.item.Transitive(tid : Tid, this: Node, newValue : int , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid , Lock._state_p: [Lock]State, Lock._lock_p: [Lock]Tid, Node._state_p: [Node]State, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node.order_p: [Node]int, Node._lock_p: [Node]Tid, List._state_p: [List]State, List.head_p: [List]Node, List._lock_p: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires StateInvariant(Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129790(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (5.23): Object invariant may not hold.
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129797(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (5.23): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Node._lock_pre: [Node]Tid;                                                                      
var $recorded.state_pre: int;                                                                       
var this_pre: Node;                                                                                 
var List.head_pre: [List]Node;                                                                      
var newValue_pre: int;                                                                              
var Node.order_pre: [Node]int;                                                                      
var Node._state_pre: [Node]State;                                                                   
var Lock._lock_pre: [Lock]Tid;                                                                      
var tid_pre: Tid;                                                                                   
var List._state_pre: [List]State;                                                                   
var $pc_pre: Phase;                                                                                 
var Node.next_pre: [Node]Node;                                                                      
var Lock._state_pre: [Lock]State;                                                                   
var Node.item_pre: [Node]int;                                                                       
var List._lock_pre: [List]Tid;                                                                      
                                                                                                    
var Lock._lock_post: [Lock]Tid;                                                                     
var Lock._state_post: [Lock]State;                                                                  
var $recorded.state_post: int;                                                                      
var Node.item_post: [Node]int;                                                                      
var List._lock_post: [List]Tid;                                                                     
var newValue_post: int;                                                                             
var Node.order_post: [Node]int;                                                                     
var $pc_post: Phase;                                                                                
var Node._lock_post: [Node]Tid;                                                                     
var tid_post: Tid;                                                                                  
var List.head_post: [List]Node;                                                                     
var Node._state_post: [Node]State;                                                                  
var Node.next_post: [Node]Node;                                                                     
var List._state_post: [List]State;                                                                  
var this_post: Node;                                                                                
                                                                                                    
assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume Y(tid , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock , Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
 assume Y_Node.item(tid, this, newValue , Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
assume Lock._state_post == Lock._state_p && Lock._lock_post == Lock._lock_p && Node._state_post == Node._state_p && Node.item_post == Node.item_p && Node.next_post == Node.next_p && Node.order_post == Node.order_p && Node._lock_post == Node._lock_p && List._state_post == List._state_p && List.head_post == List.head_p && List._lock_post == List._lock_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Node.item(tid, this, newValue , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
// Node.next:                                                                                       
                                                                                                    
function {:inline} Y_Node.next(tid : Tid, this: Node, newValue: Node , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid): bool
{                                                                                                   
 ((isAccessible(Node._state[this], tid) && leq(m#moverPath(ReadEval.Node.next(tid: Tid,this: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)), _R)) ==> (Node.next[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Node.next(tid : Tid, this: Node, newValue: Node , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Node.next.Subsumes.W(tid : Tid, u : Tid, this: Node, newValue: Node , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Lock._lock_yield: [Lock]Tid;                                                                    
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var $pc_yield: Phase;                                                                               
var u_yield: Tid;                                                                                   
var Node._lock_yield: [Node]Tid;                                                                    
var Lock._state_yield: [Lock]State;                                                                 
var newValue_yield: Node;                                                                           
var List.head_yield: [List]Node;                                                                    
var List._lock_yield: [List]Tid;                                                                    
var List._state_yield: [List]State;                                                                 
var $recorded.state_yield: int;                                                                     
var Node.order_yield: [Node]int;                                                                    
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume isAccessible(Node._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.Node.next(u: Tid,this: Node,newValue: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)));
                                                                                                    
assume Lock._state_yield == Lock._state && Lock._lock_yield == Lock._lock && Node._state_yield == Node._state && Node.item_yield == Node.item && Node.next_yield == Node.next && Node.order_yield == Node.order && Node._lock_yield == Node._lock && List._state_yield == List._state && List.head_yield == List.head && List._lock_yield == List._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node.next(tid, this, newValue , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node.next.Reflexive(tid : Tid, this: Node , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Lock._lock_yield: [Lock]Tid;                                                                    
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var $pc_yield: Phase;                                                                               
var Node._lock_yield: [Node]Tid;                                                                    
var Lock._state_yield: [Lock]State;                                                                 
var List.head_yield: [List]Node;                                                                    
var List._lock_yield: [List]Tid;                                                                    
var List._state_yield: [List]State;                                                                 
var $recorded.state_yield: int;                                                                     
var Node.order_yield: [Node]int;                                                                    
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
assume Lock._state_yield == Lock._state && Lock._lock_yield == Lock._lock && Node._state_yield == Node._state && Node.item_yield == Node.item && Node.next_yield == Node.next && Node.order_yield == Node.order && Node._lock_yield == Node._lock && List._state_yield == List._state && List.head_yield == List.head && List._lock_yield == List._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node.next(tid, this, Node.next[this] , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node.next.Transitive(tid : Tid, this: Node, newValue : Node , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid , Lock._state_p: [Lock]State, Lock._lock_p: [Lock]Tid, Node._state_p: [Node]State, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node.order_p: [Node]int, Node._lock_p: [Node]Tid, List._state_p: [List]State, List.head_p: [List]Node, List._lock_p: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires StateInvariant(Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129790(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (6.24): Object invariant may not hold.
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129797(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (6.24): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var newValue_pre: Node;                                                                             
var Node._lock_pre: [Node]Tid;                                                                      
var $recorded.state_pre: int;                                                                       
var this_pre: Node;                                                                                 
var List.head_pre: [List]Node;                                                                      
var Node.order_pre: [Node]int;                                                                      
var Node._state_pre: [Node]State;                                                                   
var Lock._lock_pre: [Lock]Tid;                                                                      
var tid_pre: Tid;                                                                                   
var List._state_pre: [List]State;                                                                   
var $pc_pre: Phase;                                                                                 
var Node.next_pre: [Node]Node;                                                                      
var Lock._state_pre: [Lock]State;                                                                   
var Node.item_pre: [Node]int;                                                                       
var List._lock_pre: [List]Tid;                                                                      
                                                                                                    
var Lock._lock_post: [Lock]Tid;                                                                     
var Lock._state_post: [Lock]State;                                                                  
var $recorded.state_post: int;                                                                      
var newValue_post: Node;                                                                            
var Node.item_post: [Node]int;                                                                      
var List._lock_post: [List]Tid;                                                                     
var Node.order_post: [Node]int;                                                                     
var $pc_post: Phase;                                                                                
var Node._lock_post: [Node]Tid;                                                                     
var tid_post: Tid;                                                                                  
var List.head_post: [List]Node;                                                                     
var Node._state_post: [Node]State;                                                                  
var Node.next_post: [Node]Node;                                                                     
var List._state_post: [List]State;                                                                  
var this_post: Node;                                                                                
                                                                                                    
assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume Y(tid , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock , Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
 assume Y_Node.next(tid, this, newValue , Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
assume Lock._state_post == Lock._state_p && Lock._lock_post == Lock._lock_p && Node._state_post == Node._state_p && Node.item_post == Node.item_p && Node.next_post == Node.next_p && Node.order_post == Node.order_p && Node._lock_post == Node._lock_p && List._state_post == List._state_p && List.head_post == List.head_p && List._lock_post == List._lock_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Node.next(tid, this, newValue , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
// Node.order:                                                                                      
                                                                                                    
function {:inline} Y_Node.order(tid : Tid, this: Node, newValue: int , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid): bool
{                                                                                                   
 ((isAccessible(Node._state[this], tid) && leq(m#moverPath(ReadEval.Node.order(tid: Tid,this: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)), _R)) ==> (Node.order[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Node.order(tid : Tid, this: Node, newValue: int , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Node.order.Subsumes.W(tid : Tid, u : Tid, this: Node, newValue: int , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Lock._lock_yield: [Lock]Tid;                                                                    
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var $pc_yield: Phase;                                                                               
var newValue_yield: int;                                                                            
var u_yield: Tid;                                                                                   
var Node._lock_yield: [Node]Tid;                                                                    
var Lock._state_yield: [Lock]State;                                                                 
var List.head_yield: [List]Node;                                                                    
var List._lock_yield: [List]Tid;                                                                    
var List._state_yield: [List]State;                                                                 
var $recorded.state_yield: int;                                                                     
var Node.order_yield: [Node]int;                                                                    
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume isAccessible(Node._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.Node.order(u: Tid,this: Node,newValue: int,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)));
                                                                                                    
assume Lock._state_yield == Lock._state && Lock._lock_yield == Lock._lock && Node._state_yield == Node._state && Node.item_yield == Node.item && Node.next_yield == Node.next && Node.order_yield == Node.order && Node._lock_yield == Node._lock && List._state_yield == List._state && List.head_yield == List.head && List._lock_yield == List._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node.order(tid, this, newValue , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node.order.Reflexive(tid : Tid, this: Node , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Lock._lock_yield: [Lock]Tid;                                                                    
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var $pc_yield: Phase;                                                                               
var Node._lock_yield: [Node]Tid;                                                                    
var Lock._state_yield: [Lock]State;                                                                 
var List.head_yield: [List]Node;                                                                    
var List._lock_yield: [List]Tid;                                                                    
var List._state_yield: [List]State;                                                                 
var $recorded.state_yield: int;                                                                     
var Node.order_yield: [Node]int;                                                                    
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
assume Lock._state_yield == Lock._state && Lock._lock_yield == Lock._lock && Node._state_yield == Node._state && Node.item_yield == Node.item && Node.next_yield == Node.next && Node.order_yield == Node.order && Node._lock_yield == Node._lock && List._state_yield == List._state && List.head_yield == List.head && List._lock_yield == List._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node.order(tid, this, Node.order[this] , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node.order.Transitive(tid : Tid, this: Node, newValue : int , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid , Lock._state_p: [Lock]State, Lock._lock_p: [Lock]Tid, Node._state_p: [Node]State, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node.order_p: [Node]int, Node._lock_p: [Node]Tid, List._state_p: [List]State, List.head_p: [List]Node, List._lock_p: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires StateInvariant(Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129790(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (7.25): Object invariant may not hold.
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129797(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (7.25): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Node._lock_pre: [Node]Tid;                                                                      
var $recorded.state_pre: int;                                                                       
var this_pre: Node;                                                                                 
var List.head_pre: [List]Node;                                                                      
var newValue_pre: int;                                                                              
var Node.order_pre: [Node]int;                                                                      
var Node._state_pre: [Node]State;                                                                   
var Lock._lock_pre: [Lock]Tid;                                                                      
var tid_pre: Tid;                                                                                   
var List._state_pre: [List]State;                                                                   
var $pc_pre: Phase;                                                                                 
var Node.next_pre: [Node]Node;                                                                      
var Lock._state_pre: [Lock]State;                                                                   
var Node.item_pre: [Node]int;                                                                       
var List._lock_pre: [List]Tid;                                                                      
                                                                                                    
var Lock._lock_post: [Lock]Tid;                                                                     
var Lock._state_post: [Lock]State;                                                                  
var $recorded.state_post: int;                                                                      
var Node.item_post: [Node]int;                                                                      
var List._lock_post: [List]Tid;                                                                     
var newValue_post: int;                                                                             
var Node.order_post: [Node]int;                                                                     
var $pc_post: Phase;                                                                                
var Node._lock_post: [Node]Tid;                                                                     
var tid_post: Tid;                                                                                  
var List.head_post: [List]Node;                                                                     
var Node._state_post: [Node]State;                                                                  
var Node.next_post: [Node]Node;                                                                     
var List._state_post: [List]State;                                                                  
var this_post: Node;                                                                                
                                                                                                    
assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume Y(tid , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock , Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
 assume Y_Node.order(tid, this, newValue , Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
assume Lock._state_post == Lock._state_p && Lock._lock_post == Lock._lock_p && Node._state_post == Node._state_p && Node.item_post == Node.item_p && Node.next_post == Node.next_p && Node.order_post == Node.order_p && Node._lock_post == Node._lock_p && List._state_post == List._state_p && List.head_post == List.head_p && List._lock_post == List._lock_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Node.order(tid, this, newValue , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
// Node._lock:                                                                                      
                                                                                                    
function {:inline} Y_Node._lock(tid : Tid, this: Node, newValue: Tid , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid): bool
{                                                                                                   
 ((isAccessible(Node._state[this], tid) && leq(m#moverPath(ReadEval.Node._lock(tid: Tid,this: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)), _R)) ==> (Node._lock[this] == newValue))
 &&(((Node._lock[this]==tid)==(newValue==tid)))                                                     
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_Node._lock(tid : Tid, this: Node, newValue: Tid , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_Node._lock.Subsumes.W(tid : Tid, u : Tid, this: Node, newValue: Tid , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Lock._lock_yield: [Lock]Tid;                                                                    
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var Node.item_yield: [Node]int;                                                                     
var newValue_yield: Tid;                                                                            
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var $pc_yield: Phase;                                                                               
var u_yield: Tid;                                                                                   
var Node._lock_yield: [Node]Tid;                                                                    
var Lock._state_yield: [Lock]State;                                                                 
var List.head_yield: [List]Node;                                                                    
var List._lock_yield: [List]Tid;                                                                    
var List._state_yield: [List]State;                                                                 
var $recorded.state_yield: int;                                                                     
var Node.order_yield: [Node]int;                                                                    
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume isAccessible(Node._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.Node._lock(u: Tid,this: Node,newValue: Tid,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)));
 assume leq(m#moverPath(ReadEval.Node._lock(tid: Tid,this: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)), _N);
assume Lock._state_yield == Lock._state && Lock._lock_yield == Lock._lock && Node._state_yield == Node._state && Node.item_yield == Node.item && Node.next_yield == Node.next && Node.order_yield == Node.order && Node._lock_yield == Node._lock && List._state_yield == List._state && List.head_yield == List.head && List._lock_yield == List._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node._lock(tid, this, newValue , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node._lock.Reflexive(tid : Tid, this: Node , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Lock._lock_yield: [Lock]Tid;                                                                    
var Node.next_yield: [Node]Node;                                                                    
var this_yield: Node;                                                                               
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var $pc_yield: Phase;                                                                               
var Node._lock_yield: [Node]Tid;                                                                    
var Lock._state_yield: [Lock]State;                                                                 
var List.head_yield: [List]Node;                                                                    
var List._lock_yield: [List]Tid;                                                                    
var List._state_yield: [List]State;                                                                 
var $recorded.state_yield: int;                                                                     
var Node.order_yield: [Node]int;                                                                    
                                                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
assume Lock._state_yield == Lock._state && Lock._lock_yield == Lock._lock && Node._state_yield == Node._state && Node.item_yield == Node.item && Node.next_yield == Node.next && Node.order_yield == Node.order && Node._lock_yield == Node._lock && List._state_yield == List._state && List.head_yield == List.head && List._lock_yield == List._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_Node._lock(tid, this, Node._lock[this] , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
                                                                                                    
procedure Y_Node._lock.Transitive(tid : Tid, this: Node, newValue : Tid , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid , Lock._state_p: [Lock]State, Lock._lock_p: [Lock]Tid, Node._state_p: [Node]State, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node.order_p: [Node]int, Node._lock_p: [Node]Tid, List._state_p: [List]State, List.head_p: [List]Node, List._lock_p: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires StateInvariant(Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129790(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (4.1): Object invariant may not hold.
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129797(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (4.1): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Node._lock_pre: [Node]Tid;                                                                      
var $recorded.state_pre: int;                                                                       
var this_pre: Node;                                                                                 
var List.head_pre: [List]Node;                                                                      
var Node.order_pre: [Node]int;                                                                      
var Node._state_pre: [Node]State;                                                                   
var Lock._lock_pre: [Lock]Tid;                                                                      
var tid_pre: Tid;                                                                                   
var List._state_pre: [List]State;                                                                   
var $pc_pre: Phase;                                                                                 
var Node.next_pre: [Node]Node;                                                                      
var Lock._state_pre: [Lock]State;                                                                   
var newValue_pre: Tid;                                                                              
var Node.item_pre: [Node]int;                                                                       
var List._lock_pre: [List]Tid;                                                                      
                                                                                                    
var Lock._lock_post: [Lock]Tid;                                                                     
var Lock._state_post: [Lock]State;                                                                  
var $recorded.state_post: int;                                                                      
var Node.item_post: [Node]int;                                                                      
var List._lock_post: [List]Tid;                                                                     
var Node.order_post: [Node]int;                                                                     
var $pc_post: Phase;                                                                                
var Node._lock_post: [Node]Tid;                                                                     
var tid_post: Tid;                                                                                  
var List.head_post: [List]Node;                                                                     
var Node._state_post: [Node]State;                                                                  
var Node.next_post: [Node]Node;                                                                     
var List._state_post: [List]State;                                                                  
var this_post: Node;                                                                                
var newValue_post: Tid;                                                                             
                                                                                                    
assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(Node._state[this], tid);                                                       
 assume Y(tid , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock , Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
 assume Y_Node._lock(tid, this, newValue , Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
assume Lock._state_post == Lock._state_p && Lock._lock_post == Lock._lock_p && Node._state_post == Node._state_p && Node.item_post == Node.item_p && Node.next_post == Node.next_p && Node.order_post == Node.order_p && Node._lock_post == Node._lock_p && List._state_post == List._state_p && List.head_post == List.head_p && List._lock_post == List._lock_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_Node._lock(tid, this, newValue , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
// List.head:                                                                                       
                                                                                                    
function {:inline} Y_List.head(tid : Tid, this: List, newValue: Node , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid): bool
{                                                                                                   
 ((isAccessible(List._state[this], tid) && leq(m#moverPath(ReadEval.List.head(tid: Tid,this: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)), _R)) ==> (List.head[this] == newValue))
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_List.head(tid : Tid, this: List, newValue: Node , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_List.head.Subsumes.W(tid : Tid, u : Tid, this: List, newValue: Node , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Lock._lock_yield: [Lock]Tid;                                                                    
var Node.next_yield: [Node]Node;                                                                    
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var $pc_yield: Phase;                                                                               
var u_yield: Tid;                                                                                   
var Node._lock_yield: [Node]Tid;                                                                    
var Lock._state_yield: [Lock]State;                                                                 
var newValue_yield: Node;                                                                           
var List.head_yield: [List]Node;                                                                    
var List._lock_yield: [List]Tid;                                                                    
var List._state_yield: [List]State;                                                                 
var $recorded.state_yield: int;                                                                     
var Node.order_yield: [Node]int;                                                                    
var this_yield: List;                                                                               
                                                                                                    
 assume isAccessible(List._state[this], tid);                                                       
 assume isAccessible(List._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.List.head(u: Tid,this: List,newValue: Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)));
                                                                                                    
assume Lock._state_yield == Lock._state && Lock._lock_yield == Lock._lock && Node._state_yield == Node._state && Node.item_yield == Node.item && Node.next_yield == Node.next && Node.order_yield == Node.order && Node._lock_yield == Node._lock && List._state_yield == List._state && List.head_yield == List.head && List._lock_yield == List._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_List.head(tid, this, newValue , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
                                                                                                    
procedure Y_List.head.Reflexive(tid : Tid, this: List , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Lock._lock_yield: [Lock]Tid;                                                                    
var Node.next_yield: [Node]Node;                                                                    
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var $pc_yield: Phase;                                                                               
var Node._lock_yield: [Node]Tid;                                                                    
var Lock._state_yield: [Lock]State;                                                                 
var List.head_yield: [List]Node;                                                                    
var List._lock_yield: [List]Tid;                                                                    
var List._state_yield: [List]State;                                                                 
var $recorded.state_yield: int;                                                                     
var Node.order_yield: [Node]int;                                                                    
var this_yield: List;                                                                               
                                                                                                    
 assume isAccessible(List._state[this], tid);                                                       
assume Lock._state_yield == Lock._state && Lock._lock_yield == Lock._lock && Node._state_yield == Node._state && Node.item_yield == Node.item && Node.next_yield == Node.next && Node.order_yield == Node.order && Node._lock_yield == Node._lock && List._state_yield == List._state && List.head_yield == List.head && List._lock_yield == List._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_List.head(tid, this, List.head[this] , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
                                                                                                    
procedure Y_List.head.Transitive(tid : Tid, this: List, newValue : Node , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid , Lock._state_p: [Lock]State, Lock._lock_p: [Lock]Tid, Node._state_p: [Node]State, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node.order_p: [Node]int, Node._lock_p: [Node]Tid, List._state_p: [List]State, List.head_p: [List]Node, List._lock_p: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires StateInvariant(Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129790(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (25.25): Object invariant may not hold.
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129797(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (25.25): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var newValue_pre: Node;                                                                             
var Node._lock_pre: [Node]Tid;                                                                      
var $recorded.state_pre: int;                                                                       
var List.head_pre: [List]Node;                                                                      
var Node.order_pre: [Node]int;                                                                      
var Node._state_pre: [Node]State;                                                                   
var Lock._lock_pre: [Lock]Tid;                                                                      
var tid_pre: Tid;                                                                                   
var List._state_pre: [List]State;                                                                   
var $pc_pre: Phase;                                                                                 
var Node.next_pre: [Node]Node;                                                                      
var Lock._state_pre: [Lock]State;                                                                   
var Node.item_pre: [Node]int;                                                                       
var List._lock_pre: [List]Tid;                                                                      
var this_pre: List;                                                                                 
                                                                                                    
var Lock._lock_post: [Lock]Tid;                                                                     
var Lock._state_post: [Lock]State;                                                                  
var $recorded.state_post: int;                                                                      
var newValue_post: Node;                                                                            
var Node.item_post: [Node]int;                                                                      
var List._lock_post: [List]Tid;                                                                     
var Node.order_post: [Node]int;                                                                     
var $pc_post: Phase;                                                                                
var this_post: List;                                                                                
var Node._lock_post: [Node]Tid;                                                                     
var tid_post: Tid;                                                                                  
var List.head_post: [List]Node;                                                                     
var Node._state_post: [Node]State;                                                                  
var Node.next_post: [Node]Node;                                                                     
var List._state_post: [List]State;                                                                  
                                                                                                    
assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(List._state[this], tid);                                                       
 assume Y(tid , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock , Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
 assume Y_List.head(tid, this, newValue , Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
assume Lock._state_post == Lock._state_p && Lock._lock_post == Lock._lock_p && Node._state_post == Node._state_p && Node.item_post == Node.item_p && Node.next_post == Node.next_p && Node.order_post == Node.order_p && Node._lock_post == Node._lock_p && List._state_post == List._state_p && List.head_post == List.head_p && List._lock_post == List._lock_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_List.head(tid, this, newValue , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
// List._lock:                                                                                      
                                                                                                    
function {:inline} Y_List._lock(tid : Tid, this: List, newValue: Tid , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid): bool
{                                                                                                   
 ((isAccessible(List._state[this], tid) && leq(m#moverPath(ReadEval.List._lock(tid: Tid,this: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)), _R)) ==> (List._lock[this] == newValue))
 &&(((List._lock[this]==tid)==(newValue==tid)))                                                     
                                                                                                    
}                                                                                                   
                                                                                                    
function {:inline} Invariant.Y_List._lock(tid : Tid, this: List, newValue: Tid , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid): bool
{                                                                                                   
 true                                                                                               
                                                                                                    
}                                                                                                   
                                                                                                    
procedure Y_List._lock.Subsumes.W(tid : Tid, u : Tid, this: List, newValue: Tid , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(tid);                                                                            
 requires ValidTid(u) && u != tid;                                                                  
                                                                                                    
{                                                                                                   
var Lock._lock_yield: [Lock]Tid;                                                                    
var Node.next_yield: [Node]Node;                                                                    
var Node.item_yield: [Node]int;                                                                     
var newValue_yield: Tid;                                                                            
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var $pc_yield: Phase;                                                                               
var u_yield: Tid;                                                                                   
var Node._lock_yield: [Node]Tid;                                                                    
var Lock._state_yield: [Lock]State;                                                                 
var List.head_yield: [List]Node;                                                                    
var List._lock_yield: [List]Tid;                                                                    
var List._state_yield: [List]State;                                                                 
var $recorded.state_yield: int;                                                                     
var Node.order_yield: [Node]int;                                                                    
var this_yield: List;                                                                               
                                                                                                    
 assume isAccessible(List._state[this], tid);                                                       
 assume isAccessible(List._state[this], u);                                                         
 assume !isError(m#moverPath(WriteEval.List._lock(u: Tid,this: List,newValue: Tid,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)));
 assume leq(m#moverPath(ReadEval.List._lock(tid: Tid,this: List,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock)), _N);
assume Lock._state_yield == Lock._state && Lock._lock_yield == Lock._lock && Node._state_yield == Node._state && Node.item_yield == Node.item && Node.next_yield == Node.next && Node.order_yield == Node.order && Node._lock_yield == Node._lock && List._state_yield == List._state && List.head_yield == List.head && List._lock_yield == List._lock && u_yield == u && newValue_yield == newValue && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_List._lock(tid, this, newValue , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
                                                                                                    
procedure Y_List._lock.Reflexive(tid : Tid, this: List , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires ValidTid(tid);                                                                            
                                                                                                    
{                                                                                                   
var Lock._lock_yield: [Lock]Tid;                                                                    
var Node.next_yield: [Node]Node;                                                                    
var Node.item_yield: [Node]int;                                                                     
var Node._state_yield: [Node]State;                                                                 
var tid_yield: Tid;                                                                                 
var $pc_yield: Phase;                                                                               
var Node._lock_yield: [Node]Tid;                                                                    
var Lock._state_yield: [Lock]State;                                                                 
var List.head_yield: [List]Node;                                                                    
var List._lock_yield: [List]Tid;                                                                    
var List._state_yield: [List]State;                                                                 
var $recorded.state_yield: int;                                                                     
var Node.order_yield: [Node]int;                                                                    
var this_yield: List;                                                                               
                                                                                                    
 assume isAccessible(List._state[this], tid);                                                       
assume Lock._state_yield == Lock._state && Lock._lock_yield == Lock._lock && Node._state_yield == Node._state && Node.item_yield == Node.item && Node.next_yield == Node.next && Node.order_yield == Node.order && Node._lock_yield == Node._lock && List._state_yield == List._state && List.head_yield == List.head && List._lock_yield == List._lock && this_yield == this && tid_yield == tid;
assume $recorded.state_yield == 1;                                                                  
 assert Y_List._lock(tid, this, List._lock[this] , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
                                                                                                    
procedure Y_List._lock.Transitive(tid : Tid, this: List, newValue : Tid , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid , Lock._state_p: [Lock]State, Lock._lock_p: [Lock]Tid, Node._state_p: [Node]State, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node.order_p: [Node]int, Node._lock_p: [Node]Tid, List._state_p: [List]State, List.head_p: [List]Node, List._lock_p: [List]Tid)
 requires StateInvariant(Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
 requires StateInvariant(Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
 requires ValidTid(tid);                                                                            
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129790(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (23.1): Object invariant may not hold.
requires  (forall _this : Node ::  { Node._state[_this] } isAccessible(Node._state[_this], tid) && true ==> Invariant.Node.1129797(tid: Tid,_this : Node,Lock._state,Lock._lock,Node._state,Node.item,Node.next,Node.order,Node._lock,List._state,List.head,List._lock));       // (23.1): Object invariant may not hold.
                                                                                                    
{                                                                                                   
var Node._lock_pre: [Node]Tid;                                                                      
var $recorded.state_pre: int;                                                                       
var List.head_pre: [List]Node;                                                                      
var Node.order_pre: [Node]int;                                                                      
var Node._state_pre: [Node]State;                                                                   
var Lock._lock_pre: [Lock]Tid;                                                                      
var tid_pre: Tid;                                                                                   
var List._state_pre: [List]State;                                                                   
var $pc_pre: Phase;                                                                                 
var Node.next_pre: [Node]Node;                                                                      
var Lock._state_pre: [Lock]State;                                                                   
var newValue_pre: Tid;                                                                              
var Node.item_pre: [Node]int;                                                                       
var List._lock_pre: [List]Tid;                                                                      
var this_pre: List;                                                                                 
                                                                                                    
var Lock._lock_post: [Lock]Tid;                                                                     
var Lock._state_post: [Lock]State;                                                                  
var $recorded.state_post: int;                                                                      
var Node.item_post: [Node]int;                                                                      
var List._lock_post: [List]Tid;                                                                     
var Node.order_post: [Node]int;                                                                     
var $pc_post: Phase;                                                                                
var this_post: List;                                                                                
var Node._lock_post: [Node]Tid;                                                                     
var tid_post: Tid;                                                                                  
var List.head_post: [List]Node;                                                                     
var Node._state_post: [Node]State;                                                                  
var Node.next_post: [Node]Node;                                                                     
var List._state_post: [List]State;                                                                  
var newValue_post: Tid;                                                                             
                                                                                                    
assume Lock._state_pre == Lock._state && Lock._lock_pre == Lock._lock && Node._state_pre == Node._state && Node.item_pre == Node.item && Node.next_pre == Node.next && Node.order_pre == Node.order && Node._lock_pre == Node._lock && List._state_pre == List._state && List.head_pre == List.head && List._lock_pre == List._lock && newValue_pre == newValue && this_pre == this && tid_pre == tid;
assume $recorded.state_pre == 1;                                                                    
 assume isAccessible(List._state[this], tid);                                                       
 assume Y(tid , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock , Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
 assume Y_List._lock(tid, this, newValue , Lock._state_p, Lock._lock_p, Node._state_p, Node.item_p, Node.next_p, Node.order_p, Node._lock_p, List._state_p, List.head_p, List._lock_p);
assume Lock._state_post == Lock._state_p && Lock._lock_post == Lock._lock_p && Node._state_post == Node._state_p && Node.item_post == Node.item_p && Node.next_post == Node.next_p && Node.order_post == Node.order_p && Node._lock_post == Node._lock_p && List._state_post == List._state_p && List.head_post == List.head_p && List._lock_post == List._lock_p && newValue_post == newValue && this_post == this && tid_post == tid;
assume $recorded.state_post == 1;                                                                   
 assert Y_List._lock(tid, this, newValue , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock);
}                                                                                                   
                                                                                                    
                                                                                                    
function {:inline} Y(tid : Tid , Lock._state: [Lock]State, Lock._lock: [Lock]Tid, Node._state: [Node]State, Node.item: [Node]int, Node.next: [Node]Node, Node.order: [Node]int, Node._lock: [Node]Tid, List._state: [List]State, List.head: [List]Node, List._lock: [List]Tid , Lock._state_p: [Lock]State, Lock._lock_p: [Lock]Tid, Node._state_p: [Node]State, Node.item_p: [Node]int, Node.next_p: [Node]Node, Node.order_p: [Node]int, Node._lock_p: [Node]Tid, List._state_p: [List]State, List.head_p: [List]Node, List._lock_p: [List]Tid): bool
{                                                                                                   
 (forall this: Lock :: Y_Lock._lock(tid : Tid, this, Lock._lock_p[this] , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock))
 && (forall this: Node :: Y_Node.item(tid : Tid, this, Node.item_p[this] , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock))
 && (forall this: Node :: Y_Node.next(tid : Tid, this, Node.next_p[this] , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock))
 && (forall this: Node :: Y_Node.order(tid : Tid, this, Node.order_p[this] , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock))
 && (forall this: Node :: Y_Node._lock(tid : Tid, this, Node._lock_p[this] , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock))
 && (forall this: List :: Y_List.head(tid : Tid, this, List.head_p[this] , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock))
 && (forall this: List :: Y_List._lock(tid : Tid, this, List._lock_p[this] , Lock._state, Lock._lock, Node._state, Node.item, Node.next, Node.order, Node._lock, List._state, List.head, List._lock))
 && (forall _i : Lock :: isShared(Lock._state[_i]) ==> isShared(Lock._state_p[_i]))                 
 && (forall _i : Lock :: isLocal(Lock._state[_i], tid) <==> isLocal(Lock._state_p[_i], tid))        
 && (forall _i : Node :: isShared(Node._state[_i]) ==> isShared(Node._state_p[_i]))                 
 && (forall _i : Node :: isLocal(Node._state[_i], tid) <==> isLocal(Node._state_p[_i], tid))        
 && (forall _i : List :: isShared(List._state[_i]) ==> isShared(List._state_p[_i]))                 
 && (forall _i : List :: isLocal(List._state[_i], tid) <==> isLocal(List._state_p[_i], tid))        
                                                                                                    
}                                                                                                   
                                                                                                    
                                                                                                    
// 1076.1-1284.2: (Method:27.5)
// 1090.1-1090.24: (27.5): Bad tid
// 1091.1-1091.38: (27.5): this is not global
// 1094.1-1094.266: (27.5): Object invariant may not hold.
// 1095.1-1095.266: (27.5): Object invariant may not hold.
// 1098.1-1098.265: (27.5): Object invariant may not hold.
// 1099.1-1099.265: (27.5): Object invariant may not hold.
// 1192.2-1194.2: (class anchor.sink.VarDeclStmt:28.14)
// 1195.2-1212.23: (class anchor.sink.Read:28.14)
// 1207.1-1207.28: (28.14): Cannot have potential null deference in left-mover part.
// 1211.1-1211.27: (28.14): Reduction failure
// 1215.2-1220.14: (class anchor.sink.While:28.36)
// 1222.1-1222.27: (27.5): Bad tid
// 1223.1-1223.41: (27.5): this is not global
// 1226.1-1226.269: (28.36): Object invariant may not hold.
// 1227.1-1227.269: (28.36): Object invariant may not hold.
// 1227.269-1228.56: (28.36): invariant x == Node.null || isShared(x) may not hold
// 1228.56-1229.152: (28.36): invariant x != Node.null ==> (x == Node.null ? 0 : x.order) > (x.next == Node.null ? 0 : x.next.order) may not hold
// 1230.1-1230.277: (28.36): Loop does not preserve yields_as annotation for field item
// 1231.1-1231.277: (28.36): Loop does not preserve yields_as annotation for field next
// 1232.1-1232.279: (28.36): Loop does not preserve yields_as annotation for field order
// 1233.1-1233.277: (28.36): Loop does not preserve yields_as annotation for field head
// 1233.277-1234.173: (28.36): decreasing expressions may actually increase
// 1235.1-1235.33: (28.36): Phase must be invariant at loop head
// 1238.3-1240.3: (class anchor.sink.VarDeclStmt:28.36)
// 1241.3-1244.26: (class anchor.sink.Assign:28.36)
// 1246.4-1249.10: (class anchor.sink.Break:28.36)
// 1252.3-1269.21: (class anchor.sink.Read:28.45)
// 1264.1-1264.26: (28.45): Cannot have potential null deference in left-mover part.
// 1268.1-1268.28: (28.45): Reduction failure
// 1270.1-1270.171: (28.36): loop may not terminate
// 1271.1-1271.112: (28.36): decreasing expression not properly bounded by 0
// 1274.1-1274.30: (28.36): Phase must be invariant at loop head
// 1276.2-1283.9: (class anchor.sink.Return:27.28)
// 1281.1-1281.265: (27.28): Object invariant may not hold.
// 1282.1-1282.265: (27.28): Object invariant may not hold.
// 1378.1-1378.34: (5.5): Node.item failed Write-Write Right-Mover Check
// 1449.1-1449.30: (5.5): Node.item failed Write-Read Right-Mover Check
// 1524.1-1524.34: (5.5): Node.item failed Write-Write Left-Mover Check
// 1596.1-1596.30: (5.5): Node.item failed Write-Read Left-Mover Check
// 1665.1-1665.34: (5.5): Node.item failed Read-Write Right-Mover Check
// 1737.1-1737.34: (5.5): Node.item failed Read-Write Left-Mover Check
// 1808.1-1808.34: (6.5): Node.next failed Write-Write Right-Mover Check
// 1879.1-1879.30: (6.5): Node.next failed Write-Read Right-Mover Check
// 1954.1-1954.34: (6.5): Node.next failed Write-Write Left-Mover Check
// 2026.1-2026.30: (6.5): Node.next failed Write-Read Left-Mover Check
// 2095.1-2095.34: (6.5): Node.next failed Read-Write Right-Mover Check
// 2167.1-2167.34: (6.5): Node.next failed Read-Write Left-Mover Check
// 2238.1-2238.34: (7.5): Node.order failed Write-Write Right-Mover Check
// 2309.1-2309.30: (7.5): Node.order failed Write-Read Right-Mover Check
// 2384.1-2384.34: (7.5): Node.order failed Write-Write Left-Mover Check
// 2456.1-2456.30: (7.5): Node.order failed Write-Read Left-Mover Check
// 2525.1-2525.34: (7.5): Node.order failed Read-Write Right-Mover Check
// 2597.1-2597.34: (7.5): Node.order failed Read-Write Left-Mover Check
// 2668.1-2668.34: (25.5): List.head failed Write-Write Right-Mover Check
// 2739.1-2739.30: (25.5): List.head failed Write-Read Right-Mover Check
// 2814.1-2814.34: (25.5): List.head failed Write-Write Left-Mover Check
// 2886.1-2886.30: (25.5): List.head failed Write-Read Left-Mover Check
// 2955.1-2955.34: (25.5): List.head failed Read-Write Right-Mover Check
// 3027.1-3027.34: (25.5): List.head failed Read-Write Left-Mover Check
// 3110.1-3110.140: (5.5): Node.item is not Write-Write Stable with respect to Node.item (case A.1)
// 3111.1-3111.101: (5.5): Node.item is not Write-Write Stable with respect to Node.item (case A.2)
// 3112.1-3112.158: (5.5): Node.item is not Write-Write Stable with respect to Node.item (case A.3)
// 3226.1-3226.140: (5.5): Node.item is not Write-Write Stable with respect to Node.item (case C)
// 3345.1-3345.144: (5.5): Node.item is not Write-Write Stable with respect to Node.item (case D)
// 3346.1-3346.144: (5.5): Node.item is not Write-Write Stable with respect to Node.item (case R)
// 3429.1-3429.136: (5.5): Node.item is not Read-Write Stable with respect to Node.item (case F)
// 3430.1-3430.136: (5.5): Node.item is not Read-Write Stable with respect to Node.item (case H)
// 3431.1-3431.146: (5.5): Node.item is not Read-Write Stable with respect to Node.item (case I)
// 3513.1-3513.136: (5.5): Node.item is not Write-Read Stable with respect to Node.item (case J)
// 3514.1-3514.136: (5.5): Node.item is not Write-Read Stable with respect to Node.item (case K)
// 3515.1-3515.99: (5.5): Node.item is not Write-Read Stable with respect to Node.item (case L)
// 3599.1-3599.140: (6.5): Node.next is not Write-Write Stable with respect to Node.item (case A.1)
// 3600.1-3600.101: (6.5): Node.next is not Write-Write Stable with respect to Node.item (case A.2)
// 3601.1-3601.158: (6.5): Node.next is not Write-Write Stable with respect to Node.item (case A.3)
// 3715.1-3715.140: (5.5): Node.item is not Write-Write Stable with respect to Node.next (case C)
// 3834.1-3834.144: (5.5): Node.item is not Write-Write Stable with respect to Node.next (case D)
// 3835.1-3835.144: (5.5): Node.item is not Write-Write Stable with respect to Node.next (case R)
// 3918.1-3918.136: (5.5): Node.item is not Read-Write Stable with respect to Node.next (case F)
// 3919.1-3919.136: (5.5): Node.item is not Read-Write Stable with respect to Node.next (case H)
// 3920.1-3920.146: (5.5): Node.item is not Read-Write Stable with respect to Node.next (case I)
// 4002.1-4002.136: (6.5): Node.next is not Write-Read Stable with respect to Node.item (case J)
// 4003.1-4003.136: (6.5): Node.next is not Write-Read Stable with respect to Node.item (case K)
// 4004.1-4004.99: (6.5): Node.next is not Write-Read Stable with respect to Node.item (case L)
// 4088.1-4088.140: (7.5): Node.order is not Write-Write Stable with respect to Node.item (case A.1)
// 4089.1-4089.101: (7.5): Node.order is not Write-Write Stable with respect to Node.item (case A.2)
// 4090.1-4090.158: (7.5): Node.order is not Write-Write Stable with respect to Node.item (case A.3)
// 4204.1-4204.140: (5.5): Node.item is not Write-Write Stable with respect to Node.order (case C)
// 4323.1-4323.144: (5.5): Node.item is not Write-Write Stable with respect to Node.order (case D)
// 4324.1-4324.144: (5.5): Node.item is not Write-Write Stable with respect to Node.order (case R)
// 4407.1-4407.136: (5.5): Node.item is not Read-Write Stable with respect to Node.order (case F)
// 4408.1-4408.136: (5.5): Node.item is not Read-Write Stable with respect to Node.order (case H)
// 4409.1-4409.146: (5.5): Node.item is not Read-Write Stable with respect to Node.order (case I)
// 4491.1-4491.136: (7.5): Node.order is not Write-Read Stable with respect to Node.item (case J)
// 4492.1-4492.136: (7.5): Node.order is not Write-Read Stable with respect to Node.item (case K)
// 4493.1-4493.99: (7.5): Node.order is not Write-Read Stable with respect to Node.item (case L)
// 4577.1-4577.140: (25.5): List.head is not Write-Write Stable with respect to Node.item (case A.1)
// 4578.1-4578.101: (25.5): List.head is not Write-Write Stable with respect to Node.item (case A.2)
// 4579.1-4579.156: (25.5): List.head is not Write-Write Stable with respect to Node.item (case A.3)
// 4693.1-4693.140: (5.5): Node.item is not Write-Write Stable with respect to List.head (case C)
// 4812.1-4812.144: (5.5): Node.item is not Write-Write Stable with respect to List.head (case D)
// 4813.1-4813.144: (5.5): Node.item is not Write-Write Stable with respect to List.head (case R)
// 4896.1-4896.136: (5.5): Node.item is not Read-Write Stable with respect to List.head (case F)
// 4897.1-4897.136: (5.5): Node.item is not Read-Write Stable with respect to List.head (case H)
// 4898.1-4898.144: (5.5): Node.item is not Read-Write Stable with respect to List.head (case I)
// 4980.1-4980.136: (25.5): List.head is not Write-Read Stable with respect to Node.item (case J)
// 4981.1-4981.136: (25.5): List.head is not Write-Read Stable with respect to Node.item (case K)
// 4982.1-4982.99: (25.5): List.head is not Write-Read Stable with respect to Node.item (case L)
// 5066.1-5066.140: (5.5): Node.item is not Write-Write Stable with respect to Node.next (case A.1)
// 5067.1-5067.101: (5.5): Node.item is not Write-Write Stable with respect to Node.next (case A.2)
// 5068.1-5068.158: (5.5): Node.item is not Write-Write Stable with respect to Node.next (case A.3)
// 5182.1-5182.140: (6.5): Node.next is not Write-Write Stable with respect to Node.item (case C)
// 5301.1-5301.144: (6.5): Node.next is not Write-Write Stable with respect to Node.item (case D)
// 5302.1-5302.144: (6.5): Node.next is not Write-Write Stable with respect to Node.item (case R)
// 5385.1-5385.136: (6.5): Node.next is not Read-Write Stable with respect to Node.item (case F)
// 5386.1-5386.136: (6.5): Node.next is not Read-Write Stable with respect to Node.item (case H)
// 5387.1-5387.146: (6.5): Node.next is not Read-Write Stable with respect to Node.item (case I)
// 5469.1-5469.136: (5.5): Node.item is not Write-Read Stable with respect to Node.next (case J)
// 5470.1-5470.136: (5.5): Node.item is not Write-Read Stable with respect to Node.next (case K)
// 5471.1-5471.99: (5.5): Node.item is not Write-Read Stable with respect to Node.next (case L)
// 5555.1-5555.140: (6.5): Node.next is not Write-Write Stable with respect to Node.next (case A.1)
// 5556.1-5556.101: (6.5): Node.next is not Write-Write Stable with respect to Node.next (case A.2)
// 5557.1-5557.158: (6.5): Node.next is not Write-Write Stable with respect to Node.next (case A.3)
// 5671.1-5671.140: (6.5): Node.next is not Write-Write Stable with respect to Node.next (case C)
// 5790.1-5790.144: (6.5): Node.next is not Write-Write Stable with respect to Node.next (case D)
// 5791.1-5791.144: (6.5): Node.next is not Write-Write Stable with respect to Node.next (case R)
// 5874.1-5874.136: (6.5): Node.next is not Read-Write Stable with respect to Node.next (case F)
// 5875.1-5875.136: (6.5): Node.next is not Read-Write Stable with respect to Node.next (case H)
// 5876.1-5876.146: (6.5): Node.next is not Read-Write Stable with respect to Node.next (case I)
// 5958.1-5958.136: (6.5): Node.next is not Write-Read Stable with respect to Node.next (case J)
// 5959.1-5959.136: (6.5): Node.next is not Write-Read Stable with respect to Node.next (case K)
// 5960.1-5960.99: (6.5): Node.next is not Write-Read Stable with respect to Node.next (case L)
// 6044.1-6044.140: (7.5): Node.order is not Write-Write Stable with respect to Node.next (case A.1)
// 6045.1-6045.101: (7.5): Node.order is not Write-Write Stable with respect to Node.next (case A.2)
// 6046.1-6046.158: (7.5): Node.order is not Write-Write Stable with respect to Node.next (case A.3)
// 6160.1-6160.140: (6.5): Node.next is not Write-Write Stable with respect to Node.order (case C)
// 6279.1-6279.144: (6.5): Node.next is not Write-Write Stable with respect to Node.order (case D)
// 6280.1-6280.144: (6.5): Node.next is not Write-Write Stable with respect to Node.order (case R)
// 6363.1-6363.136: (6.5): Node.next is not Read-Write Stable with respect to Node.order (case F)
// 6364.1-6364.136: (6.5): Node.next is not Read-Write Stable with respect to Node.order (case H)
// 6365.1-6365.146: (6.5): Node.next is not Read-Write Stable with respect to Node.order (case I)
// 6447.1-6447.136: (7.5): Node.order is not Write-Read Stable with respect to Node.next (case J)
// 6448.1-6448.136: (7.5): Node.order is not Write-Read Stable with respect to Node.next (case K)
// 6449.1-6449.99: (7.5): Node.order is not Write-Read Stable with respect to Node.next (case L)
// 6533.1-6533.140: (25.5): List.head is not Write-Write Stable with respect to Node.next (case A.1)
// 6534.1-6534.101: (25.5): List.head is not Write-Write Stable with respect to Node.next (case A.2)
// 6535.1-6535.156: (25.5): List.head is not Write-Write Stable with respect to Node.next (case A.3)
// 6649.1-6649.140: (6.5): Node.next is not Write-Write Stable with respect to List.head (case C)
// 6768.1-6768.144: (6.5): Node.next is not Write-Write Stable with respect to List.head (case D)
// 6769.1-6769.144: (6.5): Node.next is not Write-Write Stable with respect to List.head (case R)
// 6852.1-6852.136: (6.5): Node.next is not Read-Write Stable with respect to List.head (case F)
// 6853.1-6853.136: (6.5): Node.next is not Read-Write Stable with respect to List.head (case H)
// 6854.1-6854.144: (6.5): Node.next is not Read-Write Stable with respect to List.head (case I)
// 6936.1-6936.136: (25.5): List.head is not Write-Read Stable with respect to Node.next (case J)
// 6937.1-6937.136: (25.5): List.head is not Write-Read Stable with respect to Node.next (case K)
// 6938.1-6938.99: (25.5): List.head is not Write-Read Stable with respect to Node.next (case L)
// 7022.1-7022.140: (5.5): Node.item is not Write-Write Stable with respect to Node.order (case A.1)
// 7023.1-7023.101: (5.5): Node.item is not Write-Write Stable with respect to Node.order (case A.2)
// 7024.1-7024.158: (5.5): Node.item is not Write-Write Stable with respect to Node.order (case A.3)
// 7138.1-7138.140: (7.5): Node.order is not Write-Write Stable with respect to Node.item (case C)
// 7257.1-7257.144: (7.5): Node.order is not Write-Write Stable with respect to Node.item (case D)
// 7258.1-7258.144: (7.5): Node.order is not Write-Write Stable with respect to Node.item (case R)
// 7341.1-7341.136: (7.5): Node.order is not Read-Write Stable with respect to Node.item (case F)
// 7342.1-7342.136: (7.5): Node.order is not Read-Write Stable with respect to Node.item (case H)
// 7343.1-7343.146: (7.5): Node.order is not Read-Write Stable with respect to Node.item (case I)
// 7425.1-7425.136: (5.5): Node.item is not Write-Read Stable with respect to Node.order (case J)
// 7426.1-7426.136: (5.5): Node.item is not Write-Read Stable with respect to Node.order (case K)
// 7427.1-7427.99: (5.5): Node.item is not Write-Read Stable with respect to Node.order (case L)
// 7511.1-7511.140: (6.5): Node.next is not Write-Write Stable with respect to Node.order (case A.1)
// 7512.1-7512.101: (6.5): Node.next is not Write-Write Stable with respect to Node.order (case A.2)
// 7513.1-7513.158: (6.5): Node.next is not Write-Write Stable with respect to Node.order (case A.3)
// 7627.1-7627.140: (7.5): Node.order is not Write-Write Stable with respect to Node.next (case C)
// 7746.1-7746.144: (7.5): Node.order is not Write-Write Stable with respect to Node.next (case D)
// 7747.1-7747.144: (7.5): Node.order is not Write-Write Stable with respect to Node.next (case R)
// 7830.1-7830.136: (7.5): Node.order is not Read-Write Stable with respect to Node.next (case F)
// 7831.1-7831.136: (7.5): Node.order is not Read-Write Stable with respect to Node.next (case H)
// 7832.1-7832.146: (7.5): Node.order is not Read-Write Stable with respect to Node.next (case I)
// 7914.1-7914.136: (6.5): Node.next is not Write-Read Stable with respect to Node.order (case J)
// 7915.1-7915.136: (6.5): Node.next is not Write-Read Stable with respect to Node.order (case K)
// 7916.1-7916.99: (6.5): Node.next is not Write-Read Stable with respect to Node.order (case L)
// 8000.1-8000.140: (7.5): Node.order is not Write-Write Stable with respect to Node.order (case A.1)
// 8001.1-8001.101: (7.5): Node.order is not Write-Write Stable with respect to Node.order (case A.2)
// 8002.1-8002.158: (7.5): Node.order is not Write-Write Stable with respect to Node.order (case A.3)
// 8116.1-8116.140: (7.5): Node.order is not Write-Write Stable with respect to Node.order (case C)
// 8235.1-8235.144: (7.5): Node.order is not Write-Write Stable with respect to Node.order (case D)
// 8236.1-8236.144: (7.5): Node.order is not Write-Write Stable with respect to Node.order (case R)
// 8319.1-8319.136: (7.5): Node.order is not Read-Write Stable with respect to Node.order (case F)
// 8320.1-8320.136: (7.5): Node.order is not Read-Write Stable with respect to Node.order (case H)
// 8321.1-8321.146: (7.5): Node.order is not Read-Write Stable with respect to Node.order (case I)
// 8403.1-8403.136: (7.5): Node.order is not Write-Read Stable with respect to Node.order (case J)
// 8404.1-8404.136: (7.5): Node.order is not Write-Read Stable with respect to Node.order (case K)
// 8405.1-8405.99: (7.5): Node.order is not Write-Read Stable with respect to Node.order (case L)
// 8489.1-8489.140: (25.5): List.head is not Write-Write Stable with respect to Node.order (case A.1)
// 8490.1-8490.101: (25.5): List.head is not Write-Write Stable with respect to Node.order (case A.2)
// 8491.1-8491.156: (25.5): List.head is not Write-Write Stable with respect to Node.order (case A.3)
// 8605.1-8605.140: (7.5): Node.order is not Write-Write Stable with respect to List.head (case C)
// 8724.1-8724.144: (7.5): Node.order is not Write-Write Stable with respect to List.head (case D)
// 8725.1-8725.144: (7.5): Node.order is not Write-Write Stable with respect to List.head (case R)
// 8808.1-8808.136: (7.5): Node.order is not Read-Write Stable with respect to List.head (case F)
// 8809.1-8809.136: (7.5): Node.order is not Read-Write Stable with respect to List.head (case H)
// 8810.1-8810.144: (7.5): Node.order is not Read-Write Stable with respect to List.head (case I)
// 8892.1-8892.136: (25.5): List.head is not Write-Read Stable with respect to Node.order (case J)
// 8893.1-8893.136: (25.5): List.head is not Write-Read Stable with respect to Node.order (case K)
// 8894.1-8894.99: (25.5): List.head is not Write-Read Stable with respect to Node.order (case L)
// 8978.1-8978.140: (5.5): Node.item is not Write-Write Stable with respect to List.head (case A.1)
// 8979.1-8979.101: (5.5): Node.item is not Write-Write Stable with respect to List.head (case A.2)
// 8980.1-8980.156: (5.5): Node.item is not Write-Write Stable with respect to List.head (case A.3)
// 9094.1-9094.140: (25.5): List.head is not Write-Write Stable with respect to Node.item (case C)
// 9213.1-9213.144: (25.5): List.head is not Write-Write Stable with respect to Node.item (case D)
// 9214.1-9214.144: (25.5): List.head is not Write-Write Stable with respect to Node.item (case R)
// 9297.1-9297.136: (25.5): List.head is not Read-Write Stable with respect to Node.item (case F)
// 9298.1-9298.136: (25.5): List.head is not Read-Write Stable with respect to Node.item (case H)
// 9299.1-9299.144: (25.5): List.head is not Read-Write Stable with respect to Node.item (case I)
// 9381.1-9381.136: (5.5): Node.item is not Write-Read Stable with respect to List.head (case J)
// 9382.1-9382.136: (5.5): Node.item is not Write-Read Stable with respect to List.head (case K)
// 9383.1-9383.99: (5.5): Node.item is not Write-Read Stable with respect to List.head (case L)
// 9467.1-9467.140: (6.5): Node.next is not Write-Write Stable with respect to List.head (case A.1)
// 9468.1-9468.101: (6.5): Node.next is not Write-Write Stable with respect to List.head (case A.2)
// 9469.1-9469.156: (6.5): Node.next is not Write-Write Stable with respect to List.head (case A.3)
// 9583.1-9583.140: (25.5): List.head is not Write-Write Stable with respect to Node.next (case C)
// 9702.1-9702.144: (25.5): List.head is not Write-Write Stable with respect to Node.next (case D)
// 9703.1-9703.144: (25.5): List.head is not Write-Write Stable with respect to Node.next (case R)
// 9786.1-9786.136: (25.5): List.head is not Read-Write Stable with respect to Node.next (case F)
// 9787.1-9787.136: (25.5): List.head is not Read-Write Stable with respect to Node.next (case H)
// 9788.1-9788.144: (25.5): List.head is not Read-Write Stable with respect to Node.next (case I)
// 9870.1-9870.136: (6.5): Node.next is not Write-Read Stable with respect to List.head (case J)
// 9871.1-9871.136: (6.5): Node.next is not Write-Read Stable with respect to List.head (case K)
// 9872.1-9872.99: (6.5): Node.next is not Write-Read Stable with respect to List.head (case L)
// 9956.1-9956.140: (7.5): Node.order is not Write-Write Stable with respect to List.head (case A.1)
// 9957.1-9957.101: (7.5): Node.order is not Write-Write Stable with respect to List.head (case A.2)
// 9958.1-9958.156: (7.5): Node.order is not Write-Write Stable with respect to List.head (case A.3)
// 10072.1-10072.140: (25.5): List.head is not Write-Write Stable with respect to Node.order (case C)
// 10191.1-10191.144: (25.5): List.head is not Write-Write Stable with respect to Node.order (case D)
// 10192.1-10192.144: (25.5): List.head is not Write-Write Stable with respect to Node.order (case R)
// 10275.1-10275.136: (25.5): List.head is not Read-Write Stable with respect to Node.order (case F)
// 10276.1-10276.136: (25.5): List.head is not Read-Write Stable with respect to Node.order (case H)
// 10277.1-10277.144: (25.5): List.head is not Read-Write Stable with respect to Node.order (case I)
// 10359.1-10359.136: (7.5): Node.order is not Write-Read Stable with respect to List.head (case J)
// 10360.1-10360.136: (7.5): Node.order is not Write-Read Stable with respect to List.head (case K)
// 10361.1-10361.99: (7.5): Node.order is not Write-Read Stable with respect to List.head (case L)
// 10445.1-10445.140: (25.5): List.head is not Write-Write Stable with respect to List.head (case A.1)
// 10446.1-10446.101: (25.5): List.head is not Write-Write Stable with respect to List.head (case A.2)
// 10447.1-10447.158: (25.5): List.head is not Write-Write Stable with respect to List.head (case A.3)
// 10561.1-10561.140: (25.5): List.head is not Write-Write Stable with respect to List.head (case C)
// 10680.1-10680.144: (25.5): List.head is not Write-Write Stable with respect to List.head (case D)
// 10681.1-10681.144: (25.5): List.head is not Write-Write Stable with respect to List.head (case R)
// 10764.1-10764.136: (25.5): List.head is not Read-Write Stable with respect to List.head (case F)
// 10765.1-10765.136: (25.5): List.head is not Read-Write Stable with respect to List.head (case H)
// 10766.1-10766.146: (25.5): List.head is not Read-Write Stable with respect to List.head (case I)
// 10848.1-10848.136: (25.5): List.head is not Write-Read Stable with respect to List.head (case J)
// 10849.1-10849.136: (25.5): List.head is not Write-Read Stable with respect to List.head (case K)
// 10850.1-10850.99: (25.5): List.head is not Write-Read Stable with respect to List.head (case L)
// 10857.1-10857.266: (<undefined position>): Object invariant may not hold.
// 10858.1-10858.266: (<undefined position>): Object invariant may not hold.
// 10871.1-10871.265: (<undefined position>): Object invariant may not hold.
// 10872.1-10872.265: (<undefined position>): Object invariant may not hold.
// 10893.1-10919.2: (7.32): yields_as clause for Lock._lock is not valid
// 10924.1-10945.2: (7.32): yields_as clause for Lock._lock is not reflexive
// 10951.1-10951.266: (2.1): Object invariant may not hold.
// 10952.1-10952.266: (2.1): Object invariant may not hold.
// 10953.1-10995.2: (7.32): yields_as clause for Lock._lock is not transitive
// 11014.1-11040.2: (5.5): yields_as clause for Node.item is not valid
// 11045.1-11066.2: (5.5): yields_as clause for Node.item is not reflexive
// 11072.1-11072.266: (5.23): Object invariant may not hold.
// 11073.1-11073.266: (5.23): Object invariant may not hold.
// 11074.1-11116.2: (5.5): yields_as clause for Node.item is not transitive
// 11135.1-11161.2: (6.5): yields_as clause for Node.next is not valid
// 11166.1-11187.2: (6.5): yields_as clause for Node.next is not reflexive
// 11193.1-11193.266: (6.24): Object invariant may not hold.
// 11194.1-11194.266: (6.24): Object invariant may not hold.
// 11195.1-11237.2: (6.5): yields_as clause for Node.next is not transitive
// 11256.1-11282.2: (7.5): yields_as clause for Node.order is not valid
// 11287.1-11308.2: (7.5): yields_as clause for Node.order is not reflexive
// 11314.1-11314.266: (7.25): Object invariant may not hold.
// 11315.1-11315.266: (7.25): Object invariant may not hold.
// 11316.1-11358.2: (7.5): yields_as clause for Node.order is not transitive
// 11378.1-11404.2: (7.32): yields_as clause for Node._lock is not valid
// 11409.1-11430.2: (7.32): yields_as clause for Node._lock is not reflexive
// 11436.1-11436.266: (4.1): Object invariant may not hold.
// 11437.1-11437.266: (4.1): Object invariant may not hold.
// 11438.1-11480.2: (7.32): yields_as clause for Node._lock is not transitive
// 11499.1-11525.2: (25.5): yields_as clause for List.head is not valid
// 11530.1-11551.2: (25.5): yields_as clause for List.head is not reflexive
// 11557.1-11557.266: (25.25): Object invariant may not hold.
// 11558.1-11558.266: (25.25): Object invariant may not hold.
// 11559.1-11601.2: (25.5): yields_as clause for List.head is not transitive
// 11621.1-11647.2: (7.32): yields_as clause for List._lock is not valid
// 11652.1-11673.2: (7.32): yields_as clause for List._lock is not reflexive
// 11679.1-11679.266: (23.1): Object invariant may not hold.
// 11680.1-11680.266: (23.1): Object invariant may not hold.
// 11681.1-11723.2: (7.32): yields_as clause for List._lock is not transitive
